!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],e):e(t.bootstrap={},t.jQuery)}(this,function(t,e){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function c(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},e=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),e.forEach(function(t){var e,n,i;e=r,i=o[n=t],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return r}for(var r,n,o,a,l,h,f,u,d,p,g,m,_,v,E,y,b,T,C,w,I,D,A,S,O,N,k,L,P,x,j,M,R,H,W,F,U,B,K,V,Q,Y,G,q,z,X,J,Z,$,tt,et,nt,it,rt,ot,st,at,lt,ct,ht,ft,ut,dt,pt,gt=function(i){var e="transitionend";function t(t){var e=this,n=!1;return i(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return 0<i(document).find(e).length?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=i(t).css("transition-duration");return parseFloat(e)?(e=e.split(",")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){i(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=e[i],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}var a}};return i.fn.emulateTransitionEnd=t,i.event.special[l.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},l}(e=e&&e.hasOwnProperty("default")?e.default:e),mt=(n="alert",a="."+(o="bs.alert"),l=(r=e).fn[n],h={CLOSE:"close"+a,CLOSED:"closed"+a,CLICK_DATA_API:"click"+a+".data-api"},f="alert",u="fade",d="show",p=function(){function i(t){this._element=t}var t=i.prototype;return t.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},t.dispose=function(){r.removeData(this._element,o),this._element=null},t._getRootElement=function(t){var e=gt.getSelectorFromElement(t),n=!1;return e&&(n=r(e)[0]),n||(n=r(t).closest("."+f)[0]),n},t._triggerCloseEvent=function(t){var e=r.Event(h.CLOSE);return r(t).trigger(e),e},t._removeElement=function(e){var n=this;if(r(e).removeClass(d),r(e).hasClass(u)){var t=gt.getTransitionDurationFromElement(e);r(e).one(gt.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(t)}else this._destroyElement(e)},t._destroyElement=function(t){r(t).detach().trigger(h.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var t=r(this),e=t.data(o);e||(e=new i(this),t.data(o,e)),"close"===n&&e[n](this)})},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},s(i,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),i}(),r(document).on(h.CLICK_DATA_API,'[data-dismiss="alert"]',p._handleDismiss(new p)),r.fn[n]=p._jQueryInterface,r.fn[n].Constructor=p,r.fn[n].noConflict=function(){return r.fn[n]=l,p._jQueryInterface},p),_t=(m="button",v="."+(_="bs.button"),E=".data-api",y=(g=e).fn[m],b="active",T="btn",w='[data-toggle^="button"]',I='[data-toggle="buttons"]',D="input",A=".active",S=".btn",O={CLICK_DATA_API:"click"+v+E,FOCUS_BLUR_DATA_API:(C="focus")+v+E+" blur"+v+E},N=function(){function n(t){this._element=t}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=g(this._element).closest(I)[0];if(n){var i=g(this._element).find(D)[0];if(i){if("radio"===i.type)if(i.checked&&g(this._element).hasClass(b))t=!1;else{var r=g(n).find(A)[0];r&&g(r).removeClass(b)}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!g(this._element).hasClass(b),g(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!g(this._element).hasClass(b)),t&&g(this._element).toggleClass(b)},t.dispose=function(){g.removeData(this._element,_),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var t=g(this).data(_);t||(t=new n(this),g(this).data(_,t)),"toggle"===e&&t[e]()})},s(n,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),n}(),g(document).on(O.CLICK_DATA_API,w,function(t){t.preventDefault();var e=t.target;g(e).hasClass(T)||(e=g(e).closest(S)),N._jQueryInterface.call(g(e),"toggle")}).on(O.FOCUS_BLUR_DATA_API,w,function(t){var e=g(t.target).closest(S)[0];g(e).toggleClass(C,/^focus(in)?$/.test(t.type))}),g.fn[m]=N._jQueryInterface,g.fn[m].Constructor=N,g.fn[m].noConflict=function(){return g.fn[m]=y,N._jQueryInterface},N),vt=(L="carousel",x="."+(P="bs.carousel"),j=".data-api",M=(k=e).fn[L],R={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},H={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},W="next",F="prev",U="left",B="right",K={SLIDE:"slide"+x,SLID:"slid"+x,KEYDOWN:"keydown"+x,MOUSEENTER:"mouseenter"+x,MOUSELEAVE:"mouseleave"+x,TOUCHEND:"touchend"+x,LOAD_DATA_API:"load"+x+j,CLICK_DATA_API:"click"+x+j},V="carousel",Q="active",Y="slide",G="carousel-item-right",q="carousel-item-left",z="carousel-item-next",X="carousel-item-prev",J={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},Z=function(){function o(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=k(t)[0],this._indicatorsElement=k(this._element).find(J.INDICATORS)[0],this._addEventListeners()}var t=o.prototype;return t.next=function(){this._isSliding||this._slide(W)},t.nextWhenVisible=function(){!document.hidden&&k(this._element).is(":visible")&&"hidden"!==k(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(F)},t.pause=function(t){t||(this._isPaused=!0),k(this._element).find(J.NEXT_PREV)[0]&&(gt.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=k(this._element).find(J.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)k(this._element).one(K.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?W:F;this._slide(i,this._items[t])}},t.dispose=function(){k(this._element).off(x),k.removeData(this._element,P),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=c({},R,t),gt.typeCheckConfig(L,t,H),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&k(this._element).on(K.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(k(this._element).on(K.MOUSEENTER,function(t){return e.pause(t)}).on(K.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&k(this._element).on(K.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},t._getItemIndex=function(t){return this._items=k.makeArray(k(t).parent().find(J.ITEM)),this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===W,i=t===F,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=(r+(t===F?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(k(this._element).find(J.ACTIVE_ITEM)[0]),r=k.Event(K.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return k(this._element).trigger(r),r},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){k(this._indicatorsElement).find(J.ACTIVE).removeClass(Q);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&k(e).addClass(Q)}},t._slide=function(t,e){var n,i,r,o=this,s=k(this._element).find(J.ACTIVE_ITEM)[0],a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),h=Boolean(this._interval);if(t===W?(n=q,i=z,r=U):(n=G,i=X,r=B),l&&k(l).hasClass(Q))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var f=k.Event(K.SLID,{relatedTarget:l,direction:r,from:a,to:c});if(k(this._element).hasClass(Y)){k(l).addClass(i),gt.reflow(l),k(s).addClass(n),k(l).addClass(n);var u=gt.getTransitionDurationFromElement(s);k(s).one(gt.TRANSITION_END,function(){k(l).removeClass(n+" "+i).addClass(Q),k(s).removeClass(Q+" "+i+" "+n),o._isSliding=!1,setTimeout(function(){return k(o._element).trigger(f)},0)}).emulateTransitionEnd(u)}else k(s).removeClass(Q),k(l).addClass(Q),this._isSliding=!1,k(this._element).trigger(f);h&&this.cycle()}},o._jQueryInterface=function(i){return this.each(function(){var t=k(this).data(P),e=c({},R,k(this).data());"object"==typeof i&&(e=c({},e,i));var n="string"==typeof i?i:e.slide;if(t||(t=new o(this,e),k(this).data(P,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},o._dataApiClickHandler=function(t){var e=gt.getSelectorFromElement(this);if(e){var n=k(e)[0];if(n&&k(n).hasClass(V)){var i=c({},k(n).data(),k(this).data()),r=this.getAttribute("data-slide-to");r&&(i.interval=!1),o._jQueryInterface.call(k(n),i),r&&k(n).data(P).to(r),t.preventDefault()}}},s(o,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return R}}]),o}(),k(document).on(K.CLICK_DATA_API,J.DATA_SLIDE,Z._dataApiClickHandler),k(window).on(K.LOAD_DATA_API,function(){k(J.DATA_RIDE).each(function(){var t=k(this);Z._jQueryInterface.call(t,t.data())})}),k.fn[L]=Z._jQueryInterface,k.fn[L].Constructor=Z,k.fn[L].noConflict=function(){return k.fn[L]=M,Z._jQueryInterface},Z),Et=(tt="collapse",nt="."+(et="bs.collapse"),it=($=e).fn[tt],rt={toggle:!0,parent:""},ot={toggle:"boolean",parent:"(string|element)"},st={SHOW:"show"+nt,SHOWN:"shown"+nt,HIDE:"hide"+nt,HIDDEN:"hidden"+nt,CLICK_DATA_API:"click"+nt+".data-api"},at="show",lt="collapse",ct="collapsing",ht="collapsed",ft="width",ut="height",dt={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},pt=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=$.makeArray($('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=$(dt.DATA_TOGGLE),i=0;i<n.length;i++){var r=n[i],o=gt.getSelectorFromElement(r);null!==o&&0<$(o).filter(t).length&&(this._selector=o,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=a.prototype;return t.toggle=function(){$(this._element).hasClass(at)?this.hide():this.show()},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!$(this._element).hasClass(at)&&(this._parent&&0===(t=$.makeArray($(this._parent).find(dt.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),!(t&&(e=$(t).not(this._selector).data(et))&&e._isTransitioning))){var i=$.Event(st.SHOW);if($(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call($(t).not(this._selector),"hide"),e||$(t).data(et,null));var r=this._getDimension();$(this._element).removeClass(lt).addClass(ct),(this._element.style[r]=0)<this._triggerArray.length&&$(this._triggerArray).removeClass(ht).attr("aria-expanded",!0),this.setTransitioning(!0);var o="scroll"+(r[0].toUpperCase()+r.slice(1)),s=gt.getTransitionDurationFromElement(this._element);$(this._element).one(gt.TRANSITION_END,function(){$(n._element).removeClass(ct).addClass(lt).addClass(at),n._element.style[r]="",n.setTransitioning(!1),$(n._element).trigger(st.SHOWN)}).emulateTransitionEnd(s),this._element.style[r]=this._element[o]+"px"}}},t.hide=function(){var t=this;if(!this._isTransitioning&&$(this._element).hasClass(at)){var e=$.Event(st.HIDE);if($(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",gt.reflow(this._element),$(this._element).addClass(ct).removeClass(lt).removeClass(at),0<this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var r=this._triggerArray[i],o=gt.getSelectorFromElement(r);if(null!==o)$(o).hasClass(at)||$(r).addClass(ht).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var s=gt.getTransitionDurationFromElement(this._element);$(this._element).one(gt.TRANSITION_END,function(){t.setTransitioning(!1),$(t._element).removeClass(ct).addClass(lt).trigger(st.HIDDEN)}).emulateTransitionEnd(s)}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){$.removeData(this._element,et),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=c({},rt,t)).toggle=Boolean(t.toggle),gt.typeCheckConfig(tt,t,ot),t},t._getDimension=function(){return $(this._element).hasClass(ft)?ft:ut},t._getParent=function(){var n=this,t=null;gt.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=$(this._config.parent)[0];var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return $(t).find(e).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){if(t){var n=$(t).hasClass(at);0<e.length&&$(e).toggleClass(ht,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=gt.getSelectorFromElement(t);return e?$(e)[0]:null},a._jQueryInterface=function(i){return this.each(function(){var t=$(this),e=t.data(et),n=c({},rt,t.data(),"object"==typeof i&&i?i:{});if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(et,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},s(a,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return rt}}]),a}(),$(document).on(st.CLICK_DATA_API,dt.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=$(this),e=gt.getSelectorFromElement(this);$(e).each(function(){var t=$(this),e=t.data(et)?"toggle":n.data();pt._jQueryInterface.call(t,e)})}),$.fn[tt]=pt._jQueryInterface,$.fn[tt].Constructor=pt,$.fn[tt].noConflict=function(){return $.fn[tt]=it,pt._jQueryInterface},pt),yt="undefined"!=typeof window&&"undefined"!=typeof document,bt=["Edge","Trident","Firefox"],Tt=0,Ct=0;Ct<bt.length;Ct+=1)if(yt&&0<=navigator.userAgent.indexOf(bt[Ct])){Tt=1;break}var wt=yt&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},Tt))}};function It(t){return t&&"[object Function]"==={}.toString.call(t)}function Dt(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function At(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function St(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=Dt(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?t:St(At(t))}var Ot=yt&&!(!window.MSInputMethodContext||!document.documentMode),Nt=yt&&/MSIE 10/.test(navigator.userAgent);function kt(t){return 11===t?Ot:10===t?Nt:Ot||Nt}function Lt(t){if(!t)return document.documentElement;for(var e=kt(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===Dt(n,"position")?Lt(n):n:t?t.ownerDocument.documentElement:document.documentElement}function Pt(t){return null!==t.parentNode?Pt(t.parentNode):t}function xt(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var s,a,l=o.commonAncestorContainer;if(t!==l&&e!==l||i.contains(r))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&Lt(s.firstElementChild)!==s?Lt(l):l;var c=Pt(t);return c.host?xt(c.host,e):xt(t,Pt(e).host)}function jt(t){var e="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function Mt(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function Rt(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],kt(10)?n["offset"+t]+i["margin"+("Height"===t?"Top":"Left")]+i["margin"+("Height"===t?"Bottom":"Right")]:0)}function Ht(){var t=document.body,e=document.documentElement,n=kt(10)&&getComputedStyle(e);return{height:Rt("Height",t,e,n),width:Rt("Width",t,e,n)}}var Wt=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Ft=function(){function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}}(),Ut=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},Bt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function Kt(t){return Bt({},t,{right:t.left+t.width,bottom:t.top+t.height})}function Vt(t){var e={};try{if(kt(10)){e=t.getBoundingClientRect();var n=jt(t,"top"),i=jt(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?Ht():{},s=o.width||t.clientWidth||r.right-r.left,a=o.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-s,c=t.offsetHeight-a;if(l||c){var h=Dt(t);l-=Mt(h,"x"),c-=Mt(h,"y"),r.width-=l,r.height-=c}return Kt(r)}function Qt(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=kt(10),r="HTML"===e.nodeName,o=Vt(t),s=Vt(e),a=St(t),l=Dt(e),c=parseFloat(l.borderTopWidth,10),h=parseFloat(l.borderLeftWidth,10);n&&"HTML"===e.nodeName&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var f=Kt({top:o.top-s.top-c,left:o.left-s.left-h,width:o.width,height:o.height});if(f.marginTop=0,f.marginLeft=0,!i&&r){var u=parseFloat(l.marginTop,10),d=parseFloat(l.marginLeft,10);f.top-=c-u,f.bottom-=c-u,f.left-=h-d,f.right-=h-d,f.marginTop=u,f.marginLeft=d}return(i&&!n?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(f=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=jt(e,"top"),r=jt(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}(f,e)),f}function Yt(t){if(!t||!t.parentElement||kt())return document.documentElement;for(var e=t.parentElement;e&&"none"===Dt(e,"transform");)e=e.parentElement;return e||document.documentElement}function Gt(t,e,n,i){var r=4<arguments.length&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=r?Yt(t):xt(t,e);if("viewport"===i)o=function(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=Qt(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:jt(n),a=e?0:jt(n,"left");return Kt({top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:r,height:o})}(s,r);else{var a=void 0;"scrollParent"===i?"BODY"===(a=St(At(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===i?t.ownerDocument.documentElement:i;var l=Qt(a,s,r);if("HTML"!==a.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===Dt(e,"position")||t(At(e)))}(s))o=l;else{var c=Ht(),h=c.height,f=c.width;o.top+=l.top-l.marginTop,o.bottom=h+l.top,o.left+=l.left-l.marginLeft,o.right=f+l.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function qt(t,e,i,n,r){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=Gt(i,n,o,r),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},l=Object.keys(a).map(function(t){return Bt({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=l.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),h=0<c.length?c[0].key:l[0].key,f=t.split("-")[1];return h+(f?"-"+f:"")}function zt(t,e,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return Qt(n,i?Yt(e):xt(e,n),i)}function Xt(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function Jt(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function Zt(t,e,n){n=n.split("-")[0];var i=Xt(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[s]=e[s]+e[l]/2-i[l]/2,r[a]=n===a?e[a]-i[c]:e[Jt(a)],r}function $t(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function te(t,n,e){return(void 0===e?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=$t(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",e))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=t.function||t.fn;t.enabled&&It(e)&&(n.offsets.popper=Kt(n.offsets.popper),n.offsets.reference=Kt(n.offsets.reference),n=e(n,t))}),n}function ee(t,n){return t.some(function(t){var e=t.name;return t.enabled&&e===n})}function ne(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function ie(t){var e=t.ownerDocument;return e?e.defaultView:window}function re(t,e,n,i){n.updateBound=i,ie(t).addEventListener("resize",n.updateBound,{passive:!0});var r=St(t);return function t(e,n,i,r){var o="BODY"===e.nodeName,s=o?e.ownerDocument.defaultView:e;s.addEventListener(n,i,{passive:!0}),o||t(St(s.parentNode),n,i,r),r.push(s)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function oe(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,ie(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function se(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function ae(n,i){Object.keys(i).forEach(function(t){var e="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&se(i[t])&&(e="px"),n.style[t]=i[t]+e})}function le(t,e,n){var i=$t(t,function(t){return t.name===e}),r=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!r){var o="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var ce=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],he=ce.slice(3);function fe(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=he.indexOf(t),i=he.slice(n+1).concat(he.slice(0,n));return e?i.reverse():i}var ue={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function de(t,r,o,e){var s=[0,0],a=-1!==["right","left"].indexOf(e),n=t.split(/(\+|\-)/).map(function(t){return t.trim()}),i=n.indexOf($t(n,function(t){return-1!==t.search(/,|\s/)}));n[i]&&-1===n[i].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==i?[n.slice(0,i).concat([n[i].split(l)[0]]),[n[i].split(l)[1]].concat(n.slice(i+1))]:[n];return(c=c.map(function(t,e){var n=(1===e?!a:a)?"height":"width",i=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,i=!0,t):i?(t[t.length-1]+=e,i=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return Kt(a)[e]/100*o}if("vh"===s||"vw"===s)return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(t,n,r,o)})})).forEach(function(n,i){n.forEach(function(t,e){se(t)&&(s[i]+=t*("-"===n[e-1]?-1:1))})}),s}var pe={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",h={start:Ut({},l,o[l]),end:Ut({},l,o[l]+o[c]-s[c])};t.offsets.popper=Bt({},s,h[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],l=void 0;return l=se(+n)?[+n,0]:de(n,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,i){var e=i.boundariesElement||Lt(t.instance.popper);t.instance.reference===e&&(e=Lt(e));var n=ne("transform"),r=t.instance.popper.style,o=r.top,s=r.left,a=r[n];r.top="",r.left="",r[n]="";var l=Gt(t.instance.popper,t.instance.reference,i.padding,e,t.positionFixed);r.top=o,r.left=s,r[n]=a,i.boundaries=l;var c=i.priority,h=t.offsets.popper,f={primary:function(t){var e=h[t];return h[t]<l[t]&&!i.escapeWithReference&&(e=Math.max(h[t],l[t])),Ut({},t,e)},secondary:function(t){var e="right"===t?"left":"top",n=h[e];return h[t]>l[t]&&!i.escapeWithReference&&(n=Math.min(h[e],l[t]-("right"===t?h.width:h.height))),Ut({},e,n)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";h=Bt({},h,f[e](t))}),t.offsets.popper=h,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<o(i[l])&&(t.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[a])&&(t.offsets.popper[l]=o(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!le(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",h=l?"Top":"Left",f=h.toLowerCase(),u=l?"left":"top",d=l?"bottom":"right",p=Xt(i)[c];a[d]-p<s[f]&&(t.offsets.popper[f]-=s[f]-(a[d]-p)),a[f]+p>s[d]&&(t.offsets.popper[f]+=a[f]+p-s[d]),t.offsets.popper=Kt(t.offsets.popper);var g=a[f]+a[c]/2-p/2,m=Dt(t.instance.popper),_=parseFloat(m["margin"+h],10),v=parseFloat(m["border"+h+"Width"],10),E=g-t.offsets.popper[f]-_-v;return E=Math.max(Math.min(s[c]-p,E),0),t.arrowElement=i,t.offsets.arrow=(Ut(n={},f,Math.round(E)),Ut(n,u,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(p,g){if(ee(p.instance.modifiers,"inner"))return p;if(p.flipped&&p.placement===p.originalPlacement)return p;var m=Gt(p.instance.popper,p.instance.reference,g.padding,g.boundariesElement,p.positionFixed),_=p.placement.split("-")[0],v=Jt(_),E=p.placement.split("-")[1]||"",y=[];switch(g.behavior){case ue.FLIP:y=[_,v];break;case ue.CLOCKWISE:y=fe(_);break;case ue.COUNTERCLOCKWISE:y=fe(_,!0);break;default:y=g.behavior}return y.forEach(function(t,e){if(_!==t||y.length===e+1)return p;_=p.placement.split("-")[0],v=Jt(_);var n,i=p.offsets.popper,r=p.offsets.reference,o=Math.floor,s="left"===_&&o(i.right)>o(r.left)||"right"===_&&o(i.left)<o(r.right)||"top"===_&&o(i.bottom)>o(r.top)||"bottom"===_&&o(i.top)<o(r.bottom),a=o(i.left)<o(m.left),l=o(i.right)>o(m.right),c=o(i.top)<o(m.top),h=o(i.bottom)>o(m.bottom),f="left"===_&&a||"right"===_&&l||"top"===_&&c||"bottom"===_&&h,u=-1!==["top","bottom"].indexOf(_),d=!!g.flipVariations&&(u&&"start"===E&&a||u&&"end"===E&&l||!u&&"start"===E&&c||!u&&"end"===E&&h);(s||f||d)&&(p.flipped=!0,(s||f)&&(_=y[e+1]),d&&(E="end"===(n=E)?"start":"start"===n?"end":n),p.placement=_+(E?"-"+E:""),p.offsets.popper=Bt({},p.offsets.popper,Zt(p.instance.popper,p.offsets.reference,p.placement)),p=te(p.instance.modifiers,p,"flip"))}),p},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[n]-(a?r[s?"width":"height"]:0),t.placement=Jt(e),t.offsets.popper=Kt(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!le(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=$t(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=$t(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:e.gpuAcceleration,a=Vt(Lt(t.instance.popper)),l={position:r.position},c={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},h="bottom"===n?"top":"bottom",f="right"===i?"left":"right",u=ne("transform"),d=void 0,p=void 0;if(p="bottom"===h?-a.height+c.bottom:c.top,d="right"===f?-a.width+c.right:c.left,s&&u)l[u]="translate3d("+d+"px, "+p+"px, 0)",l[h]=0,l[f]=0,l.willChange="transform";else{var g="bottom"===h?-1:1,m="right"===f?-1:1;l[h]=p*g,l[f]=d*m,l.willChange=h+", "+f}var _={"x-placement":t.placement};return t.attributes=Bt({},_,t.attributes),t.styles=Bt({},l,t.styles),t.arrowStyles=Bt({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return ae(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&ae(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,r){var o=zt(r,e,t,n.positionFixed),s=qt(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),ae(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ge=function(){function o(t,e){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};Wt(this,o),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=wt(this.update.bind(this)),this.options=Bt({},o.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(Bt({},o.Defaults.modifiers,i.modifiers)).forEach(function(t){n.options.modifiers[t]=Bt({},o.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return Bt({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&It(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return Ft(o,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=zt(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=qt(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=Zt(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=te(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,ee(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[ne("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=re(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return oe.call(this)}}]),o}();ge.Utils=("undefined"!=typeof window?window:global).PopperUtils,ge.placements=ce,ge.Defaults=pe;var me,_e,ve,Ee,ye,be,Te,Ce,we,Ie,De,Ae,Se,Oe,Ne,ke,Le,Pe,xe,je,Me,Re,He,We,Fe,Ue,Be,Ke,Ve,Qe,Ye,Ge,qe,ze,Xe,Je,Ze,$e,tn,en,nn,rn,on,sn,an,ln,cn,hn,fn,un,dn,pn,gn,mn,_n,vn,En,yn,bn,Tn,Cn,wn,In,Dn,An,Sn,On,Nn,kn,Ln,Pn,xn,jn,Mn,Rn,Hn,Wn,Fn,Un,Bn,Kn,Vn,Qn,Yn,Gn,qn,zn,Xn,Jn,Zn,$n,ti,ei,ni,ii,ri,oi,si,ai,li,ci,hi,fi,ui,di,pi,gi,mi,_i,vi,Ei,yi,bi,Ti=(_e="dropdown",Ee="."+(ve="bs.dropdown"),ye=".data-api",be=(me=e).fn[_e],Te=new RegExp("38|40|27"),Ce={HIDE:"hide"+Ee,HIDDEN:"hidden"+Ee,SHOW:"show"+Ee,SHOWN:"shown"+Ee,CLICK:"click"+Ee,CLICK_DATA_API:"click"+Ee+ye,KEYDOWN_DATA_API:"keydown"+Ee+ye,KEYUP_DATA_API:"keyup"+Ee+ye},we="disabled",Ie="show",De="dropup",Ae="dropright",Se="dropleft",Oe="dropdown-menu-right",Ne="position-static",ke='[data-toggle="dropdown"]',Le=".dropdown form",Pe=".dropdown-menu",xe=".navbar-nav",je=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Me="top-start",Re="top-end",He="bottom-start",We="bottom-end",Fe="right-start",Ue="left-start",Be={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},Ke={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},Ve=function(){function l(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=l.prototype;return t.toggle=function(){if(!this._element.disabled&&!me(this._element).hasClass(we)){var t=l._getParentFromElement(this._element),e=me(this._menu).hasClass(Ie);if(l._clearMenus(),!e){var n={relatedTarget:this._element},i=me.Event(Ce.SHOW,n);if(me(t).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===ge)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var r=this._element;"parent"===this._config.reference?r=t:gt.isElement(this._config.reference)&&(r=this._config.reference,void 0!==this._config.reference.jquery&&(r=this._config.reference[0])),"scrollParent"!==this._config.boundary&&me(t).addClass(Ne),this._popper=new ge(r,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===me(t).closest(xe).length&&me(document.body).children().on("mouseover",null,me.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),me(this._menu).toggleClass(Ie),me(t).toggleClass(Ie).trigger(me.Event(Ce.SHOWN,n))}}}},t.dispose=function(){me.removeData(this._element,ve),me(this._element).off(Ee),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;me(this._element).on(Ce.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(t){return t=c({},this.constructor.Default,me(this._element).data(),t),gt.typeCheckConfig(_e,t,this.constructor.DefaultType),t},t._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=me(t).find(Pe)[0]}return this._menu},t._getPlacement=function(){var t=me(this._element).parent(),e=He;return t.hasClass(De)?(e=Me,me(this._menu).hasClass(Oe)&&(e=Re)):t.hasClass(Ae)?e=Fe:t.hasClass(Se)?e=Ue:me(this._menu).hasClass(Oe)&&(e=We),e},t._detectNavbar=function(){return 0<me(this._element).closest(".navbar").length},t._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=c({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},l._jQueryInterface=function(e){return this.each(function(){var t=me(this).data(ve);if(t||(t=new l(this,"object"==typeof e?e:null),me(this).data(ve,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=me.makeArray(me(ke)),n=0;n<e.length;n++){var i=l._getParentFromElement(e[n]),r=me(e[n]).data(ve),o={relatedTarget:e[n]};if(r){var s=r._menu;if(me(i).hasClass(Ie)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&me.contains(i,t.target))){var a=me.Event(Ce.HIDE,o);me(i).trigger(a),a.isDefaultPrevented()||("ontouchstart"in document.documentElement&&me(document.body).children().off("mouseover",null,me.noop),e[n].setAttribute("aria-expanded","false"),me(s).removeClass(Ie),me(i).removeClass(Ie).trigger(me.Event(Ce.HIDDEN,o)))}}}},l._getParentFromElement=function(t){var e,n=gt.getSelectorFromElement(t);return n&&(e=me(n)[0]),e||t.parentNode},l._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||me(t.target).closest(Pe).length)):Te.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!me(this).hasClass(we))){var e=l._getParentFromElement(this),n=me(e).hasClass(Ie);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=me(e).find(je).get();if(0!==i.length){var r=i.indexOf(t.target);38===t.which&&0<r&&r--,40===t.which&&r<i.length-1&&r++,r<0&&(r=0),i[r].focus()}}else{if(27===t.which){var o=me(e).find(ke)[0];me(o).trigger("focus")}me(this).trigger("click")}}},s(l,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return Be}},{key:"DefaultType",get:function(){return Ke}}]),l}(),me(document).on(Ce.KEYDOWN_DATA_API,ke,Ve._dataApiKeydownHandler).on(Ce.KEYDOWN_DATA_API,Pe,Ve._dataApiKeydownHandler).on(Ce.CLICK_DATA_API+" "+Ce.KEYUP_DATA_API,Ve._clearMenus).on(Ce.CLICK_DATA_API,ke,function(t){t.preventDefault(),t.stopPropagation(),Ve._jQueryInterface.call(me(this),"toggle")}).on(Ce.CLICK_DATA_API,Le,function(t){t.stopPropagation()}),me.fn[_e]=Ve._jQueryInterface,me.fn[_e].Constructor=Ve,me.fn[_e].noConflict=function(){return me.fn[_e]=be,Ve._jQueryInterface},Ve),Ci=(Ye="modal",qe="."+(Ge="bs.modal"),ze=(Qe=e).fn[Ye],Xe={backdrop:!0,keyboard:!0,focus:!0,show:!0},Je={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Ze={HIDE:"hide"+qe,HIDDEN:"hidden"+qe,SHOW:"show"+qe,SHOWN:"shown"+qe,FOCUSIN:"focusin"+qe,RESIZE:"resize"+qe,CLICK_DISMISS:"click.dismiss"+qe,KEYDOWN_DISMISS:"keydown.dismiss"+qe,MOUSEUP_DISMISS:"mouseup.dismiss"+qe,MOUSEDOWN_DISMISS:"mousedown.dismiss"+qe,CLICK_DATA_API:"click"+qe+".data-api"},$e="modal-scrollbar-measure",tn="modal-backdrop",en="modal-open",nn="fade",rn="show",on={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},sn=function(){function r(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=Qe(t).find(on.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var t=r.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){Qe(this._element).hasClass(nn)&&(this._isTransitioning=!0);var n=Qe.Event(Ze.SHOW,{relatedTarget:t});Qe(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),Qe(document.body).addClass(en),this._setEscapeEvent(),this._setResizeEvent(),Qe(this._element).on(Ze.CLICK_DISMISS,on.DATA_DISMISS,function(t){return e.hide(t)}),Qe(this._dialog).on(Ze.MOUSEDOWN_DISMISS,function(){Qe(e._element).one(Ze.MOUSEUP_DISMISS,function(t){Qe(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=Qe.Event(Ze.HIDE);if(Qe(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=Qe(this._element).hasClass(nn);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),Qe(document).off(Ze.FOCUSIN),Qe(this._element).removeClass(rn),Qe(this._element).off(Ze.CLICK_DISMISS),Qe(this._dialog).off(Ze.MOUSEDOWN_DISMISS),i){var r=gt.getTransitionDurationFromElement(this._element);Qe(this._element).one(gt.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(r)}else this._hideModal()}}},t.dispose=function(){Qe.removeData(this._element,Ge),Qe(window,document,this._element,this._backdrop).off(qe),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=c({},Xe,t),gt.typeCheckConfig(Ye,t,Je),t},t._showElement=function(t){var e=this,n=Qe(this._element).hasClass(nn);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&gt.reflow(this._element),Qe(this._element).addClass(rn),this._config.focus&&this._enforceFocus();var i=Qe.Event(Ze.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,Qe(e._element).trigger(i)};if(n){var o=gt.getTransitionDurationFromElement(this._element);Qe(this._dialog).one(gt.TRANSITION_END,r).emulateTransitionEnd(o)}else r()},t._enforceFocus=function(){var e=this;Qe(document).off(Ze.FOCUSIN).on(Ze.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===Qe(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?Qe(this._element).on(Ze.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||Qe(this._element).off(Ze.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?Qe(window).on(Ze.RESIZE,function(t){return e.handleUpdate(t)}):Qe(window).off(Ze.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){Qe(document.body).removeClass(en),t._resetAdjustments(),t._resetScrollbar(),Qe(t._element).trigger(Ze.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(Qe(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e=this,n=Qe(this._element).hasClass(nn)?nn:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=tn,n&&Qe(this._backdrop).addClass(n),Qe(this._backdrop).appendTo(document.body),Qe(this._element).on(Ze.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),n&&gt.reflow(this._backdrop),Qe(this._backdrop).addClass(rn),!t)return;if(!n)return void t();var i=gt.getTransitionDurationFromElement(this._backdrop);Qe(this._backdrop).one(gt.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){Qe(this._backdrop).removeClass(rn);var r=function(){e._removeBackdrop(),t&&t()};if(Qe(this._element).hasClass(nn)){var o=gt.getTransitionDurationFromElement(this._backdrop);Qe(this._backdrop).one(gt.TRANSITION_END,r).emulateTransitionEnd(o)}else r()}else t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var r=this;if(this._isBodyOverflowing){Qe(on.FIXED_CONTENT).each(function(t,e){var n=Qe(e)[0].style.paddingRight,i=Qe(e).css("padding-right");Qe(e).data("padding-right",n).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),Qe(on.STICKY_CONTENT).each(function(t,e){var n=Qe(e)[0].style.marginRight,i=Qe(e).css("margin-right");Qe(e).data("margin-right",n).css("margin-right",parseFloat(i)-r._scrollbarWidth+"px")}),Qe(on.NAVBAR_TOGGLER).each(function(t,e){var n=Qe(e)[0].style.marginRight,i=Qe(e).css("margin-right");Qe(e).data("margin-right",n).css("margin-right",parseFloat(i)+r._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=Qe(document.body).css("padding-right");Qe(document.body).data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},t._resetScrollbar=function(){Qe(on.FIXED_CONTENT).each(function(t,e){var n=Qe(e).data("padding-right");void 0!==n&&Qe(e).css("padding-right",n).removeData("padding-right")}),Qe(on.STICKY_CONTENT+", "+on.NAVBAR_TOGGLER).each(function(t,e){var n=Qe(e).data("margin-right");void 0!==n&&Qe(e).css("margin-right",n).removeData("margin-right")});var t=Qe(document.body).data("padding-right");void 0!==t&&Qe(document.body).css("padding-right",t).removeData("padding-right")},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className=$e,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(n,i){return this.each(function(){var t=Qe(this).data(Ge),e=c({},Xe,Qe(this).data(),"object"==typeof n&&n?n:{});if(t||(t=new r(this,e),Qe(this).data(Ge,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},s(r,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return Xe}}]),r}(),Qe(document).on(Ze.CLICK_DATA_API,on.DATA_TOGGLE,function(t){var e,n=this,i=gt.getSelectorFromElement(this);i&&(e=Qe(i)[0]);var r=Qe(e).data(Ge)?"toggle":c({},Qe(e).data(),Qe(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var o=Qe(e).one(Ze.SHOW,function(t){t.isDefaultPrevented()||o.one(Ze.HIDDEN,function(){Qe(n).is(":visible")&&n.focus()})});sn._jQueryInterface.call(Qe(e),r,this)}),Qe.fn[Ye]=sn._jQueryInterface,Qe.fn[Ye].Constructor=sn,Qe.fn[Ye].noConflict=function(){return Qe.fn[Ye]=ze,sn._jQueryInterface},sn),wi=(ln="tooltip",hn="."+(cn="bs.tooltip"),fn=(an=e).fn[ln],un="bs-tooltip",dn=new RegExp("(^|\\s)"+un+"\\S+","g"),mn={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(gn={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(pn={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},vn="out",En={HIDE:"hide"+hn,HIDDEN:"hidden"+hn,SHOW:(_n="show")+hn,SHOWN:"shown"+hn,INSERTED:"inserted"+hn,CLICK:"click"+hn,FOCUSIN:"focusin"+hn,FOCUSOUT:"focusout"+hn,MOUSEENTER:"mouseenter"+hn,MOUSELEAVE:"mouseleave"+hn},yn="fade",bn="show",Tn=".tooltip-inner",Cn=".arrow",wn="hover",In="focus",Dn="click",An="manual",Sn=function(){function i(t,e){if(void 0===ge)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t=i.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=an(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),an(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(an(this.getTipElement()).hasClass(bn))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),an.removeData(this.element,this.constructor.DATA_KEY),an(this.element).off(this.constructor.EVENT_KEY),an(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&an(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===an(this.element).css("display"))throw new Error("Please use show on visible elements");var t=an.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){an(this.element).trigger(t);var n=an.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),r=gt.getUID(this.constructor.NAME);i.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&an(i).addClass(yn);var o="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,s=this._getAttachment(o);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:an(this.config.container);an(i).data(this.constructor.DATA_KEY,this),an.contains(this.element.ownerDocument.documentElement,this.tip)||an(i).appendTo(a),an(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new ge(this.element,i,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:Cn},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),an(i).addClass(bn),"ontouchstart"in document.documentElement&&an(document.body).children().on("mouseover",null,an.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,an(e.element).trigger(e.constructor.Event.SHOWN),t===vn&&e._leave(null,e)};if(an(this.tip).hasClass(yn)){var c=gt.getTransitionDurationFromElement(this.tip);an(this.tip).one(gt.TRANSITION_END,l).emulateTransitionEnd(c)}else l()}},t.hide=function(t){var e=this,n=this.getTipElement(),i=an.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==_n&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),an(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(an(this.element).trigger(i),!i.isDefaultPrevented()){if(an(n).removeClass(bn),"ontouchstart"in document.documentElement&&an(document.body).children().off("mouseover",null,an.noop),this._activeTrigger[Dn]=!1,this._activeTrigger[In]=!1,this._activeTrigger[wn]=!1,an(this.tip).hasClass(yn)){var o=gt.getTransitionDurationFromElement(n);an(n).one(gt.TRANSITION_END,r).emulateTransitionEnd(o)}else r();this._hoverState=""}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(t){an(this.getTipElement()).addClass(un+"-"+t)},t.getTipElement=function(){return this.tip=this.tip||an(this.config.template)[0],this.tip},t.setContent=function(){var t=an(this.getTipElement());this.setElementContent(t.find(Tn),this.getTitle()),t.removeClass(yn+" "+bn)},t.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?an(e).parent().is(t)||t.empty().append(e):t.text(an(e).text()):t[n?"html":"text"](e)},t.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},t._getAttachment=function(t){return gn[t.toUpperCase()]},t._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)an(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==An){var e=t===wn?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===wn?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;an(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}an(i.element).closest(".modal").on("hide.bs.modal",function(){return i.hide()})}),this.config.selector?this.config=c({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||an(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),an(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?In:wn]=!0),an(e.getTipElement()).hasClass(bn)||e._hoverState===_n?e._hoverState=_n:(clearTimeout(e._timeout),e._hoverState=_n,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===_n&&e.show()},e.config.delay.show):e.show())},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||an(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),an(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?In:wn]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=vn,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===vn&&e.hide()},e.config.delay.hide):e.hide())},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},t._getConfig=function(t){return"number"==typeof(t=c({},this.constructor.Default,an(this.element).data(),"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),gt.typeCheckConfig(ln,t,this.constructor.DefaultType),t},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},t._cleanTipClass=function(){var t=an(this.getTipElement()),e=t.attr("class").match(dn);null!==e&&0<e.length&&t.removeClass(e.join(""))},t._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(an(t).removeClass(yn),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},i._jQueryInterface=function(n){return this.each(function(){var t=an(this).data(cn),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),an(this).data(cn,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},s(i,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return mn}},{key:"NAME",get:function(){return ln}},{key:"DATA_KEY",get:function(){return cn}},{key:"Event",get:function(){return En}},{key:"EVENT_KEY",get:function(){return hn}},{key:"DefaultType",get:function(){return pn}}]),i}(),an.fn[ln]=Sn._jQueryInterface,an.fn[ln].Constructor=Sn,an.fn[ln].noConflict=function(){return an.fn[ln]=fn,Sn._jQueryInterface},Sn),Ii=(Nn="popover",Ln="."+(kn="bs.popover"),Pn=(On=e).fn[Nn],xn="bs-popover",jn=new RegExp("(^|\\s)"+xn+"\\S+","g"),Mn=c({},wi.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Rn=c({},wi.DefaultType,{content:"(string|element|function)"}),Hn="fade",Fn=".popover-header",Un=".popover-body",Bn={HIDE:"hide"+Ln,HIDDEN:"hidden"+Ln,SHOW:(Wn="show")+Ln,SHOWN:"shown"+Ln,INSERTED:"inserted"+Ln,CLICK:"click"+Ln,FOCUSIN:"focusin"+Ln,FOCUSOUT:"focusout"+Ln,MOUSEENTER:"mouseenter"+Ln,MOUSELEAVE:"mouseleave"+Ln},Kn=function(t){var e,n;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var r=i.prototype;return r.isWithContent=function(){return this.getTitle()||this._getContent()},r.addAttachmentClass=function(t){On(this.getTipElement()).addClass(xn+"-"+t)},r.getTipElement=function(){return this.tip=this.tip||On(this.config.template)[0],this.tip},r.setContent=function(){var t=On(this.getTipElement());this.setElementContent(t.find(Fn),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(Un),e),t.removeClass(Hn+" "+Wn)},r._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},r._cleanTipClass=function(){var t=On(this.getTipElement()),e=t.attr("class").match(jn);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=On(this).data(kn),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),On(this).data(kn,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},s(i,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return Mn}},{key:"NAME",get:function(){return Nn}},{key:"DATA_KEY",get:function(){return kn}},{key:"Event",get:function(){return Bn}},{key:"EVENT_KEY",get:function(){return Ln}},{key:"DefaultType",get:function(){return Rn}}]),i}(wi),On.fn[Nn]=Kn._jQueryInterface,On.fn[Nn].Constructor=Kn,On.fn[Nn].noConflict=function(){return On.fn[Nn]=Pn,Kn._jQueryInterface},Kn),Di=(Qn="scrollspy",Gn="."+(Yn="bs.scrollspy"),qn=(Vn=e).fn[Qn],zn={offset:10,method:"auto",target:""},Xn={offset:"number",method:"string",target:"(string|element)"},Jn={ACTIVATE:"activate"+Gn,SCROLL:"scroll"+Gn,LOAD_DATA_API:"load"+Gn+".data-api"},Zn="dropdown-item",$n="active",ti={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},ei="offset",ni="position",ii=function(){function n(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+ti.NAV_LINKS+","+this._config.target+" "+ti.LIST_ITEMS+","+this._config.target+" "+ti.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,Vn(this._scrollElement).on(Jn.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?ei:ni,r="auto"===this._config.method?t:this._config.method,o=r===ni?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Vn.makeArray(Vn(this._selector)).map(function(t){var e,n=gt.getSelectorFromElement(t);if(n&&(e=Vn(n)[0]),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[Vn(e)[r]().top+o,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){Vn.removeData(this._element,Yn),Vn(this._scrollElement).off(Gn),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){if("string"!=typeof(t=c({},zn,"object"==typeof t&&t?t:{})).target){var e=Vn(t.target).attr("id");e||(e=gt.getUID(Qn),Vn(t.target).attr("id",e)),t.target="#"+e}return gt.typeCheckConfig(Qn,t,Xn),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var n=Vn(t.join(","));n.hasClass(Zn)?(n.closest(ti.DROPDOWN).find(ti.DROPDOWN_TOGGLE).addClass($n),n.addClass($n)):(n.addClass($n),n.parents(ti.NAV_LIST_GROUP).prev(ti.NAV_LINKS+", "+ti.LIST_ITEMS).addClass($n),n.parents(ti.NAV_LIST_GROUP).prev(ti.NAV_ITEMS).children(ti.NAV_LINKS).addClass($n)),Vn(this._scrollElement).trigger(Jn.ACTIVATE,{relatedTarget:e})},t._clear=function(){Vn(this._selector).filter(ti.ACTIVE).removeClass($n)},n._jQueryInterface=function(e){return this.each(function(){var t=Vn(this).data(Yn);if(t||(t=new n(this,"object"==typeof e&&e),Vn(this).data(Yn,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},s(n,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return zn}}]),n}(),Vn(window).on(Jn.LOAD_DATA_API,function(){for(var t=Vn.makeArray(Vn(ti.DATA_SPY)),e=t.length;e--;){var n=Vn(t[e]);ii._jQueryInterface.call(n,n.data())}}),Vn.fn[Qn]=ii._jQueryInterface,Vn.fn[Qn].Constructor=ii,Vn.fn[Qn].noConflict=function(){return Vn.fn[Qn]=qn,ii._jQueryInterface},ii),Ai=(si="."+(oi="bs.tab"),ai=(ri=e).fn.tab,li={HIDE:"hide"+si,HIDDEN:"hidden"+si,SHOW:"show"+si,SHOWN:"shown"+si,CLICK_DATA_API:"click"+si+".data-api"},ci="dropdown-menu",hi="active",fi="disabled",ui="fade",di="show",pi=".dropdown",gi=".nav, .list-group",mi=".active",_i="> li > .active",vi='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Ei=".dropdown-toggle",yi="> .dropdown-menu .active",bi=function(){function i(t){this._element=t}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&ri(this._element).hasClass(hi)||ri(this._element).hasClass(fi))){var t,i,e=ri(this._element).closest(gi)[0],r=gt.getSelectorFromElement(this._element);if(e){var o="UL"===e.nodeName?_i:mi;i=(i=ri.makeArray(ri(e).find(o)))[i.length-1]}var s=ri.Event(li.HIDE,{relatedTarget:this._element}),a=ri.Event(li.SHOW,{relatedTarget:i});if(i&&ri(i).trigger(s),ri(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){r&&(t=ri(r)[0]),this._activate(this._element,e);var l=function(){var t=ri.Event(li.HIDDEN,{relatedTarget:n._element}),e=ri.Event(li.SHOWN,{relatedTarget:i});ri(i).trigger(t),ri(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){ri.removeData(this._element,oi),this._element=null},t._activate=function(t,e,n){var i=this,r=("UL"===e.nodeName?ri(e).find(_i):ri(e).children(mi))[0],o=n&&r&&ri(r).hasClass(ui),s=function(){return i._transitionComplete(t,r,n)};if(r&&o){var a=gt.getTransitionDurationFromElement(r);ri(r).one(gt.TRANSITION_END,s).emulateTransitionEnd(a)}else s()},t._transitionComplete=function(t,e,n){if(e){ri(e).removeClass(di+" "+hi);var i=ri(e.parentNode).find(yi)[0];i&&ri(i).removeClass(hi),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(ri(t).addClass(hi),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),gt.reflow(t),ri(t).addClass(di),t.parentNode&&ri(t.parentNode).hasClass(ci)){var r=ri(t).closest(pi)[0];r&&ri(r).find(Ei).addClass(hi),t.setAttribute("aria-expanded",!0)}n&&n()},i._jQueryInterface=function(n){return this.each(function(){var t=ri(this),e=t.data(oi);if(e||(e=new i(this),t.data(oi,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},s(i,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),i}(),ri(document).on(li.CLICK_DATA_API,vi,function(t){t.preventDefault(),bi._jQueryInterface.call(ri(this),"show")}),ri.fn.tab=bi._jQueryInterface,ri.fn.tab.Constructor=bi,ri.fn.tab.noConflict=function(){return ri.fn.tab=ai,bi._jQueryInterface},bi);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=gt,t.Alert=mt,t.Button=_t,t.Carousel=vt,t.Collapse=Et,t.Dropdown=Ti,t.Modal=Ci,t.Popover=Ii,t.Scrollspy=Di,t.Tab=Ai,t.Tooltip=wi,Object.defineProperty(t,"__esModule",{value:!0})});
!function(i){i.extend(i.easing,{easeIn:function(n,e,u,t,a){return i.easing.easeInQuad(n,e,u,t,a)},easeOut:function(n,e,u,t,a){return i.easing.easeOutQuad(n,e,u,t,a)},easeInOut:function(n,e,u,t,a){return i.easing.easeInOutQuad(n,e,u,t,a)},expoin:function(n,e,u,t,a){return i.easing.easeInExpo(n,e,u,t,a)},expoout:function(n,e,u,t,a){return i.easing.easeOutExpo(n,e,u,t,a)},expoinout:function(n,e,u,t,a){return i.easing.easeInOutExpo(n,e,u,t,a)},bouncein:function(n,e,u,t,a){return i.easing.easeInBounce(n,e,u,t,a)},bounceout:function(n,e,u,t,a){return i.easing.easeOutBounce(n,e,u,t,a)},bounceinout:function(n,e,u,t,a){return i.easing.easeInOutBounce(n,e,u,t,a)},elasin:function(n,e,u,t,a){return i.easing.easeInElastic(n,e,u,t,a)},elasout:function(n,e,u,t,a){return i.easing.easeOutElastic(n,e,u,t,a)},elasinout:function(n,e,u,t,a){return i.easing.easeInOutElastic(n,e,u,t,a)},backin:function(n,e,u,t,a){return i.easing.easeInBack(n,e,u,t,a)},backout:function(n,e,u,t,a){return i.easing.easeOutBack(n,e,u,t,a)},backinout:function(n,e,u,t,a){return i.easing.easeInOutBack(n,e,u,t,a)}})}(jQuery);
!function(e){"function"==typeof define&&define.amd?define(["jquery"],function(n){return e(n)}):"object"==typeof module&&"object"==typeof module.exports?exports=e(require("jquery")):e(jQuery)}(function(e){e.easing.jswing=e.easing.swing;var t=Math.pow,u=Math.sqrt,r=Math.sin,i=Math.cos,a=Math.PI,c=1.70158,o=1.525*c,s=c+1,f=2*a/3,I=2*a/4.5;function O(n){var e=7.5625,t=2.75;return n<1/t?e*n*n:n<2/t?e*(n-=1.5/t)*n+.75:n<2.5/t?e*(n-=2.25/t)*n+.9375:e*(n-=2.625/t)*n+.984375}e.extend(e.easing,{def:"easeOutQuad",swing:function(n){return e.easing[e.easing.def](n)},easeInQuad:function(n){return n*n},easeOutQuad:function(n){return 1-(1-n)*(1-n)},easeInOutQuad:function(n){return n<.5?2*n*n:1-t(-2*n+2,2)/2},easeInCubic:function(n){return n*n*n},easeOutCubic:function(n){return 1-t(1-n,3)},easeInOutCubic:function(n){return n<.5?4*n*n*n:1-t(-2*n+2,3)/2},easeInQuart:function(n){return n*n*n*n},easeOutQuart:function(n){return 1-t(1-n,4)},easeInOutQuart:function(n){return n<.5?8*n*n*n*n:1-t(-2*n+2,4)/2},easeInQuint:function(n){return n*n*n*n*n},easeOutQuint:function(n){return 1-t(1-n,5)},easeInOutQuint:function(n){return n<.5?16*n*n*n*n*n:1-t(-2*n+2,5)/2},easeInSine:function(n){return 1-i(n*a/2)},easeOutSine:function(n){return r(n*a/2)},easeInOutSine:function(n){return-(i(a*n)-1)/2},easeInExpo:function(n){return 0===n?0:t(2,10*n-10)},easeOutExpo:function(n){return 1===n?1:1-t(2,-10*n)},easeInOutExpo:function(n){return 0===n?0:1===n?1:n<.5?t(2,20*n-10)/2:(2-t(2,-20*n+10))/2},easeInCirc:function(n){return 1-u(1-t(n,2))},easeOutCirc:function(n){return u(1-t(n-1,2))},easeInOutCirc:function(n){return n<.5?(1-u(1-t(2*n,2)))/2:(u(1-t(-2*n+2,2))+1)/2},easeInElastic:function(n){return 0===n?0:1===n?1:-t(2,10*n-10)*r((10*n-10.75)*f)},easeOutElastic:function(n){return 0===n?0:1===n?1:t(2,-10*n)*r((10*n-.75)*f)+1},easeInOutElastic:function(n){return 0===n?0:1===n?1:n<.5?-t(2,20*n-10)*r((20*n-11.125)*I)/2:t(2,-20*n+10)*r((20*n-11.125)*I)/2+1},easeInBack:function(n){return s*n*n*n-c*n*n},easeOutBack:function(n){return 1+s*t(n-1,3)+c*t(n-1,2)},easeInOutBack:function(n){return n<.5?t(2*n,2)*(2*(o+1)*n-o)/2:(t(2*n-2,2)*((o+1)*(2*n-2)+o)+2)/2},easeInBounce:function(n){return 1-O(1-n)},easeOutBounce:O,easeInOutBounce:function(n){return n<.5?(1-O(1-2*n))/2:(1+O(2*n-1))/2}})});
!function(e,l){var m,s,t=e.html5||{},r=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,c=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,n="_html5shiv",a=0,o={};function h(){var e=f.elements;return"string"==typeof e?e.split(" "):e}function u(e){var t=o[e[n]];return t||(t={},a++,e[n]=a,o[a]=t),t}function d(e,t,n){return t||(t=l),s?t.createElement(e):(n||(n=u(t)),!(a=n.cache[e]?n.cache[e].cloneNode():c.test(e)?(n.cache[e]=n.createElem(e)).cloneNode():n.createElem(e)).canHaveChildren||r.test(e)||a.tagUrn?a:n.frag.appendChild(a));var a}function i(e){e||(e=l);var t,n,a,r,c,o,i=u(e);return!f.shivCSS||m||i.hasCSS||(i.hasCSS=(n="article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}",a=(t=e).createElement("p"),r=t.getElementsByTagName("head")[0]||t.documentElement,a.innerHTML="x<style>"+n+"</style>",!!r.insertBefore(a.lastChild,r.firstChild))),s||(c=e,(o=i).cache||(o.cache={},o.createElem=c.createElement,o.createFrag=c.createDocumentFragment,o.frag=o.createFrag()),c.createElement=function(e){return f.shivMethods?d(e,c,o):o.createElem(e)},c.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+h().join().replace(/[\w\-:]+/g,function(e){return o.createElem(e),o.frag.createElement(e),'c("'+e+'")'})+");return n}")(f,o.frag)),e}!function(){try{var e=l.createElement("a");e.innerHTML="<xyz></xyz>",m="hidden"in e,s=1==e.childNodes.length||function(){l.createElement("a");var e=l.createDocumentFragment();return void 0===e.cloneNode||void 0===e.createDocumentFragment||void 0===e.createElement}()}catch(e){s=m=!0}}();var f={elements:t.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:"3.7.0",shivCSS:!1!==t.shivCSS,supportsUnknownElements:s,shivMethods:!1!==t.shivMethods,type:"default",shivDocument:i,createElement:d,createDocumentFragment:function(e,t){if(e||(e=l),s)return e.createDocumentFragment();for(var n=(t=t||u(e)).frag.cloneNode(),a=0,r=h(),c=r.length;a<c;a++)n.createElement(r[a]);return n}};e.html5=f,i(l)}(this,document);
!function(i){i.ns||(i.ns={}),i.ns.cprogress=function(t,e){var o=this;o.$el=i(t),o.el=t,o.$el.data("ns.cprogress",o),o.options=i.extend({},i.ns.cprogress.defaultOptions,e),o.methods={init:function(){o.img1=new Image,o.img1.src=o.options.img1,o.img2=new Image,o.img2.src=o.options.img2,o.width=o.img1.width,o.height=o.img1.height,o.$progress=i("<div />").addClass("jCProgress"),mt=parseInt(o.$progress.css("marginTop").replace("ems","")),ml=parseInt(o.$progress.css("marginLeft").replace("ems","")),o.$progress.css("marginLeft",(o.$el.width()-o.width)/2+ml).css("marginTop",(o.$el.height()-o.height)/2+mt).css("opacity","0.0"),o.$percent=i("<div />").addClass("percent"),o.$ctx=i("<canvas />"),o.$ctx.attr("width",o.width),o.$ctx.attr("height",o.height),o.$el.prepend(o.$progress),o.$progress.append(o.$percent),o.$progress.append(o.$ctx),o.$progress.animate({opacity:1},500,function(){}),o.ctx=o.$ctx[0].getContext("2d"),o.ctx.fillStyle="rgba(0,0,0,0.0)",o.options.percent=o.options.percent%100,o.i=o.options.percent*(2*Math.PI)/100,o.j=0,o.stop=0,o.options.onInit(),o.methods.draw()},reloadImages:function(){o.img1=new Image,o.img1.src=o.options.img1,o.img2=new Image,o.img2.src=o.options.img2,o.width=o.img1.width,o.height=o.img1.height,o.$progress.css("marginLeft",(o.$el.width()-o.width)/2+ml).css("marginTop",(o.$el.height()-o.height)/2+mt),o.$ctx.attr("width",o.width),o.$ctx.attr("height",o.height),o.ctx=o.$ctx[0].getContext("2d"),o.ctx.fillStyle="rgba(0,0,0,0.0)"},coreDraw:function(){o.ctx.clearRect(0,0,o.width,o.height),o.ctx.save(),o.ctx.drawImage(o.img1,0,0),o.ctx.beginPath(),o.ctx.lineWidth=5,o.ctx.arc(o.width/2,o.height/2,o.height/2,o.i-Math.PI/2,o.j-Math.PI/2,!0),o.ctx.lineTo(o.width/2,o.height/2),o.ctx.closePath(),o.ctx.fill(),o.ctx.clip(),o.ctx.drawImage(o.img2,0,0),o.ctx.restore()},draw:function(){o&&(0!=o.width&&0!=o.height||o.methods.reloadImages(),0==o.options.showPercent?o.$percent.hide():o.$percent.show(),1!=o.stop&&o.options.percent-1<=o.options.limit&&(1==o.options.loop&&(o.options.limit=121),100<=o.options.percent&&o.options.percent<=o.options.limit&&(o.i=0,o.options.limit=o.options.limit-100),o.methods.coreDraw(),o.i=o.i+o.options.PIStep,o.options.percent=100*o.i/(2*Math.PI),o.options.percent<=o.options.limit?(setTimeout(o.methods.draw,o.options.speed),o.$percent.html(o.options.percent.toFixed(0)),o.options.onProgress(o.options.percent.toFixed(0))):(o.$percent.html(o.options.limit),o.methods.coreDraw(),o.options.onProgress(o.options.limit),o.options.onComplete(o.options.limit)),o.options.percent++))},destroy:function(){o.$progress.animate({opacity:0},500,function(){o.$progress.remove(),o.stop=1,o=null})}},o.public_methods={start:function(){o.stop=0,o.methods.draw()},stop:function(){o.stop=1},reset:function(){o.options.percent=0,o.i=0,o.methods.draw()},destroy:function(){o.methods.destroy()},options:function(t){return o.options=i.extend({},o.options,t),(t.img1||t.img2||t.img3)&&(o.methods.reloadImages(),o.methods.coreDraw()),o.methods.draw(),o.options}},o.methods.init()},i.ns.cprogress.defaultOptions={percent:0,img1:"v1.png",img2:"v2.png",speed:50,limit:48,loop:!1,showPercent:!0,PIStep:.05,onInit:function(){},onProgress:function(t){},onComplete:function(){}},i.fn.cprogress=function(t){return new i.ns.cprogress(this,t).public_methods}}(jQuery);
!function(c){c.fn.jflickrfeed=function(p,i){var e=(p=c.extend(!0,{flickrbase:"http://api.flickr.com/services/feeds/",feedapi:"photos_public.gne",limit:20,qstrings:{lang:"en-us",format:"json",jsoncallback:"?"},cleanDescription:!0,useTemplate:!0,itemTemplate:"",itemCallback:function(){}},p)).flickrbase+p.feedapi+"?",a=!0;for(var t in p.qstrings)a||(e+="&"),e+=t+"="+p.qstrings[t],a=!1;return c(this).each(function(){var r=c(this),l=this;c.getJSON(e,function(e){c.each(e.items,function(e,i){if(e<p.limit){if(p.cleanDescription){var a=/<p>(.*?)<\/p>/g,t=i.description;a.test(t)&&(i.description=t.match(a)[2],null!=i.description&&(i.description=i.description.replace("<p>","").replace("</p>","")))}if(i.image_s=i.media.m.replace("_m","_s"),i.image_t=i.media.m.replace("_m","_t"),i.image_m=i.media.m.replace("_m","_m"),i.image=i.media.m.replace("_m",""),i.image_b=i.media.m.replace("_m","_b"),delete i.media,p.useTemplate){var c=p.itemTemplate;for(var n in i){var m=new RegExp("{{"+n+"}}","g");c=c.replace(m,i[n])}r.append(c)}p.itemCallback.call(l,i)}}),c.isFunction(i)&&i.call(l,e)})})}}(jQuery);
!function(p){p.fn.appear=function(r,e){var d=p.extend({data:void 0,one:!0,accX:0,accY:0},e);return this.each(function(){var l=p(this);if(l.appeared=!1,r){var h=p(window),a=function(){if(l.is(":visible")){var e=h.scrollLeft(),a=h.scrollTop(),r=l.offset(),p=r.left,n=r.top,t=d.accX,c=d.accY,i=l.height(),o=h.height(),f=l.width(),s=h.width();a<=n+i+c&&n<=a+o+c&&e<=p+f+t&&p<=e+s+t?l.appeared||l.trigger("appear",d.data):l.appeared=!1}else l.appeared=!1},e=function(){if(l.appeared=!0,d.one){h.unbind("scroll",a);var e=p.inArray(a,p.fn.appear.checks);0<=e&&p.fn.appear.checks.splice(e,1)}r.apply(this,arguments)};d.one?l.one("appear",d.data,e):l.bind("appear",d.data,e),h.scroll(a),p.fn.appear.checks.push(a),a()}else l.trigger("appear",d.data)})},p.extend(p.fn.appear,{checks:[],timeout:null,checkAll:function(){var e=p.fn.appear.checks.length;if(0<e)for(;e--;)p.fn.appear.checks[e]()},run:function(){p.fn.appear.timeout&&clearTimeout(p.fn.appear.timeout),p.fn.appear.timeout=setTimeout(p.fn.appear.checkAll,20)}}),p.each(["append","prepend","after","before","attr","removeAttr","addClass","removeClass","toggleClass","remove","css","show","hide"],function(e,a){var r=p.fn[a];r&&(p.fn[a]=function(){var e=r.apply(this,arguments);return p.fn.appear.run(),e})})}(jQuery);
jQuery.easing.jswing=jQuery.easing.swing,jQuery.extend(jQuery.easing,{def:"easeOutQuad",swing:function(n,e,t,u,a){return jQuery.easing[jQuery.easing.def](n,e,t,u,a)},easeInQuad:function(n,e,t,u,a){return u*(e/=a)*e+t},easeOutQuad:function(n,e,t,u,a){return-u*(e/=a)*(e-2)+t},easeInOutQuad:function(n,e,t,u,a){return(e/=a/2)<1?u/2*e*e+t:-u/2*(--e*(e-2)-1)+t},easeInCubic:function(n,e,t,u,a){return u*(e/=a)*e*e+t},easeOutCubic:function(n,e,t,u,a){return u*((e=e/a-1)*e*e+1)+t},easeInOutCubic:function(n,e,t,u,a){return(e/=a/2)<1?u/2*e*e*e+t:u/2*((e-=2)*e*e+2)+t},easeInQuart:function(n,e,t,u,a){return u*(e/=a)*e*e*e+t},easeOutQuart:function(n,e,t,u,a){return-u*((e=e/a-1)*e*e*e-1)+t},easeInOutQuart:function(n,e,t,u,a){return(e/=a/2)<1?u/2*e*e*e*e+t:-u/2*((e-=2)*e*e*e-2)+t},easeInQuint:function(n,e,t,u,a){return u*(e/=a)*e*e*e*e+t},easeOutQuint:function(n,e,t,u,a){return u*((e=e/a-1)*e*e*e*e+1)+t},easeInOutQuint:function(n,e,t,u,a){return(e/=a/2)<1?u/2*e*e*e*e*e+t:u/2*((e-=2)*e*e*e*e+2)+t},easeInSine:function(n,e,t,u,a){return-u*Math.cos(e/a*(Math.PI/2))+u+t},easeOutSine:function(n,e,t,u,a){return u*Math.sin(e/a*(Math.PI/2))+t},easeInOutSine:function(n,e,t,u,a){return-u/2*(Math.cos(Math.PI*e/a)-1)+t},easeInExpo:function(n,e,t,u,a){return 0==e?t:u*Math.pow(2,10*(e/a-1))+t},easeOutExpo:function(n,e,t,u,a){return e==a?t+u:u*(1-Math.pow(2,-10*e/a))+t},easeInOutExpo:function(n,e,t,u,a){return 0==e?t:e==a?t+u:(e/=a/2)<1?u/2*Math.pow(2,10*(e-1))+t:u/2*(2-Math.pow(2,-10*--e))+t},easeInCirc:function(n,e,t,u,a){return-u*(Math.sqrt(1-(e/=a)*e)-1)+t},easeOutCirc:function(n,e,t,u,a){return u*Math.sqrt(1-(e=e/a-1)*e)+t},easeInOutCirc:function(n,e,t,u,a){return(e/=a/2)<1?-u/2*(Math.sqrt(1-e*e)-1)+t:u/2*(Math.sqrt(1-(e-=2)*e)+1)+t},easeInElastic:function(n,e,t,u,a){var r=1.70158,i=0,s=u;if(0==e)return t;if(1==(e/=a))return t+u;if(i||(i=.3*a),s<Math.abs(u)){s=u;r=i/4}else r=i/(2*Math.PI)*Math.asin(u/s);return-s*Math.pow(2,10*(e-=1))*Math.sin((e*a-r)*(2*Math.PI)/i)+t},easeOutElastic:function(n,e,t,u,a){var r=1.70158,i=0,s=u;if(0==e)return t;if(1==(e/=a))return t+u;if(i||(i=.3*a),s<Math.abs(u)){s=u;r=i/4}else r=i/(2*Math.PI)*Math.asin(u/s);return s*Math.pow(2,-10*e)*Math.sin((e*a-r)*(2*Math.PI)/i)+u+t},easeInOutElastic:function(n,e,t,u,a){var r=1.70158,i=0,s=u;if(0==e)return t;if(2==(e/=a/2))return t+u;if(i||(i=a*(.3*1.5)),s<Math.abs(u)){s=u;r=i/4}else r=i/(2*Math.PI)*Math.asin(u/s);return e<1?s*Math.pow(2,10*(e-=1))*Math.sin((e*a-r)*(2*Math.PI)/i)*-.5+t:s*Math.pow(2,-10*(e-=1))*Math.sin((e*a-r)*(2*Math.PI)/i)*.5+u+t},easeInBack:function(n,e,t,u,a,r){return null==r&&(r=1.70158),u*(e/=a)*e*((r+1)*e-r)+t},easeOutBack:function(n,e,t,u,a,r){return null==r&&(r=1.70158),u*((e=e/a-1)*e*((r+1)*e+r)+1)+t},easeInOutBack:function(n,e,t,u,a,r){return null==r&&(r=1.70158),(e/=a/2)<1?u/2*(e*e*((1+(r*=1.525))*e-r))+t:u/2*((e-=2)*e*((1+(r*=1.525))*e+r)+2)+t},easeInBounce:function(n,e,t,u,a){return u-jQuery.easing.easeOutBounce(n,a-e,0,u,a)+t},easeOutBounce:function(n,e,t,u,a){return(e/=a)<1/2.75?u*(7.5625*e*e)+t:e<2/2.75?u*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?u*(7.5625*(e-=2.25/2.75)*e+.9375)+t:u*(7.5625*(e-=2.625/2.75)*e+.984375)+t},easeInOutBounce:function(n,e,t,u,a){return e<a/2?.5*jQuery.easing.easeInBounce(n,2*e,0,u,a)+t:.5*jQuery.easing.easeOutBounce(n,2*e-a,0,u,a)+.5*u+t}});
!function(d){d(window).scroll(function(){var e,t,i=(e=window.innerHeight,!(t=document.compatMode)&&d.support.boxModel||(e="CSS1Compat"==t?document.documentElement.clientHeight:document.body.clientHeight),e),c=document.documentElement.scrollTop?document.documentElement.scrollTop:document.body.scrollTop,n=[];d.each(d.cache,function(){this.events&&this.events.inview&&n.push(this.handle.elem)}),n.length&&d(n).each(function(){var e=d(this),t=e.offset().top,n=e.height(),o=e.data("inview")||!1;t+n<c||c+i<t?o&&(e.data("inview",!1),e.trigger("inview",[!1])):c<t+n&&(o||(e.data("inview",!0),e.trigger("inview",[!0])))})}),d(function(){d(window).scroll()})}(jQuery);
!function(m){var e,g=!1,f=!1,w=5e3,c=2e3,v=0,b=0<(e=(e=document.getElementsByTagName("script"))[e.length-1].src.split("?")[0]).split("/").length?e.split("/").slice(0,-1).join("/")+"/":"";Array.prototype.forEach||(Array.prototype.forEach=function(e,o){for(var t=0,r=this.length;t<r;++t)e.call(o,this[t],t,this)});var d=window.requestAnimationFrame||!1,u=window.cancelAnimationFrame||!1;["ms","moz","webkit","o"].forEach(function(e){d||(d=window[e+"RequestAnimationFrame"]),u||(u=window[e+"CancelAnimationFrame"]||window[e+"CancelRequestAnimationFrame"])});var y=window.MutationObserver||window.WebKitMutationObserver||!1,x={zindex:"auto",cursoropacitymin:1,cursoropacitymax:1,cursorcolor:"#424242",cursorwidth:"12px",cursorborder:"1px solid tranparent",cursorborderradius:"0px",scrollspeed:60,mousescrollstep:24,touchbehavior:!1,hwacceleration:!0,usetransition:!0,boxzoom:!1,dblclickzoom:!0,gesturezoom:!0,grabcursorenabled:!0,autohidemode:!0,background:"",iframeautoresize:!0,cursorminheight:60,preservenativescrolling:!0,railoffset:!1,bouncescroll:!0,spacebarenabled:!0,railpadding:{top:1,right:1,left:0,bottom:0},disableoutline:!0,horizrailenabled:!0,railalign:"right",railvalign:"bottom",enabletranslate3d:!0,enablemousewheel:!0,enablekeyboard:!0,smoothscroll:!0,sensitiverail:!0,enablemouselockapi:!0,cursorfixedheight:!1,directionlockdeadzone:6,hidecursordelay:400,nativeparentscrolling:!0,enablescrollonselection:!0,overflowx:!0,overflowy:!0,cursordragspeed:.3,rtlmode:!1,cursordragontouch:!1},S=!1,i=function(e,o){function n(e,o,t){return o=e.css(o),e=parseFloat(o),isNaN(e)?(t=3==(e=l[o]||0)?t?h.win.outerHeight()-h.win.innerHeight():h.win.outerWidth()-h.win.innerWidth():1,h.isie8&&e&&(e+=1),t?e:0):e}function s(t,r,i,e){h._bind(t,r,function(e){var o={original:e=e||window.event,target:e.target||e.srcElement,type:"wheel",deltaMode:"MozMousePixelScroll"==e.type?0:1,deltaX:0,deltaZ:0,preventDefault:function(){return e.preventDefault?e.preventDefault():e.returnValue=!1,!1},stopImmediatePropagation:function(){e.stopImmediatePropagation?e.stopImmediatePropagation():e.cancelBubble=!0}};return"mousewheel"==r?(o.deltaY=-.025*e.wheelDelta,e.wheelDeltaX&&(o.deltaX=-.025*e.wheelDeltaX)):o.deltaY=e.detail,i.call(t,o)},e)}function r(e,o,t){var r,i;if(0==e.deltaMode?(r=-Math.floor(e.deltaX*(h.opt.mousescrollstep/54)),i=-Math.floor(e.deltaY*(h.opt.mousescrollstep/54))):1==e.deltaMode&&(r=-Math.floor(e.deltaX*h.opt.mousescrollstep),i=-Math.floor(e.deltaY*h.opt.mousescrollstep)),o&&0==r&&i&&(r=i,i=0),r&&(h.scrollmom&&h.scrollmom.stop(),h.lastdeltax+=r,h.debounced("mousewheelx",function(){var e=h.lastdeltax;h.lastdeltax=0,h.rail.drag||h.doScrollLeftBy(e)},120)),i){if(h.opt.nativeparentscrolling&&t&&!h.ispage&&!h.zoomactive)if(i<0){if(h.getScrollTop()>=h.page.maxh)return!0}else if(h.getScrollTop()<=0)return!0;h.scrollmom&&h.scrollmom.stop(),h.lastdeltay+=i,h.debounced("mousewheely",function(){var e=h.lastdeltay;h.lastdeltay=0,h.rail.drag||h.doScrollBy(e)},120)}return e.stopImmediatePropagation(),e.preventDefault()}var h=this;if(this.version="3.4.0",this.name="nicescroll",this.me=o,this.opt={doc:m("body"),win:!1},m.extend(this.opt,x),this.opt.snapbackspeed=80,e)for(var t in h.opt)void 0!==e[t]&&(h.opt[t]=e[t]);for(this.iddoc=(this.doc=h.opt.doc)&&this.doc[0]&&this.doc[0].id||"",this.ispage=/BODY|HTML/.test(h.opt.win?h.opt.win[0].nodeName:this.doc[0].nodeName),this.haswrapper=!1!==h.opt.win,this.win=h.opt.win||(this.ispage?m(window):this.doc),this.docscroll=this.ispage&&!this.haswrapper?m(window):this.win,this.body=m("body"),this.iframe=this.isfixed=this.viewport=!1,this.isiframe="IFRAME"==this.doc[0].nodeName&&"IFRAME"==this.win[0].nodeName,this.istextarea="TEXTAREA"==this.win[0].nodeName,this.forcescreen=!1,this.canshowonmouseevent="scroll"!=h.opt.autohidemode,this.page=this.view=this.onzoomout=this.onzoomin=this.onscrollcancel=this.onscrollend=this.onscrollstart=this.onclick=this.ongesturezoom=this.onkeypress=this.onmousewheel=this.onmousemove=this.onmouseup=this.onmousedown=!1,this.scroll={x:0,y:0},this.scrollratio={x:0,y:0},this.cursorheight=20,this.scrollvaluemax=0,this.observerremover=this.observer=this.scrollmom=this.scrollrunning=this.checkrtlmode=!1;this.id="ascrail"+c++,document.getElementById(this.id););this.hasmousefocus=this.hasfocus=this.zoomactive=this.zoom=this.selectiondrag=this.cursorfreezed=this.cursor=this.rail=!1,this.visibility=!0,this.hidden=this.locked=!1,this.cursoractive=!0,this.overflowx=h.opt.overflowx,this.overflowy=h.opt.overflowy,this.nativescrollingarea=!1,this.checkarea=0,this.events=[],this.saved={},this.delaylist={},this.synclist={},this.lastdeltay=this.lastdeltax=0,this.detected=function(){if(S)return S;var e=document.createElement("DIV"),o={haspointerlock:"pointerLockElement"in document||"mozPointerLockElement"in document||"webkitPointerLockElement"in document};o.isopera="opera"in window,o.isopera12=o.isopera&&"getUserMedia"in navigator,o.isie="all"in document&&"attachEvent"in e&&!o.isopera,o.isieold=o.isie&&!("msInterpolationMode"in e.style),o.isie7=o.isie&&!o.isieold&&(!("documentMode"in document)||7==document.documentMode),o.isie8=o.isie&&"documentMode"in document&&8==document.documentMode,o.isie9=o.isie&&"performance"in window&&9<=document.documentMode,o.isie10=o.isie&&"performance"in window&&10<=document.documentMode,o.isie9mobile=/iemobile.9/i.test(navigator.userAgent),o.isie9mobile&&(o.isie9=!1),o.isie7mobile=!o.isie9mobile&&o.isie7&&/iemobile/i.test(navigator.userAgent),o.ismozilla="MozAppearance"in e.style,o.iswebkit="WebkitAppearance"in e.style,o.ischrome="chrome"in window,o.ischrome22=o.ischrome&&o.haspointerlock,o.ischrome26=o.ischrome&&"transition"in e.style,o.cantouch="ontouchstart"in document.documentElement||"ontouchstart"in window,o.hasmstouch=window.navigator.msPointerEnabled||!1,o.ismac=/^mac$/i.test(navigator.platform),o.isios=o.cantouch&&/iphone|ipad|ipod/i.test(navigator.platform),o.isios4=o.isios&&!("seal"in Object),o.isandroid=/android/i.test(navigator.userAgent),o.trstyle=!1,o.hastransform=!1,o.hastranslate3d=!1,o.transitionstyle=!1,o.hastransition=!1,o.transitionend=!1;for(var t=["transform","msTransform","webkitTransform","MozTransform","OTransform"],r=0;r<t.length;r++)if(void 0!==e.style[t[r]]){o.trstyle=t[r];break}o.hastransform=0!=o.trstyle,o.hastransform&&(e.style[o.trstyle]="translate3d(1px,2px,3px)",o.hastranslate3d=/translate3d/.test(e.style[o.trstyle])),o.transitionstyle=!1,o.prefixstyle="",o.transitionend=!1;t="transition webkitTransition MozTransition OTransition OTransition msTransition KhtmlTransition".split(" ");var i=" -webkit- -moz- -o- -o -ms- -khtml-".split(" "),n="transitionend webkitTransitionEnd transitionend otransitionend oTransitionEnd msTransitionEnd KhtmlTransitionEnd".split(" ");for(r=0;r<t.length;r++)if(t[r]in e.style){o.transitionstyle=t[r],o.prefixstyle=i[r],o.transitionend=n[r];break}o.ischrome26&&(o.prefixstyle=i[1]),o.hastransition=o.transitionstyle;e:{for(t=["-moz-grab","-webkit-grab","grab"],(o.ischrome&&!o.ischrome22||o.isie)&&(t=[]),r=0;r<t.length;r++)if(i=t[r],e.style.cursor=i,e.style.cursor==i){t=i;break e}t="url(http://www.google.com/intl/en_ALL/mapfiles/openhand.cur),n-resize"}return o.cursorgrabvalue=t,o.hasmousecapture="setCapture"in e,o.hasMutationObserver=!1!==y,S=o}();var p=m.extend({},this.detected);if(this.ishwscroll=(this.canhwscroll=p.hastransform&&h.opt.hwacceleration)&&h.haswrapper,this.istouchcapable=!1,p.cantouch&&p.ischrome&&!p.isios&&!p.isandroid&&(this.istouchcapable=!0,p.cantouch=!1),p.cantouch&&p.ismozilla&&!p.isios&&(this.istouchcapable=!0,p.cantouch=!1),h.opt.enablemouselockapi||(p.hasmousecapture=!1,p.haspointerlock=!1),this.delayed=function(e,o,t,r){var i=h.delaylist[e],n=(new Date).getTime();if(!r&&i&&i.tt)return!1;i&&i.tt&&clearTimeout(i.tt),i&&i.last+t>n&&!i.tt?h.delaylist[e]={last:n+t,tt:setTimeout(function(){h.delaylist[e].tt=0,o.call()},t)}:i&&i.tt||(h.delaylist[e]={last:n,tt:0},setTimeout(function(){o.call()},0))},this.debounced=function(o,e,t){var r=h.delaylist[o];(new Date).getTime(),h.delaylist[o]=e,r||setTimeout(function(){var e=h.delaylist[o];h.delaylist[o]=!1,e.call()},t)},this.synched=function(o,e){return h.synclist[o]=e,h.onsync||(d(function(){for(o in h.onsync=!1,h.synclist){var e=h.synclist[o];e&&e.call(h),h.synclist[o]=!1}}),h.onsync=!0),o},this.unsynched=function(e){h.synclist[e]&&(h.synclist[e]=!1)},this.css=function(e,o){for(var t in o)h.saved.css.push([e,t,e.css(t)]),e.css(t,o[t])},this.scrollTop=function(e){return void 0===e?h.getScrollTop():h.setScrollTop(e)},this.scrollLeft=function(e){return void 0===e?h.getScrollLeft():h.setScrollLeft(e)},BezierClass=function(e,o,t,r,i,n,s){this.st=e,this.ed=o,this.spd=t,this.p1=r||0,this.p2=i||1,this.p3=n||0,this.p4=s||1,this.ts=(new Date).getTime(),this.df=this.ed-this.st},BezierClass.prototype={B2:function(e){return 3*e*e*(1-e)},B3:function(e){return 3*e*(1-e)*(1-e)},B4:function(e){return(1-e)*(1-e)*(1-e)},getNow:function(){var e=1-((new Date).getTime()-this.ts)/this.spd,o=this.B2(e)+this.B3(e)+this.B4(e);return e<0?this.ed:this.st+Math.round(this.df*o)},update:function(e,o){return this.st=this.getNow(),this.ed=e,this.spd=o,this.ts=(new Date).getTime(),this.df=this.ed-this.st,this}},this.ishwscroll){this.doc.translate={x:0,y:0,tx:"0px",ty:"0px"},p.hastranslate3d&&p.isios&&this.doc.css("-webkit-backface-visibility","hidden");var i=function(){var e=h.doc.css(p.trstyle);return!(!e||"matrix"!=e.substr(0,6))&&e.replace(/^.*\((.*)\)$/g,"$1").replace(/px/g,"").split(/, +/)};this.getScrollTop=function(e){if(!e){if(e=i())return 16==e.length?-e[13]:-e[5];if(h.timerscroll&&h.timerscroll.bz)return h.timerscroll.bz.getNow()}return h.doc.translate.y},this.getScrollLeft=function(e){if(!e){if(e=i())return 16==e.length?-e[12]:-e[4];if(h.timerscroll&&h.timerscroll.bh)return h.timerscroll.bh.getNow()}return h.doc.translate.x},this.notifyScrollEvent=document.createEvent?function(e){var o=document.createEvent("UIEvents");o.initUIEvent("scroll",!1,!0,window,1),e.dispatchEvent(o)}:document.fireEvent?function(e){var o=document.createEventObject();e.fireEvent("onscroll"),o.cancelBubble=!0}:function(e,o){},p.hastranslate3d&&h.opt.enabletranslate3d?(this.setScrollTop=function(e,o){h.doc.translate.y=e,h.doc.translate.ty=-1*e+"px",h.doc.css(p.trstyle,"translate3d("+h.doc.translate.tx+","+h.doc.translate.ty+",0px)"),o||h.notifyScrollEvent(h.win[0])},this.setScrollLeft=function(e,o){h.doc.translate.x=e,h.doc.translate.tx=-1*e+"px",h.doc.css(p.trstyle,"translate3d("+h.doc.translate.tx+","+h.doc.translate.ty+",0px)"),o||h.notifyScrollEvent(h.win[0])}):(this.setScrollTop=function(e,o){h.doc.translate.y=e,h.doc.translate.ty=-1*e+"px",h.doc.css(p.trstyle,"translate("+h.doc.translate.tx+","+h.doc.translate.ty+")"),o||h.notifyScrollEvent(h.win[0])},this.setScrollLeft=function(e,o){h.doc.translate.x=e,h.doc.translate.tx=-1*e+"px",h.doc.css(p.trstyle,"translate("+h.doc.translate.tx+","+h.doc.translate.ty+")"),o||h.notifyScrollEvent(h.win[0])})}else this.getScrollTop=function(){return h.docscroll.scrollTop()},this.setScrollTop=function(e){return h.docscroll.scrollTop(e)},this.getScrollLeft=function(){return h.docscroll.scrollLeft()},this.setScrollLeft=function(e){return h.docscroll.scrollLeft(e)};this.getTarget=function(e){return!!e&&(e.target?e.target:!!e.srcElement&&e.srcElement)},this.hasParent=function(e,o){if(!e)return!1;for(var t=e.target||e.srcElement||e||!1;t&&t.id!=o;)t=t.parentNode||!1;return!1!==t};var l={thin:1,medium:3,thick:5};this.getOffset=function(){if(h.isfixed)return{top:parseFloat(h.win.css("top")),left:parseFloat(h.win.css("left"))};if(!h.viewport)return h.win.offset();var e=h.win.offset(),o=h.viewport.offset();return{top:e.top-o.top+h.viewport.scrollTop(),left:e.left-o.left+h.viewport.scrollLeft()}},this.updateScrollBar=function(e){if(h.ishwscroll)h.rail.css({height:h.win.innerHeight()}),h.railh&&h.railh.css({width:h.win.innerWidth()});else{var o=h.getOffset(),t=o.top,r=o.left;t=t+n(h.win,"border-top-width",!0);h.win.outerWidth(),h.win.innerWidth();r=r+(h.rail.align?h.win.outerWidth()-n(h.win,"border-right-width")-h.rail.width:n(h.win,"border-left-width"));var i=h.opt.railoffset;i&&(i.top&&(t+=i.top),h.rail.align&&i.left&&(r+=i.left)),h.locked||h.rail.css({top:t,left:r,height:e?e.h:h.win.innerHeight()}),h.zoom&&h.zoom.css({top:t+1,left:1==h.rail.align?r-20:r+h.rail.width+4}),h.railh&&!h.locked&&(t=o.top,r=o.left,e=h.railh.align?t+n(h.win,"border-top-width",!0)+h.win.innerHeight()-h.railh.height:t+n(h.win,"border-top-width",!0),r+=n(h.win,"border-left-width"),h.railh.css({top:e,left:r,width:h.railh.width}))}},this.doRailClick=function(e,o,t){var r;h.locked||(h.cancelEvent(e),o?(o=t?h.doScrollLeft:h.doScrollTop)(r=t?(e.pageX-h.railh.offset().left-h.cursorwidth/2)*h.scrollratio.x:(e.pageY-h.rail.offset().top-h.cursorheight/2)*h.scrollratio.y):(o=t?h.doScrollLeftBy:h.doScrollBy,r=t?h.scroll.x:h.scroll.y,e=t?e.pageX-h.railh.offset().left:e.pageY-h.rail.offset().top,t=t?h.view.w:h.view.h,o(e<=r?t:-t)))},h.hasanimationframe=d,h.hascancelanimationframe=u,h.hasanimationframe?h.hascancelanimationframe||(u=function(){h.cancelAnimationFrame=!0}):(d=function(e){return setTimeout(e,15-Math.floor(+new Date/1e3)%16)},u=clearInterval),this.init=function(){if(h.saved.css=[],p.isie7mobile)return!0;if(p.hasmstouch&&h.css(h.ispage?m("html"):h.win,{"-ms-touch-action":"none"}),h.zindex="auto",h.zindex=h.ispage||"auto"!=h.opt.zindex?h.opt.zindex:function(){var e=h.win;if("zIndex"in e)return e.zIndex();for(;0<e.length&&9!=e[0].nodeType;){var o=e.css("zIndex");if(!isNaN(o)&&0!=o)return parseInt(o);e=e.parent()}return!1}()||"auto",!h.ispage&&"auto"!=h.zindex&&h.zindex>v&&(v=h.zindex),h.isie&&0==h.zindex&&"auto"==h.opt.zindex&&(h.zindex="auto"),!h.ispage||!p.cantouch&&!p.isieold&&!p.isie9mobile){var e=h.docscroll;h.ispage&&(e=h.haswrapper?h.win:h.doc),p.isie9mobile||h.css(e,{"overflow-y":"hidden"}),h.ispage&&p.isie7&&("BODY"==h.doc[0].nodeName?h.css(m("html"),{"overflow-y":"hidden"}):"HTML"==h.doc[0].nodeName&&h.css(m("body"),{"overflow-y":"hidden"})),p.isios&&!h.ispage&&!h.haswrapper&&h.css(m("body"),{"-webkit-overflow-scrolling":"touch"});var o=m(document.createElement("div"));o.css({position:"relative",top:0,float:"right",width:h.opt.cursorwidth,height:"0px","background-color":h.opt.cursorcolor,border:h.opt.cursorborder,"background-clip":"padding-box","-webkit-border-radius":h.opt.cursorborderradius,"-moz-border-radius":h.opt.cursorborderradius,"border-radius":h.opt.cursorborderradius}),o.hborder=parseFloat(o.outerHeight()-o.innerHeight()),h.cursor=o,(c=m(document.createElement("div"))).attr("id",h.id),c.addClass("nicescroll-rails");var t,r,i,n=["left","right"];for(i in n)r=n[i],(t=h.opt.railpadding[r])?c.css("padding-"+r,t+"px"):h.opt.railpadding[r]=0;if(c.append(o),c.width=Math.max(parseFloat(h.opt.cursorwidth),o.outerWidth())+h.opt.railpadding.left+h.opt.railpadding.right,c.css({width:c.width+"px",zIndex:h.zindex,background:h.opt.background,cursor:"default"}),c.visibility=!0,c.scrollable=!0,c.align="left"==h.opt.railalign?0:1,h.rail=c,o=h.rail.drag=!1,h.opt.boxzoom&&!h.ispage&&!p.isieold&&(o=document.createElement("div"),h.bind(o,"click",h.doZoom),h.zoom=m(o),h.zoom.css({cursor:"pointer","z-index":h.zindex,backgroundImage:"url("+b+"zoomico.png)",height:18,width:18,backgroundPosition:"0px 0px"}),h.opt.dblclickzoom&&h.bind(h.win,"dblclick",h.doZoom),p.cantouch&&h.opt.gesturezoom&&(h.ongesturezoom=function(e){return 1.5<e.scale&&h.doZoomIn(e),e.scale<.8&&h.doZoomOut(e),h.cancelEvent(e)},h.bind(h.win,"gestureend",h.ongesturezoom))),h.railh=!1,h.opt.horizrailenabled){h.css(e,{"overflow-x":"hidden"}),(o=m(document.createElement("div"))).css({position:"relative",top:0,height:h.opt.cursorwidth,width:"0px","background-color":h.opt.cursorcolor,border:h.opt.cursorborder,"background-clip":"padding-box","-webkit-border-radius":h.opt.cursorborderradius,"-moz-border-radius":h.opt.cursorborderradius,"border-radius":h.opt.cursorborderradius}),o.wborder=parseFloat(o.outerWidth()-o.innerWidth()),h.cursorh=o;var s=m(document.createElement("div"));s.attr("id",h.id+"-hr"),s.addClass("nicescroll-rails"),s.height=Math.max(parseFloat(h.opt.cursorwidth),o.outerHeight()),s.css({height:s.height+"px",zIndex:h.zindex,background:h.opt.background}),s.append(o),s.visibility=!0,s.scrollable=!0,s.align="top"==h.opt.railvalign?0:1,h.railh=s,h.railh.drag=!1}if(h.ispage?(c.css({position:"fixed",top:"0px",height:"100%"}),c.align?c.css({right:"0px"}):c.css({left:"0px"}),h.body.append(c),h.railh&&(s.css({position:"fixed",left:"0px",width:"100%"}),s.align?s.css({bottom:"0px"}):s.css({top:"0px"}),h.body.append(s))):(h.ishwscroll?("static"==h.win.css("position")&&h.css(h.win,{position:"relative"}),e="HTML"==h.win[0].nodeName?h.body:h.win,h.zoom&&(h.zoom.css({position:"absolute",top:1,right:0,"margin-right":c.width+4}),e.append(h.zoom)),c.css({position:"absolute",top:0}),c.align?c.css({right:0}):c.css({left:0}),e.append(c),s&&(s.css({position:"absolute",left:0,bottom:0}),s.align?s.css({bottom:0}):s.css({top:0}),e.append(s))):(h.isfixed="fixed"==h.win.css("position"),e=h.isfixed?"fixed":"absolute",h.isfixed||(h.viewport=h.getViewport(h.win[0])),h.viewport&&(h.body=h.viewport,0==/relative|absolute/.test(h.viewport.css("position"))&&h.css(h.viewport,{position:"relative"})),c.css({position:e}),h.zoom&&h.zoom.css({position:e}),h.updateScrollBar(),h.body.append(c),h.zoom&&h.body.append(h.zoom),h.railh&&(s.css({position:e}),h.body.append(s))),p.isios&&h.css(h.win,{"-webkit-tap-highlight-color":"rgba(0,0,0,0)","-webkit-touch-callout":"none"}),p.isie&&h.opt.disableoutline&&h.win.attr("hideFocus","true"),p.iswebkit&&h.opt.disableoutline&&h.win.css({outline:"none"})),!1===h.opt.autohidemode?(h.autohidedom=!1,h.rail.css({opacity:h.opt.cursoropacitymax}),h.railh&&h.railh.css({opacity:h.opt.cursoropacitymax})):!0===h.opt.autohidemode?(h.autohidedom=m().add(h.rail),p.isie8&&(h.autohidedom=h.autohidedom.add(h.cursor)),h.railh&&(h.autohidedom=h.autohidedom.add(h.railh)),h.railh&&p.isie8&&(h.autohidedom=h.autohidedom.add(h.cursorh))):"scroll"==h.opt.autohidemode?(h.autohidedom=m().add(h.rail),h.railh&&(h.autohidedom=h.autohidedom.add(h.railh))):"cursor"==h.opt.autohidemode?(h.autohidedom=m().add(h.cursor),h.railh&&(h.autohidedom=h.autohidedom.add(h.cursorh))):"hidden"==h.opt.autohidemode&&(h.autohidedom=!1,h.hide(),h.locked=!1),p.isie9mobile)h.scrollmom=new z(h),h.onmangotouch=function(e){e=h.getScrollTop();var o=h.getScrollLeft();if(e==h.scrollmom.lastscrolly&&o==h.scrollmom.lastscrollx)return!0;var t=e-h.mangotouch.sy,r=o-h.mangotouch.sx;if(0!=Math.round(Math.sqrt(Math.pow(r,2)+Math.pow(t,2)))){var i=t<0?-1:1,n=r<0?-1:1,s=+new Date;h.mangotouch.lazy&&clearTimeout(h.mangotouch.lazy),80<s-h.mangotouch.tm||h.mangotouch.dry!=i||h.mangotouch.drx!=n?(h.scrollmom.stop(),h.scrollmom.reset(o,e),h.mangotouch.sy=e,h.mangotouch.ly=e,h.mangotouch.sx=o,h.mangotouch.lx=o,h.mangotouch.dry=i,h.mangotouch.drx=n,h.mangotouch.tm=s):(h.scrollmom.stop(),h.scrollmom.update(h.mangotouch.sx-r,h.mangotouch.sy-t),h.mangotouch.tm=s,t=Math.max(Math.abs(h.mangotouch.ly-e),Math.abs(h.mangotouch.lx-o)),h.mangotouch.ly=e,h.mangotouch.lx=o,2<t&&(h.mangotouch.lazy=setTimeout(function(){h.mangotouch.lazy=!1,h.mangotouch.dry=0,h.mangotouch.drx=0,h.mangotouch.tm=0,h.scrollmom.doMomentum(30)},100)))}},c=h.getScrollTop(),s=h.getScrollLeft(),h.mangotouch={sy:c,ly:c,dry:0,sx:s,lx:s,drx:0,lazy:!1,tm:0},h.bind(h.docscroll,"scroll",h.onmangotouch);else{if(p.cantouch||h.istouchcapable||h.opt.touchbehavior||p.hasmstouch){h.scrollmom=new z(h),h.ontouchstart=function(e){if(e.pointerType&&2!=e.pointerType)return!1;if(!h.locked){if(p.hasmstouch)for(var o=!!e.target&&e.target;o;){if(0<(t=m(o).getNiceScroll()).length&&t[0].me==h.me)break;if(0<t.length)return!1;if("DIV"==o.nodeName&&o.id==h.id)break;o=!!o.parentNode&&o.parentNode}if(h.cancelScroll(),(o=h.getTarget(e))&&/INPUT/i.test(o.nodeName)&&/range/i.test(o.type))return h.stopPropagation(e);if(!("clientX"in e)&&"changedTouches"in e&&(e.clientX=e.changedTouches[0].clientX,e.clientY=e.changedTouches[0].clientY),h.forcescreen&&((e={original:(t=e).original?e.original:e}).clientX=t.screenX,e.clientY=t.screenY),h.rail.drag={x:e.clientX,y:e.clientY,sx:h.scroll.x,sy:h.scroll.y,st:h.getScrollTop(),sl:h.getScrollLeft(),pt:2,dl:!1},h.ispage||!h.opt.directionlockdeadzone)h.rail.drag.dl="f";else{var t=m(window).width(),r=m(window).height(),i=Math.max(document.body.scrollWidth,document.documentElement.scrollWidth),n=Math.max(document.body.scrollHeight,document.documentElement.scrollHeight);r=Math.max(0,n-r),t=Math.max(0,i-t);h.rail.drag.ck=!h.rail.scrollable&&h.railh.scrollable?0<r&&"v":!(!h.rail.scrollable||h.railh.scrollable)&&(0<t&&"h"),h.rail.drag.ck||(h.rail.drag.dl="f")}if(h.opt.touchbehavior&&h.isiframe&&p.isie&&(t=h.win.position(),h.rail.drag.x+=t.left,h.rail.drag.y+=t.top),h.hasmoving=!1,h.lastmouseup=!1,h.scrollmom.reset(e.clientX,e.clientY),!p.cantouch&&!this.istouchcapable&&!p.hasmstouch){if(!o||!/INPUT|SELECT|TEXTAREA/i.test(o.nodeName))return!h.ispage&&p.hasmousecapture&&o.setCapture(),h.cancelEvent(e);/SUBMIT|CANCEL|BUTTON/i.test(m(o).attr("type"))&&(pc={tg:o,click:!1},h.preventclick=pc)}}},h.ontouchend=function(e){return(!e.pointerType||2==e.pointerType)&&(h.rail.drag&&2==h.rail.drag.pt&&(h.scrollmom.doMomentum(),h.rail.drag=!1,h.hasmoving&&(h.hasmoving=!1,h.lastmouseup=!0,h.hideCursor(),p.hasmousecapture&&document.releaseCapture(),!p.cantouch))?h.cancelEvent(e):void 0)};var d=h.opt.touchbehavior&&h.isiframe&&!p.hasmousecapture;h.ontouchmove=function(e,o){if(e.pointerType&&2!=e.pointerType)return!1;if(h.rail.drag&&2==h.rail.drag.pt){if(p.cantouch&&void 0===e.original)return!0;if(h.hasmoving=!0,h.preventclick&&!h.preventclick.click&&(h.preventclick.click=h.preventclick.tg.onclick||!1,h.preventclick.tg.onclick=h.onpreventclick),"changedTouches"in(e=m.extend({original:e},e))&&(e.clientX=e.changedTouches[0].clientX,e.clientY=e.changedTouches[0].clientY),h.forcescreen){var t=e;(e={original:e.original?e.original:e}).clientX=t.screenX,e.clientY=t.screenY}if(t=ofy=0,d&&!o){t=-(i=h.win.position()).left;ofy=-i.top}var r=e.clientY+ofy,i=r-h.rail.drag.y,n=e.clientX+t,s=n-h.rail.drag.x,l=h.rail.drag.st-i;if(h.ishwscroll&&h.opt.bouncescroll?l<0?l=Math.round(l/2):l>h.page.maxh&&(l=h.page.maxh+Math.round((l-h.page.maxh)/2)):(l<0&&(r=l=0),l>h.page.maxh&&(l=h.page.maxh,r=0)),h.railh&&h.railh.scrollable){var a=h.rail.drag.sl-s;h.ishwscroll&&h.opt.bouncescroll?a<0?a=Math.round(a/2):a>h.page.maxw&&(a=h.page.maxw+Math.round((a-h.page.maxw)/2)):(a<0&&(n=a=0),a>h.page.maxw&&(a=h.page.maxw,n=0))}if(t=!1,h.rail.drag.dl)t=!0,"v"==h.rail.drag.dl?a=h.rail.drag.sl:"h"==h.rail.drag.dl&&(l=h.rail.drag.st);else{i=Math.abs(i),s=Math.abs(s);var c=h.opt.directionlockdeadzone;if("v"==h.rail.drag.ck){if(c<i&&s<=.3*i)return!(h.rail.drag=!1);c<s&&(h.rail.drag.dl="f",m("body").scrollTop(m("body").scrollTop()))}else if("h"==h.rail.drag.ck){if(c<s&&i<=.3*az)return!(h.rail.drag=!1);c<i&&(h.rail.drag.dl="f",m("body").scrollLeft(m("body").scrollLeft()))}}if(h.synched("touchmove",function(){h.rail.drag&&2==h.rail.drag.pt&&(h.prepareTransition&&h.prepareTransition(0),h.rail.scrollable&&h.setScrollTop(l),h.scrollmom.update(n,r),h.railh&&h.railh.scrollable?(h.setScrollLeft(a),h.showCursor(l,a)):h.showCursor(l),p.isie10&&document.selection.clear())}),p.ischrome&&h.istouchcapable&&(t=!1),t)return h.cancelEvent(e)}}}if(h.onmousedown=function(e,o){if(!h.rail.drag||1==h.rail.drag.pt){if(h.locked)return h.cancelEvent(e);h.cancelScroll(),h.rail.drag={x:e.clientX,y:e.clientY,sx:h.scroll.x,sy:h.scroll.y,pt:1,hr:!!o};var t=h.getTarget(e);return!h.ispage&&p.hasmousecapture&&t.setCapture(),h.isiframe&&!p.hasmousecapture&&(h.saved.csspointerevents=h.doc.css("pointer-events"),h.css(h.doc,{"pointer-events":"none"})),h.cancelEvent(e)}},h.onmouseup=function(e){if(h.rail.drag&&(p.hasmousecapture&&document.releaseCapture(),h.isiframe&&!p.hasmousecapture&&h.doc.css("pointer-events",h.saved.csspointerevents),1==h.rail.drag.pt))return h.rail.drag=!1,h.cancelEvent(e)},h.onmousemove=function(e){if(h.rail.drag&&1==h.rail.drag.pt){if(p.ischrome&&0==e.which)return h.onmouseup(e);if(h.cursorfreezed=!0,h.rail.drag.hr){h.scroll.x=h.rail.drag.sx+(e.clientX-h.rail.drag.x),h.scroll.x<0&&(h.scroll.x=0);var o=h.scrollvaluemaxw;h.scroll.x>o&&(h.scroll.x=o)}else h.scroll.y=h.rail.drag.sy+(e.clientY-h.rail.drag.y),h.scroll.y<0&&(h.scroll.y=0),o=h.scrollvaluemax,h.scroll.y>o&&(h.scroll.y=o);return h.synched("mousemove",function(){h.rail.drag&&1==h.rail.drag.pt&&(h.showCursor(),h.rail.drag.hr?h.doScrollLeft(Math.round(h.scroll.x*h.scrollratio.x),h.opt.cursordragspeed):h.doScrollTop(Math.round(h.scroll.y*h.scrollratio.y),h.opt.cursordragspeed))}),h.cancelEvent(e)}},p.cantouch||h.opt.touchbehavior)h.onpreventclick=function(e){if(h.preventclick)return h.preventclick.tg.onclick=h.preventclick.click,h.preventclick=!1,h.cancelEvent(e)},h.bind(h.win,"mousedown",h.ontouchstart),h.onclick=!p.isios&&function(e){return!h.lastmouseup||(h.lastmouseup=!1,h.cancelEvent(e))},h.opt.grabcursorenabled&&p.cursorgrabvalue&&(h.css(h.ispage?h.doc:h.win,{cursor:p.cursorgrabvalue}),h.css(h.rail,{cursor:p.cursorgrabvalue}));else{var l=function(e){if(h.selectiondrag){if(e){var o=h.win.outerHeight();0<(e=e.pageY-h.selectiondrag.top)&&e<o&&(e=0),o<=e&&(e-=o),h.selectiondrag.df=e}0!=h.selectiondrag.df&&(h.doScrollBy(2*-Math.floor(h.selectiondrag.df/6)),h.debounced("doselectionscroll",function(){l()},50))}};h.hasTextSelected="getSelection"in document?function(){return 0<document.getSelection().rangeCount}:"selection"in document?function(){return"None"!=document.selection.type}:function(){return!1},h.onselectionstart=function(e){h.ispage||(h.selectiondrag=h.win.offset())},h.onselectionend=function(e){h.selectiondrag=!1},h.onselectiondrag=function(e){h.selectiondrag&&h.hasTextSelected()&&h.debounced("selectionscroll",function(){l(e)},250)}}p.hasmstouch&&(h.css(h.rail,{"-ms-touch-action":"none"}),h.css(h.cursor,{"-ms-touch-action":"none"}),h.bind(h.win,"MSPointerDown",h.ontouchstart),h.bind(document,"MSPointerUp",h.ontouchend),h.bind(document,"MSPointerMove",h.ontouchmove),h.bind(h.cursor,"MSGestureHold",function(e){e.preventDefault()}),h.bind(h.cursor,"contextmenu",function(e){e.preventDefault()})),this.istouchcapable&&(h.bind(h.win,"touchstart",h.ontouchstart),h.bind(document,"touchend",h.ontouchend),h.bind(document,"touchcancel",h.ontouchend),h.bind(document,"touchmove",h.ontouchmove)),h.bind(h.cursor,"mousedown",h.onmousedown),h.bind(h.cursor,"mouseup",h.onmouseup),h.railh&&(h.bind(h.cursorh,"mousedown",function(e){h.onmousedown(e,!0)}),h.bind(h.cursorh,"mouseup",function(e){if(!h.rail.drag||2!=h.rail.drag.pt)return h.rail.drag=!1,h.hasmoving=!1,h.hideCursor(),p.hasmousecapture&&document.releaseCapture(),h.cancelEvent(e)})),(h.opt.cursordragontouch||!p.cantouch&&!h.opt.touchbehavior)&&(h.rail.css({cursor:"default"}),h.railh&&h.railh.css({cursor:"default"}),h.jqbind(h.rail,"mouseenter",function(){h.canshowonmouseevent&&h.showCursor(),h.rail.active=!0}),h.jqbind(h.rail,"mouseleave",function(){h.rail.active=!1,h.rail.drag||h.hideCursor()}),h.opt.sensitiverail&&(h.bind(h.rail,"click",function(e){h.doRailClick(e,!1,!1)}),h.bind(h.rail,"dblclick",function(e){h.doRailClick(e,!0,!1)}),h.bind(h.cursor,"click",function(e){h.cancelEvent(e)}),h.bind(h.cursor,"dblclick",function(e){h.cancelEvent(e)})),h.railh&&(h.jqbind(h.railh,"mouseenter",function(){h.canshowonmouseevent&&h.showCursor(),h.rail.active=!0}),h.jqbind(h.railh,"mouseleave",function(){h.rail.active=!1,h.rail.drag||h.hideCursor()}),h.opt.sensitiverail&&(h.bind(h.railh,"click",function(e){h.doRailClick(e,!1,!0)}),h.bind(h.railh,"dblclick",function(e){h.doRailClick(e,!0,!0)}),h.bind(h.cursorh,"click",function(e){h.cancelEvent(e)}),h.bind(h.cursorh,"dblclick",function(e){h.cancelEvent(e)})))),p.cantouch||h.opt.touchbehavior?(h.bind(p.hasmousecapture?h.win:document,"mouseup",h.ontouchend),h.bind(document,"mousemove",h.ontouchmove),h.onclick&&h.bind(document,"click",h.onclick),h.opt.cursordragontouch&&(h.bind(h.cursor,"mousedown",h.onmousedown),h.bind(h.cursor,"mousemove",h.onmousemove),h.cursorh&&h.bind(h.cursorh,"mousedown",h.onmousedown),h.cursorh&&h.bind(h.cursorh,"mousemove",h.onmousemove))):(h.bind(p.hasmousecapture?h.win:document,"mouseup",h.onmouseup),h.bind(document,"mousemove",h.onmousemove),h.onclick&&h.bind(document,"click",h.onclick),!h.ispage&&h.opt.enablescrollonselection&&(h.bind(h.win[0],"mousedown",h.onselectionstart),h.bind(document,"mouseup",h.onselectionend),h.bind(h.cursor,"mouseup",h.onselectionend),h.cursorh&&h.bind(h.cursorh,"mouseup",h.onselectionend),h.bind(document,"mousemove",h.onselectiondrag)),h.zoom&&(h.jqbind(h.zoom,"mouseenter",function(){h.canshowonmouseevent&&h.showCursor(),h.rail.active=!0}),h.jqbind(h.zoom,"mouseleave",function(){h.rail.active=!1,h.rail.drag||h.hideCursor()}))),h.opt.enablemousewheel&&(h.isiframe||h.bind(p.isie&&h.ispage?document:h.docscroll,"mousewheel",h.onmousewheel),h.bind(h.rail,"mousewheel",h.onmousewheel),h.railh&&h.bind(h.railh,"mousewheel",h.onmousewheelhr)),!h.ispage&&!p.cantouch&&!/HTML|BODY/.test(h.win[0].nodeName)&&(h.win.attr("tabindex")||h.win.attr({tabindex:w++}),h.jqbind(h.win,"focus",function(e){g=h.getTarget(e).id||!0,h.hasfocus=!0,h.canshowonmouseevent&&h.noticeCursor()}),h.jqbind(h.win,"blur",function(e){g=!1,h.hasfocus=!1}),h.jqbind(h.win,"mouseenter",function(e){f=h.getTarget(e).id||!0,h.hasmousefocus=!0,h.canshowonmouseevent&&h.noticeCursor()}),h.jqbind(h.win,"mouseleave",function(){f=!1,h.hasmousefocus=!1}))}if(h.onkeypress=function(e){if(h.locked&&0==h.page.maxh)return!0;e=e||window.e;var o=h.getTarget(e);if(o&&/INPUT|TEXTAREA|SELECT|OPTION/.test(o.nodeName)&&(!o.getAttribute("type")&&!o.type||!/submit|button|cancel/i.tp))return!0;if(h.hasfocus||h.hasmousefocus&&!g||h.ispage&&!g&&!f){if(o=e.keyCode,h.locked&&27!=o)return h.cancelEvent(e);var t=e.ctrlKey||!1,r=e.shiftKey||!1,i=!1;switch(o){case 38:case 63233:h.doScrollBy(72),i=!0;break;case 40:case 63235:h.doScrollBy(-72),i=!0;break;case 37:case 63232:h.railh&&(t?h.doScrollLeft(0):h.doScrollLeftBy(72),i=!0);break;case 39:case 63234:h.railh&&(t?h.doScrollLeft(h.page.maxw):h.doScrollLeftBy(-72),i=!0);break;case 33:case 63276:h.doScrollBy(h.view.h),i=!0;break;case 34:case 63277:h.doScrollBy(-h.view.h),i=!0;break;case 36:case 63273:h.railh&&t?h.doScrollPos(0,0):h.doScrollTo(0),i=!0;break;case 35:case 63275:h.railh&&t?h.doScrollPos(h.page.maxw,h.page.maxh):h.doScrollTo(h.page.maxh),i=!0;break;case 32:h.opt.spacebarenabled&&(r?h.doScrollBy(h.view.h):h.doScrollBy(-h.view.h),i=!0);break;case 27:h.zoomactive&&(h.doZoom(),i=!0)}if(i)return h.cancelEvent(e)}},h.opt.enablekeyboard&&h.bind(document,p.isopera&&!p.isopera12?"keypress":"keydown",h.onkeypress),h.bind(window,"resize",h.lazyResize),h.bind(window,"orientationchange",h.lazyResize),h.bind(window,"load",h.lazyResize),p.ischrome&&!h.ispage&&!h.haswrapper){var a=h.win.attr("style"),c=parseFloat(h.win.css("width"))+1;h.win.css("width",c),h.synched("chromefix",function(){h.win.attr("style",a)})}h.onAttributeChange=function(e){h.lazyResize(250)},!h.ispage&&!h.haswrapper&&(!1!==y?(h.observer=new y(function(e){e.forEach(h.onAttributeChange)}),h.observer.observe(h.win[0],{childList:!0,characterData:!1,attributes:!0,subtree:!1}),h.observerremover=new y(function(e){e.forEach(function(e){if(0<e.removedNodes.length)for(var o in e.removedNodes)if(e.removedNodes[o]==h.win[0])return h.remove()})}),h.observerremover.observe(h.win[0].parentNode,{childList:!0,characterData:!1,attributes:!1,subtree:!1})):(h.bind(h.win,p.isie&&!p.isie9?"propertychange":"DOMAttrModified",h.onAttributeChange),p.isie9&&h.win[0].attachEvent("onpropertychange",h.onAttributeChange),h.bind(h.win,"DOMNodeRemoved",function(e){e.target==h.win[0]&&h.remove()}))),!h.ispage&&h.opt.boxzoom&&h.bind(window,"resize",h.resizeZoom),h.istextarea&&h.bind(h.win,"mouseup",h.lazyResize),h.checkrtlmode=!0,h.lazyResize(30)}if("IFRAME"==this.doc[0].nodeName){var u=function(e){h.iframexd=!1;try{var o="contentDocument"in this?this.contentDocument:this.contentWindow.document}catch(e){o=!(h.iframexd=!0)}if(h.iframexd)return"console"in window&&console.log("NiceScroll error: policy restriced iframe"),!0;h.forcescreen=!0,h.isiframe&&(h.iframe={doc:m(o),html:h.doc.contents().find("html")[0],body:h.doc.contents().find("body")[0]},h.getContentSize=function(){return{w:Math.max(h.iframe.html.scrollWidth,h.iframe.body.scrollWidth),h:Math.max(h.iframe.html.scrollHeight,h.iframe.body.scrollHeight)}},h.docscroll=m(h.iframe.body)),!p.isios&&h.opt.iframeautoresize&&!h.isiframe&&(h.win.scrollTop(0),h.doc.height(""),e=Math.max(o.getElementsByTagName("html")[0].scrollHeight,o.body.scrollHeight),h.doc.height(e)),h.lazyResize(30),p.isie7&&h.css(m(h.iframe.html),{"overflow-y":"hidden"}),h.css(m(h.iframe.body),{"overflow-y":"hidden"}),"contentWindow"in this?h.bind(this.contentWindow,"scroll",h.onscroll):h.bind(o,"scroll",h.onscroll),h.opt.enablemousewheel&&h.bind(o,"mousewheel",h.onmousewheel),h.opt.enablekeyboard&&h.bind(o,p.isopera?"keypress":"keydown",h.onkeypress),(p.cantouch||h.opt.touchbehavior)&&(h.bind(o,"mousedown",h.onmousedown),h.bind(o,"mousemove",function(e){h.onmousemove(e,!0)}),h.opt.grabcursorenabled&&p.cursorgrabvalue&&h.css(m(o.body),{cursor:p.cursorgrabvalue})),h.bind(o,"mouseup",h.onmouseup),h.zoom&&(h.opt.dblclickzoom&&h.bind(o,"dblclick",h.doZoom),h.ongesturezoom&&h.bind(o,"gestureend",h.ongesturezoom))};this.doc[0].readyState&&"complete"==this.doc[0].readyState&&setTimeout(function(){u.call(h.doc[0],!1)},500),h.bind(this.doc,"load",u)}},this.showCursor=function(e,o){h.cursortimeout&&(clearTimeout(h.cursortimeout),h.cursortimeout=0),h.rail&&(h.autohidedom&&(h.autohidedom.stop().css({opacity:h.opt.cursoropacitymax}),h.cursoractive=!0),h.rail.drag&&1==h.rail.drag.pt||(void 0!==e&&!1!==e&&(h.scroll.y=Math.round(1*e/h.scrollratio.y)),void 0!==o&&(h.scroll.x=Math.round(1*o/h.scrollratio.x))),h.cursor.css({height:h.cursorheight,top:h.scroll.y}),h.cursorh&&(!h.rail.align&&h.rail.visibility?h.cursorh.css({width:h.cursorwidth,left:h.scroll.x+h.rail.width}):h.cursorh.css({width:h.cursorwidth,left:h.scroll.x}),h.cursoractive=!0),h.zoom&&h.zoom.stop().css({opacity:h.opt.cursoropacitymax}))},this.hideCursor=function(e){!h.cursortimeout&&h.rail&&h.autohidedom&&(h.cursortimeout=setTimeout(function(){h.rail.active&&h.showonmouseevent||(h.autohidedom.stop().animate({opacity:h.opt.cursoropacitymin}),h.zoom&&h.zoom.stop().animate({opacity:h.opt.cursoropacitymin}),h.cursoractive=!1),h.cursortimeout=0},e||h.opt.hidecursordelay))},this.noticeCursor=function(e,o,t){h.showCursor(o,t),h.rail.active||h.hideCursor(e)},this.getContentSize=h.ispage?function(){return{w:Math.max(document.body.scrollWidth,document.documentElement.scrollWidth),h:Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}}:h.haswrapper?function(){return{w:h.doc.outerWidth()+parseInt(h.win.css("paddingLeft"))+parseInt(h.win.css("paddingRight")),h:h.doc.outerHeight()+parseInt(h.win.css("paddingTop"))+parseInt(h.win.css("paddingBottom"))}}:function(){return{w:h.docscroll[0].scrollWidth,h:h.docscroll[0].scrollHeight}},this.onResize=function(e,o){if(!h.win)return!1;if(!h.haswrapper&&!h.ispage){if("none"==h.win.css("display"))return h.visibility&&h.hideRail().hideRailHr(),!1;!h.hidden&&!h.visibility&&h.showRail().showRailHr()}var t=h.page.maxh,r=h.page.maxw,i=h.view.w;if(h.view={w:h.ispage?h.win.width():parseInt(h.win[0].clientWidth),h:h.ispage?h.win.height():parseInt(h.win[0].clientHeight)},h.page=o||h.getContentSize(),h.page.maxh=Math.max(0,h.page.h-h.view.h),h.page.maxw=Math.max(0,h.page.w-h.view.w),h.page.maxh==t&&h.page.maxw==r&&h.view.w==i){if(h.ispage)return h;if(t=h.win.offset(),h.lastposition&&((r=h.lastposition).top==t.top&&r.left==t.left))return h;h.lastposition=t}return 0==h.page.maxh?(h.hideRail(),h.scrollvaluemax=0,h.scroll.y=0,h.scrollratio.y=0,h.cursorheight=0,h.setScrollTop(0),h.rail.scrollable=!1):h.rail.scrollable=!0,0==h.page.maxw?(h.hideRailHr(),h.scrollvaluemaxw=0,h.scroll.x=0,h.scrollratio.x=0,h.cursorwidth=0,h.setScrollLeft(0),h.railh.scrollable=!1):h.railh.scrollable=!0,h.locked=0==h.page.maxh&&0==h.page.maxw,h.locked?(h.ispage||h.updateScrollBar(h.view),!1):(h.hidden||h.visibility?!h.hidden&&!h.railh.visibility&&h.showRailHr():h.showRail().showRailHr(),h.istextarea&&h.win.css("resize")&&"none"!=h.win.css("resize")&&(h.view.h-=20),h.cursorheight=Math.min(h.view.h,Math.round(h.view.h*(h.view.h/h.page.h))),h.cursorheight=h.opt.cursorfixedheight?h.opt.cursorfixedheight:Math.max(h.opt.cursorminheight,h.cursorheight),h.cursorwidth=Math.min(h.view.w,Math.round(h.view.w*(h.view.w/h.page.w))),h.cursorwidth=h.opt.cursorfixedheight?h.opt.cursorfixedheight:Math.max(h.opt.cursorminheight,h.cursorwidth),h.scrollvaluemax=h.view.h-h.cursorheight-h.cursor.hborder,h.railh&&(h.railh.width=0<h.page.maxh?h.view.w-h.rail.width:h.view.w,h.scrollvaluemaxw=h.railh.width-h.cursorwidth-h.cursorh.wborder),h.checkrtlmode&&h.railh&&(h.checkrtlmode=!1,h.opt.rtlmode&&0==h.scroll.x&&h.setScrollLeft(h.page.maxw)),h.ispage||h.updateScrollBar(h.view),h.scrollratio={x:h.page.maxw/h.scrollvaluemaxw,y:h.page.maxh/h.scrollvaluemax},h.getScrollTop()>h.page.maxh?h.doScrollTop(h.page.maxh):(h.scroll.y=Math.round(h.getScrollTop()*(1/h.scrollratio.y)),h.scroll.x=Math.round(h.getScrollLeft()*(1/h.scrollratio.x)),h.cursoractive&&h.noticeCursor()),h.scroll.y&&0==h.getScrollTop()&&h.doScrollTo(Math.floor(h.scroll.y*h.scrollratio.y)),h)},this.resize=h.onResize,this.lazyResize=function(e){return e=isNaN(e)?30:e,h.delayed("resize",h.resize,e),h},this._bind=function(e,o,t,r){h.events.push({e:e,n:o,f:t,b:r,q:!1}),e.addEventListener?e.addEventListener(o,t,r||!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},this.jqbind=function(e,o,t){h.events.push({e:e,n:o,f:t,q:!0}),m(e).bind(o,t)},this.bind=function(e,o,t,r){var i="jquery"in e?e[0]:e;"mousewheel"==o?"onwheel"in h.win?h._bind(i,"wheel",t,r||!1):(e=void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll",s(i,e,t,r||!1),"DOMMouseScroll"==e&&s(i,"MozMousePixelScroll",t,r||!1)):i.addEventListener?(p.cantouch&&/mouseup|mousedown|mousemove/.test(o)&&h._bind(i,"mousedown"==o?"touchstart":"mouseup"==o?"touchend":"touchmove",function(e){if(e.touches){if(e.touches.length<2){var o=e.touches.length?e.touches[0]:e;o.original=e,t.call(this,o)}}else e.changedTouches&&((o=e.changedTouches[0]).original=e,t.call(this,o))},r||!1),h._bind(i,o,t,r||!1),p.cantouch&&"mouseup"==o&&h._bind(i,"touchcancel",t,r||!1)):h._bind(i,o,function(e){return(e=e||window.event||!1)&&e.srcElement&&(e.target=e.srcElement),"pageY"in e||(e.pageX=e.clientX+document.documentElement.scrollLeft,e.pageY=e.clientY+document.documentElement.scrollTop),!1!==t.call(i,e)&&!1!==r||h.cancelEvent(e)})},this._unbind=function(e,o,t,r){e.removeEventListener?e.removeEventListener(o,t,r):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=!1},this.unbindAll=function(){for(var e=0;e<h.events.length;e++){var o=h.events[e];o.q?o.e.unbind(o.n,o.f):h._unbind(o.e,o.n,o.f,o.b)}},this.cancelEvent=function(e){return!!(e=e.original?e.original:e||(window.event||!1))&&(e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.preventManipulation&&e.preventManipulation(),e.cancelBubble=!0,e.cancel=!0,e.returnValue=!1)},this.stopPropagation=function(e){return!!(e=e.original?e.original:e||(window.event||!1))&&(e.stopPropagation?e.stopPropagation():(e.cancelBubble&&(e.cancelBubble=!0),!1))},this.showRail=function(){return 0==h.page.maxh||!h.ispage&&"none"==h.win.css("display")||(h.visibility=!0,h.rail.visibility=!0,h.rail.css("display","block")),h},this.showRailHr=function(){return h.railh&&(0==h.page.maxw||!h.ispage&&"none"==h.win.css("display")||(h.railh.visibility=!0,h.railh.css("display","block"))),h},this.hideRail=function(){return h.visibility=!1,h.rail.visibility=!1,h.rail.css("display","none"),h},this.hideRailHr=function(){return h.railh&&(h.railh.visibility=!1,h.railh.css("display","none")),h},this.show=function(){return h.hidden=!1,h.locked=!1,h.showRail().showRailHr()},this.hide=function(){return h.hidden=!0,h.locked=!0,h.hideRail().hideRailHr()},this.toggle=function(){return h.hidden?h.show():h.hide()},this.remove=function(){h.stop(),h.cursortimeout&&clearTimeout(h.cursortimeout),h.doZoomOut(),h.unbindAll(),!1!==h.observer&&h.observer.disconnect(),!1!==h.observerremover&&h.observerremover.disconnect(),h.events=[],h.cursor&&(h.cursor.remove(),h.cursor=null),h.cursorh&&(h.cursorh.remove(),h.cursorh=null),h.rail&&(h.rail.remove(),h.rail=null),h.railh&&(h.railh.remove(),h.railh=null),h.zoom&&(h.zoom.remove(),h.zoom=null);for(var e=0;e<h.saved.css.length;e++){var o=h.saved.css[e];o[0].css(o[1],void 0===o[2]?"":o[2])}return h.saved=!1,h.me.data("__nicescroll",""),h.me=null,h.doc=null,h.docscroll=null,h.win=null,h},this.scrollstart=function(e){return this.onscrollstart=e,h},this.scrollend=function(e){return this.onscrollend=e,h},this.scrollcancel=function(e){return this.onscrollcancel=e,h},this.zoomin=function(e){return this.onzoomin=e,h},this.zoomout=function(e){return this.onzoomout=e,h},this.isScrollable=function(e){if("OPTION"==(e=e.target?e.target:e).nodeName)return!0;for(;e&&1==e.nodeType&&!/BODY|HTML/.test(e.nodeName);){var o=(o=m(e)).css("overflowY")||o.css("overflowX")||o.css("overflow")||"";if(/scroll|auto/.test(o))return e.clientHeight!=e.scrollHeight;e=!!e.parentNode&&e.parentNode}return!1},this.getViewport=function(e){for(e=!(!e||!e.parentNode)&&e.parentNode;e&&1==e.nodeType&&!/BODY|HTML/.test(e.nodeName);){var o=m(e),t=o.css("overflowY")||o.css("overflowX")||o.css("overflow")||"";if(/scroll|auto/.test(t)&&e.clientHeight!=e.scrollHeight||0<o.getNiceScroll().length)return o;e=!!e.parentNode&&e.parentNode}return!1},this.onmousewheel=function(e){if(h.locked)return!0;if(h.rail.drag)return h.cancelEvent(e);if(!h.rail.scrollable)return!h.railh||!h.railh.scrollable||h.onmousewheelhr(e);var o=+new Date,t=!1;return h.opt.preservenativescrolling&&h.checkarea+600<o&&(h.nativescrollingarea=h.isScrollable(e),t=!0),h.checkarea=o,!!h.nativescrollingarea||((e=r(e,!1,t))&&(h.checkarea=0),e)},this.onmousewheelhr=function(e){if(h.locked||!h.railh.scrollable)return!0;if(h.rail.drag)return h.cancelEvent(e);var o=+new Date,t=!1;return h.opt.preservenativescrolling&&h.checkarea+600<o&&(h.nativescrollingarea=h.isScrollable(e),t=!0),h.checkarea=o,!!h.nativescrollingarea||(h.locked?h.cancelEvent(e):r(e,!0,t))},this.stop=function(){return h.cancelScroll(),h.scrollmon&&h.scrollmon.stop(),h.cursorfreezed=!1,h.scroll.y=Math.round(h.getScrollTop()*(1/h.scrollratio.y)),h.noticeCursor(),h},this.getTransitionSpeed=function(e){var o=Math.round(10*h.opt.scrollspeed);return 20<(e=Math.min(o,Math.round(e/20*h.opt.scrollspeed)))?e:0},h.opt.smoothscroll?h.ishwscroll&&p.hastransition&&h.opt.usetransition?(this.prepareTransition=function(e,o){var t=o?20<e?e:0:h.getTransitionSpeed(e),r=t?p.prefixstyle+"transform "+t+"ms ease-out":"";return h.lasttransitionstyle&&h.lasttransitionstyle==r||(h.lasttransitionstyle=r,h.doc.css(p.transitionstyle,r)),t},this.doScrollLeft=function(e,o){var t=h.scrollrunning?h.newscrolly:h.getScrollTop();h.doScrollPos(e,t,o)},this.doScrollTop=function(e,o){var t=h.scrollrunning?h.newscrollx:h.getScrollLeft();h.doScrollPos(t,e,o)},this.doScrollPos=function(i,n,e){var o=h.getScrollTop(),t=h.getScrollLeft();return((h.newscrolly-o)*(n-o)<0||(h.newscrollx-t)*(i-t)<0)&&h.cancelScroll(),0==h.opt.bouncescroll&&(n<0?n=0:n>h.page.maxh&&(n=h.page.maxh),i<0?i=0:i>h.page.maxw&&(i=h.page.maxw)),(!h.scrollrunning||i!=h.newscrollx||n!=h.newscrolly)&&(h.newscrolly=n,h.newscrollx=i,h.newscrollspeed=e||!1,!h.timer&&void(h.timer=setTimeout(function(){var e,o,t=h.getScrollTop(),r=h.getScrollLeft();e=i-r,o=n-t,e=Math.round(Math.sqrt(Math.pow(e,2)+Math.pow(o,2))),e=h.newscrollspeed&&1<h.newscrollspeed?h.newscrollspeed:h.getTransitionSpeed(e),h.newscrollspeed&&h.newscrollspeed<=1&&(e*=h.newscrollspeed),h.prepareTransition(e,!0),h.timerscroll&&h.timerscroll.tm&&clearInterval(h.timerscroll.tm),0<e&&(!h.scrollrunning&&h.onscrollstart&&h.onscrollstart.call(h,{type:"scrollstart",current:{x:r,y:t},request:{x:i,y:n},end:{x:h.newscrollx,y:h.newscrolly},speed:e}),p.transitionend?h.scrollendtrapped||(h.scrollendtrapped=!0,h.bind(h.doc,p.transitionend,h.onScrollEnd,!1)):(h.scrollendtrapped&&clearTimeout(h.scrollendtrapped),h.scrollendtrapped=setTimeout(h.onScrollEnd,e)),h.timerscroll={bz:new BezierClass(t,h.newscrolly,e,0,0,.58,1),bh:new BezierClass(r,h.newscrollx,e,0,0,.58,1)},h.cursorfreezed||(h.timerscroll.tm=setInterval(function(){h.showCursor(h.getScrollTop(),h.getScrollLeft())},60))),h.synched("doScroll-set",function(){h.timer=0,h.scrollendtrapped&&(h.scrollrunning=!0),h.setScrollTop(h.newscrolly),h.setScrollLeft(h.newscrollx),h.scrollendtrapped||h.onScrollEnd()})},50)))},this.cancelScroll=function(){if(!h.scrollendtrapped)return!0;var e=h.getScrollTop(),o=h.getScrollLeft();return h.scrollrunning=!1,p.transitionend||clearTimeout(p.transitionend),h.scrollendtrapped=!1,h._unbind(h.doc,p.transitionend,h.onScrollEnd),h.prepareTransition(0),h.setScrollTop(e),h.railh&&h.setScrollLeft(o),h.timerscroll&&h.timerscroll.tm&&clearInterval(h.timerscroll.tm),h.timerscroll=!1,h.cursorfreezed=!1,h.showCursor(e,o),h},this.onScrollEnd=function(){h.scrollendtrapped&&h._unbind(h.doc,p.transitionend,h.onScrollEnd),h.scrollendtrapped=!1,h.prepareTransition(0),h.timerscroll&&h.timerscroll.tm&&clearInterval(h.timerscroll.tm),h.timerscroll=!1;var e=h.getScrollTop(),o=h.getScrollLeft();if(h.setScrollTop(e),h.railh&&h.setScrollLeft(o),h.noticeCursor(!1,e,o),h.cursorfreezed=!1,e<0?e=0:e>h.page.maxh&&(e=h.page.maxh),o<0?o=0:o>h.page.maxw&&(o=h.page.maxw),e!=h.newscrolly||o!=h.newscrollx)return h.doScrollPos(o,e,h.opt.snapbackspeed);h.onscrollend&&h.scrollrunning&&h.onscrollend.call(h,{type:"scrollend",current:{x:o,y:e},end:{x:h.newscrollx,y:h.newscrolly}}),h.scrollrunning=!1}):(this.doScrollLeft=function(e,o){var t=h.scrollrunning?h.newscrolly:h.getScrollTop();h.doScrollPos(e,t,o)},this.doScrollTop=function(e,o){var t=h.scrollrunning?h.newscrollx:h.getScrollLeft();h.doScrollPos(t,e,o)},this.doScrollPos=function(e,o,t){if(o=void 0===o||!1===o?h.getScrollTop(!0):o,h.timer&&h.newscrolly==o&&h.newscrollx==e)return!0;h.timer&&u(h.timer),h.timer=0;var r=h.getScrollTop(),i=h.getScrollLeft();((h.newscrolly-r)*(o-r)<0||(h.newscrollx-i)*(e-i)<0)&&h.cancelScroll(),h.newscrolly=o,h.newscrollx=e,h.bouncescroll&&h.rail.visibility||(h.newscrolly<0?h.newscrolly=0:h.newscrolly>h.page.maxh&&(h.newscrolly=h.page.maxh)),h.bouncescroll&&h.railh.visibility||(h.newscrollx<0?h.newscrollx=0:h.newscrollx>h.page.maxw&&(h.newscrollx=h.page.maxw)),h.dst={},h.dst.x=e-i,h.dst.y=o-r,h.dst.px=i,h.dst.py=r;var n=Math.round(Math.sqrt(Math.pow(h.dst.x,2)+Math.pow(h.dst.y,2)));h.dst.ax=h.dst.x/n,h.dst.ay=h.dst.y/n;var s=0,l=n;if(0==h.dst.x?(s=r,l=o,h.dst.ay=1,h.dst.py=0):0==h.dst.y&&(s=i,l=e,h.dst.ax=1,h.dst.px=0),n=h.getTransitionSpeed(n),t&&t<=1&&(n*=t),h.bzscroll=0<n&&(h.bzscroll?h.bzscroll.update(l,n):new BezierClass(s,l,n,0,1,0,1)),!h.timer){(r==h.page.maxh&&o>=h.page.maxh||i==h.page.maxw&&e>=h.page.maxw)&&h.checkContentSize();var a=1;h.cancelAnimationFrame=!1,h.timer=1,h.onscrollstart&&!h.scrollrunning&&h.onscrollstart.call(h,{type:"scrollstart",current:{x:i,y:r},request:{x:e,y:o},end:{x:h.newscrollx,y:h.newscrolly},speed:n}),function e(){if(h.cancelAnimationFrame)return!0;if(h.scrollrunning=!0,a=1-a)return h.timer=d(e)||1;var o=0,t=sy=h.getScrollTop();if(h.dst.ay){var r=(t=h.bzscroll?h.dst.py+h.bzscroll.getNow()*h.dst.ay:h.newscrolly)-sy;(r<0&&t<h.newscrolly||0<r&&t>h.newscrolly)&&(t=h.newscrolly),h.setScrollTop(t),t==h.newscrolly&&(o=1)}else o=1;var i=sx=h.getScrollLeft();h.dst.ax?(((r=(i=h.bzscroll?h.dst.px+h.bzscroll.getNow()*h.dst.ax:h.newscrollx)-sx)<0&&i<h.newscrollx||0<r&&i>h.newscrollx)&&(i=h.newscrollx),h.setScrollLeft(i),i==h.newscrollx&&(o+=1)):o+=1,2==o?(h.timer=0,h.cursorfreezed=!1,h.bzscroll=!1,h.scrollrunning=!1,t<0?t=0:t>h.page.maxh&&(t=h.page.maxh),i<0?i=0:i>h.page.maxw&&(i=h.page.maxw),i!=h.newscrollx||t!=h.newscrolly?h.doScrollPos(i,t):h.onscrollend&&h.onscrollend.call(h,{type:"scrollend",current:{x:sx,y:sy},end:{x:h.newscrollx,y:h.newscrolly}})):h.timer=d(e)||1}(),(r==h.page.maxh&&r<=o||i==h.page.maxw&&i<=e)&&h.checkContentSize(),h.noticeCursor()}},this.cancelScroll=function(){return h.timer&&u(h.timer),h.timer=0,h.bzscroll=!1,h.scrollrunning=!1,h}):(this.doScrollLeft=function(e,o){var t=h.getScrollTop();h.doScrollPos(e,t,o)},this.doScrollTop=function(e,o){var t=h.getScrollLeft();h.doScrollPos(t,e,o)},this.doScrollPos=function(e,o,t){var r=e>h.page.maxw?h.page.maxw:e;r<0&&(r=0);var i=o>h.page.maxh?h.page.maxh:o;i<0&&(i=0),h.synched("scroll",function(){h.setScrollTop(i),h.setScrollLeft(r)})},this.cancelScroll=function(){}),this.doScrollBy=function(e,o){var t=0;t=o?Math.floor((h.scroll.y-e)*h.scrollratio.y):(h.timer?h.newscrolly:h.getScrollTop(!0))-e;if(h.bouncescroll){var r=Math.round(h.view.h/2);t<-r?t=-r:t>h.page.maxh+r&&(t=h.page.maxh+r)}return h.cursorfreezed=!1,py=h.getScrollTop(!0),t<0&&py<=0?h.noticeCursor():t>h.page.maxh&&py>=h.page.maxh?(h.checkContentSize(),h.noticeCursor()):void h.doScrollTop(t)},this.doScrollLeftBy=function(e,o){var t=0;t=o?Math.floor((h.scroll.x-e)*h.scrollratio.x):(h.timer?h.newscrollx:h.getScrollLeft(!0))-e;if(h.bouncescroll){var r=Math.round(h.view.w/2);t<-r?t=-r:t>h.page.maxw+r&&(t=h.page.maxw+r)}if(h.cursorfreezed=!1,px=h.getScrollLeft(!0),t<0&&px<=0||t>h.page.maxw&&px>=h.page.maxw)return h.noticeCursor();h.doScrollLeft(t)},this.doScrollTo=function(e,o){o&&Math.round(e*h.scrollratio.y),h.cursorfreezed=!1,h.doScrollTop(e)},this.checkContentSize=function(){var e=h.getContentSize();(e.h!=h.page.h||e.w!=h.page.w)&&h.resize(!1,e)},h.onscroll=function(e){h.rail.drag||h.cursorfreezed||h.synched("scroll",function(){h.scroll.y=Math.round(h.getScrollTop()*(1/h.scrollratio.y)),h.railh&&(h.scroll.x=Math.round(h.getScrollLeft()*(1/h.scrollratio.x))),h.noticeCursor()})},h.bind(h.docscroll,"scroll",h.onscroll),this.doZoomIn=function(e){if(!h.zoomactive){h.zoomactive=!0,h.zoomrestore={style:{}};var o,t="position top left zIndex backgroundColor marginTop marginBottom marginLeft marginRight".split(" "),r=h.win[0].style;for(o in t){var i=t[o];h.zoomrestore.style[i]=void 0!==r[i]?r[i]:""}return h.zoomrestore.style.width=h.win.css("width"),h.zoomrestore.style.height=h.win.css("height"),h.zoomrestore.padding={w:h.win.outerWidth()-h.win.width(),h:h.win.outerHeight()-h.win.height()},p.isios4&&(h.zoomrestore.scrollTop=m(window).scrollTop(),m(window).scrollTop(0)),h.win.css({position:p.isios4?"absolute":"fixed",top:0,left:0,"z-index":v+100,margin:"0px"}),(""==(t=h.win.css("backgroundColor"))||/transparent|rgba\(0, 0, 0, 0\)|rgba\(0,0,0,0\)/.test(t))&&h.win.css("backgroundColor","#fff"),h.rail.css({"z-index":v+101}),h.zoom.css({"z-index":v+102}),h.zoom.css("backgroundPosition","0px -18px"),h.resizeZoom(),h.onzoomin&&h.onzoomin.call(h),h.cancelEvent(e)}},this.doZoomOut=function(e){if(h.zoomactive)return h.zoomactive=!1,h.win.css("margin",""),h.win.css(h.zoomrestore.style),p.isios4&&m(window).scrollTop(h.zoomrestore.scrollTop),h.rail.css({"z-index":h.zindex}),h.zoom.css({"z-index":h.zindex}),h.zoomrestore=!1,h.zoom.css("backgroundPosition","0px 0px"),h.onResize(),h.onzoomout&&h.onzoomout.call(h),h.cancelEvent(e)},this.doZoom=function(e){return h.zoomactive?h.doZoomOut(e):h.doZoomIn(e)},this.resizeZoom=function(){if(h.zoomactive){var e=h.getScrollTop();h.win.css({width:m(window).width()-h.zoomrestore.padding.w+"px",height:m(window).height()-h.zoomrestore.padding.h+"px"}),h.onResize(),h.setScrollTop(Math.min(h.page.maxh,e))}},this.init(),m.nicescroll.push(this)},z=function(e){var d=this;this.nc=e,this.steptime=this.lasttime=this.speedy=this.speedx=this.lasty=this.lastx=0,this.snapy=this.snapx=!1,this.demuly=this.demulx=0,this.lastscrolly=this.lastscrollx=-1,this.timer=this.chky=this.chkx=0,this.time=function(){return+new Date},this.reset=function(e,o){d.stop();var t=d.time();d.steptime=0,d.lasttime=t,d.speedx=0,d.speedy=0,d.lastx=e,d.lasty=o,d.lastscrollx=-1,d.lastscrolly=-1},this.update=function(e,o){var t=d.time();d.steptime=t-d.lasttime,d.lasttime=t;t=o-d.lasty;var r=e-d.lastx,i=(i=d.nc.getScrollTop())+t,n=(n=d.nc.getScrollLeft())+r;d.snapx=n<0||n>d.nc.page.maxw,d.snapy=i<0||i>d.nc.page.maxh,d.speedx=r,d.speedy=t,d.lastx=e,d.lasty=o},this.stop=function(){d.nc.unsynched("domomentum2d"),d.timer&&clearTimeout(d.timer),d.timer=0,d.lastscrollx=-1,d.lastscrolly=-1},this.doSnapy=function(e,o){var t=!1;o<0?t=!(o=0):o>d.nc.page.maxh&&(o=d.nc.page.maxh,t=!0),e<0?t=!(e=0):e>d.nc.page.maxw&&(e=d.nc.page.maxw,t=!0),t&&d.nc.doScrollPos(e,o,d.nc.opt.snapbackspeed)},this.doMomentum=function(e){var o=d.time(),t=e?o+e:d.lasttime;e=d.nc.getScrollLeft();var r=d.nc.getScrollTop(),i=d.nc.page.maxh,n=d.nc.page.maxw;if(d.speedx=0<n?Math.min(60,d.speedx):0,d.speedy=0<i?Math.min(60,d.speedy):0,t=t&&o-t<=50,(r<0||i<r||e<0||n<e)&&(t=!1),e=!(!d.speedx||!t)&&d.speedx,d.speedy&&t&&d.speedy||e){var s=Math.max(16,d.steptime);50<s&&(e=s/50,d.speedx*=e,d.speedy*=e,s=50),d.demulxy=0,d.lastscrollx=d.nc.getScrollLeft(),d.chkx=d.lastscrollx,d.lastscrolly=d.nc.getScrollTop(),d.chky=d.lastscrolly;var l=d.lastscrollx,a=d.lastscrolly,c=function(){var e=600<d.time()-o?.04:.02;d.speedx&&(l=Math.floor(d.lastscrollx-d.speedx*(1-d.demulxy)),(d.lastscrollx=l)<0||n<l)&&(e=.1),d.speedy&&(a=Math.floor(d.lastscrolly-d.speedy*(1-d.demulxy)),(d.lastscrolly=a)<0||i<a)&&(e=.1),d.demulxy=Math.min(1,d.demulxy+e),d.nc.synched("domomentum2d",function(){d.speedx&&(d.nc.getScrollLeft()!=d.chkx&&d.stop(),d.chkx=l,d.nc.setScrollLeft(l)),d.speedy&&(d.nc.getScrollTop()!=d.chky&&d.stop(),d.chky=a,d.nc.setScrollTop(a)),d.timer||(d.nc.hideCursor(),d.doSnapy(l,a))}),d.demulxy<1?d.timer=setTimeout(c,s):(d.stop(),d.nc.hideCursor(),d.doSnapy(l,a))};c()}else d.doSnapy(d.nc.getScrollLeft(),d.nc.getScrollTop())}},r=m.fn.scrollTop;m.cssHooks.pageYOffset={get:function(e,o,t){return(o=m.data(e,"__nicescroll")||!1)&&o.ishwscroll?o.getScrollTop():r.call(e)},set:function(e,o){var t=m.data(e,"__nicescroll")||!1;return t&&t.ishwscroll?t.setScrollTop(parseInt(o)):r.call(e,o),this}},m.fn.scrollTop=function(o){if(void 0===o){var e=this[0]&&m.data(this[0],"__nicescroll")||!1;return e&&e.ishwscroll?e.getScrollTop():r.call(this)}return this.each(function(){var e=m.data(this,"__nicescroll")||!1;e&&e.ishwscroll?e.setScrollTop(parseInt(o)):r.call(m(this),o)})};var n=m.fn.scrollLeft;m.cssHooks.pageXOffset={get:function(e,o,t){return(o=m.data(e,"__nicescroll")||!1)&&o.ishwscroll?o.getScrollLeft():n.call(e)},set:function(e,o){var t=m.data(e,"__nicescroll")||!1;return t&&t.ishwscroll?t.setScrollLeft(parseInt(o)):n.call(e,o),this}},m.fn.scrollLeft=function(o){if(void 0===o){var e=this[0]&&m.data(this[0],"__nicescroll")||!1;return e&&e.ishwscroll?e.getScrollLeft():n.call(this)}return this.each(function(){var e=m.data(this,"__nicescroll")||!1;e&&e.ishwscroll?e.setScrollLeft(parseInt(o)):n.call(m(this),o)})};var s=function(e){var t=this;if(this.length=0,this.name="nicescrollarray",this.each=function(e){for(var o=0;o<t.length;o++)e.call(t[o]);return t},this.push=function(e){t[t.length]=e,t.length++},this.eq=function(e){return t[e]},e)for(a=0;a<e.length;a++){var o=m.data(e[a],"__nicescroll")||!1;o&&(this[this.length]=o,this.length++)}return this};!function(e,o,t){for(var r=0;r<o.length;r++)t(e,o[r])}(s.prototype,"show hide toggle onResize resize remove stop doScrollPos".split(" "),function(e,o){e[o]=function(){var e=arguments;return this.each(function(){this[o].apply(this,e)})}}),m.fn.getNiceScroll=function(e){return void 0===e?new s(this):m.data(this[e],"__nicescroll")||!1},m.extend(m.expr[":"],{nicescroll:function(e){return!!m.data(e,"__nicescroll")}}),m.fn.niceScroll=function(e,o){void 0===o&&"object"==typeof e&&!("jquery"in e)&&(o=e,e=!1);var t=new s;void 0===o&&(o={}),e&&(o.doc=m(e),o.win=m(this));var r=!("doc"in o);return!r&&!("win"in o)&&(o.win=m(this)),this.each(function(){var e=m(this).data("__nicescroll")||!1;e||(o.doc=r?m(this):o.doc,e=new i(o,m(this)),m(this).data("__nicescroll",e)),t.push(e)}),1==t.length?t[0]:t},window.NiceScroll={getjQuery:function(){return m}},m.nicescroll||(m.nicescroll=new s,m.nicescroll.options=x)}(jQuery);
!function(w){function b(){var t=location.href;return hashtag=-1!==t.indexOf("#prettyPhoto")&&decodeURI(t.substring(t.indexOf("#prettyPhoto")+1,t.length)),hashtag}function k(t,e){t=t.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var i=new RegExp("[\\?&]"+t+"=([^&#]*)").exec(e);return null==i?"":i[1]}w.prettyPhoto={version:"3.1.5"},w.fn.prettyPhoto=function(e){function i(){w(".pp_loaderIcon").hide(),projectedTop=scroll_pos.scrollTop+(v/2-r.containerHeight/2),projectedTop<0&&(projectedTop=0),$ppt.fadeTo(settings.animation_speed,1),$pp_pic_holder.find(".pp_content").animate({height:r.contentHeight,width:r.contentWidth},settings.animation_speed),$pp_pic_holder.animate({top:projectedTop,left:y/2-r.containerWidth/2<0?0:y/2-r.containerWidth/2,width:r.containerWidth},settings.animation_speed,function(){$pp_pic_holder.find(".pp_hoverContainer,#fullResImage").height(r.height).width(r.width),$pp_pic_holder.find(".pp_fade").fadeIn(settings.animation_speed),isSet&&"image"==s(pp_images[set_position])?$pp_pic_holder.find(".pp_hoverContainer").show():$pp_pic_holder.find(".pp_hoverContainer").hide(),settings.allow_expand&&(r.resized?w("a.pp_expand,a.pp_contract").show():w("a.pp_expand").hide()),!settings.autoplay_slideshow||m||d||w.prettyPhoto.startSlideshow(),settings.changepicturecallback(),d=!0}),isSet&&settings.overlay_gallery&&"image"==s(pp_images[set_position])?(itemWidth=57,navWidth="facebook"==settings.theme||"pp_default"==settings.theme?50:30,itemsPerPage=Math.floor((r.containerWidth-100-navWidth)/itemWidth),itemsPerPage=itemsPerPage<pp_images.length?itemsPerPage:pp_images.length,totalPage=Math.ceil(pp_images.length/itemsPerPage)-1,0==totalPage?(navWidth=0,$pp_gallery.find(".pp_arrow_next,.pp_arrow_previous").hide()):$pp_gallery.find(".pp_arrow_next,.pp_arrow_previous").show(),galleryWidth=itemsPerPage*itemWidth,fullGalleryWidth=pp_images.length*itemWidth,$pp_gallery.css("margin-left",-(galleryWidth/2+navWidth/2)).find("div:first").width(galleryWidth+5).find("ul").width(fullGalleryWidth).find("li.selected").removeClass("selected"),goToPage=Math.floor(set_position/itemsPerPage)<totalPage?Math.floor(set_position/itemsPerPage):totalPage,w.prettyPhoto.changeGalleryPage(goToPage),$pp_gallery_li.filter(":eq("+set_position+")").addClass("selected")):$pp_pic_holder.find(".pp_content").unbind("mouseenter mouseleave"),e.ajaxcallback()}function p(t){$pp_pic_holder.find("#pp_full_res object,#pp_full_res embed").css("visibility","hidden"),$pp_pic_holder.find(".pp_fade").fadeOut(settings.animation_speed,function(){w(".pp_loaderIcon").show(),t()})}function o(t,e){if(resized=!1,a(t,e),imageWidth=t,imageHeight=e,(y<g||v<_)&&doresize&&settings.allow_resize&&!u){for(resized=!0,fitting=!1;!fitting;)y<g?(imageWidth=y-200,imageHeight=e/t*imageWidth):v<_?(imageHeight=v-200,imageWidth=t/e*imageHeight):fitting=!0,_=imageHeight,g=imageWidth;(y<g||v<_)&&o(g,_),a(imageWidth,imageHeight)}return{width:Math.floor(imageWidth),height:Math.floor(imageHeight),containerHeight:Math.floor(_),containerWidth:Math.floor(g)+2*settings.horizontal_padding,contentHeight:Math.floor(h),contentWidth:Math.floor(c),resized:resized}}function a(t,e){t=parseFloat(t),e=parseFloat(e),$pp_details=$pp_pic_holder.find(".pp_details"),$pp_details.width(t),detailsHeight=parseFloat($pp_details.css("marginTop"))+parseFloat($pp_details.css("marginBottom")),$pp_details=$pp_details.clone().addClass(settings.theme).width(t).appendTo(w("body")).css({position:"absolute",top:-1e4}),detailsHeight+=$pp_details.height(),detailsHeight=detailsHeight<=34?36:detailsHeight,$pp_details.remove(),$pp_title=$pp_pic_holder.find(".ppt"),$pp_title.width(t),titleHeight=parseFloat($pp_title.css("marginTop"))+parseFloat($pp_title.css("marginBottom")),$pp_title=$pp_title.clone().appendTo(w("body")).css({position:"absolute",top:-1e4}),titleHeight+=$pp_title.height(),$pp_title.remove(),h=e+detailsHeight,c=t,_=h+titleHeight+$pp_pic_holder.find(".pp_top").height()+$pp_pic_holder.find(".pp_bottom").height(),g=t}function s(t){return t.match(/youtube\.com\/watch/i)||t.match(/youtu\.be/i)?"youtube":t.match(/vimeo\.com/i)?"vimeo":t.match(/\b.mov\b/i)?"quicktime":t.match(/\b.swf\b/i)?"flash":t.match(/\biframe=true\b/i)?"iframe":t.match(/\bajax=true\b/i)?"ajax":t.match(/\bcustom=true\b/i)?"custom":"#"==t.substr(0,1)?"inline":"image"}function n(){if(doresize&&"undefined"!=typeof $pp_pic_holder){if(scroll_pos=t(),contentHeight=$pp_pic_holder.height(),contentwidth=$pp_pic_holder.width(),projectedTop=v/2+scroll_pos.scrollTop-contentHeight/2,projectedTop<0&&(projectedTop=0),contentHeight>v)return;$pp_pic_holder.css({top:projectedTop,left:y/2+scroll_pos.scrollLeft-contentwidth/2})}}function t(){return self.pageYOffset?{scrollTop:self.pageYOffset,scrollLeft:self.pageXOffset}:document.documentElement&&document.documentElement.scrollTop?{scrollTop:document.documentElement.scrollTop,scrollLeft:document.documentElement.scrollLeft}:document.body?{scrollTop:document.body.scrollTop,scrollLeft:document.body.scrollLeft}:void 0}function l(t){if(settings.social_tools&&(facebook_like_link=settings.social_tools.replace("{location_href}",encodeURIComponent(location.href))),settings.markup=settings.markup.replace("{pp_social}",""),w("body").append(settings.markup),$pp_pic_holder=w(".pp_pic_holder"),$ppt=w(".ppt"),$pp_overlay=w("div.pp_overlay"),isSet&&settings.overlay_gallery){currentGalleryPage=0,toInject="";for(var e=0;e<pp_images.length;e++)pp_images[e].match(/\b(jpg|jpeg|png|gif)\b/gi)?(classname="",img_src=pp_images[e]):(classname="default",img_src=""),toInject+="<li class='"+classname+"'><a href='#'><img src='"+img_src+"' width='50' alt='' /></a></li>";toInject=settings.gallery_markup.replace(/{gallery}/g,toInject),$pp_pic_holder.find("#pp_full_res").after(toInject),$pp_gallery=w(".pp_pic_holder .pp_gallery"),$pp_gallery_li=$pp_gallery.find("li"),$pp_gallery.find(".pp_arrow_next").click(function(){return w.prettyPhoto.changeGalleryPage("next"),w.prettyPhoto.stopSlideshow(),!1}),$pp_gallery.find(".pp_arrow_previous").click(function(){return w.prettyPhoto.changeGalleryPage("previous"),w.prettyPhoto.stopSlideshow(),!1}),$pp_pic_holder.find(".pp_content").hover(function(){$pp_pic_holder.find(".pp_gallery:not(.disabled)").fadeIn()},function(){$pp_pic_holder.find(".pp_gallery:not(.disabled)").fadeOut()}),itemWidth=57,$pp_gallery_li.each(function(t){w(this).find("a").click(function(){return w.prettyPhoto.changePage(t),w.prettyPhoto.stopSlideshow(),!1})})}settings.slideshow&&($pp_pic_holder.find(".pp_nav").prepend('<a href="#" class="pp_play">Play</a>'),$pp_pic_holder.find(".pp_nav .pp_play").click(function(){return w.prettyPhoto.startSlideshow(),!1})),$pp_pic_holder.attr("class","pp_pic_holder "+settings.theme),$pp_overlay.css({opacity:0,height:w(document).height(),width:w(window).width()}).bind("click",function(){settings.modal||w.prettyPhoto.close()}),w("a.pp_close").bind("click",function(){return w.prettyPhoto.close(),!1}),settings.allow_expand&&w("a.pp_expand").bind("click",function(t){return w(this).hasClass("pp_expand")?(w(this).removeClass("pp_expand").addClass("pp_contract"),doresize=!1):(w(this).removeClass("pp_contract").addClass("pp_expand"),doresize=!0),p(function(){w.prettyPhoto.open()}),!1}),$pp_pic_holder.find(".pp_previous, .pp_nav .pp_arrow_previous").bind("click",function(){return w.prettyPhoto.changePage("previous"),w.prettyPhoto.stopSlideshow(),!1}),$pp_pic_holder.find(".pp_next, .pp_nav .pp_arrow_next").bind("click",function(){return w.prettyPhoto.changePage("next"),w.prettyPhoto.stopSlideshow(),!1}),n()}e=jQuery.extend({hook:"rel",animation_speed:"fast",ajaxcallback:function(){},slideshow:5e3,autoplay_slideshow:!1,opacity:.8,show_title:!0,allow_resize:!0,allow_expand:!0,default_width:500,default_height:344,counter_separator_label:"/",theme:"pp_default",horizontal_padding:20,hideflash:!1,wmode:"opaque",autoplay:!0,modal:!1,deeplinking:!0,overlay_gallery:!0,overlay_gallery_max:30,keyboard_shortcuts:!0,changepicturecallback:function(){},callback:function(){},ie6_fallback:!0,markup:'<div class="pp_pic_holder"> \t\t\t\t\t\t<div class="ppt"> </div> \t\t\t\t\t\t<div class="pp_top"> \t\t\t\t\t\t\t<div class="pp_left"></div> \t\t\t\t\t\t\t<div class="pp_middle"></div> \t\t\t\t\t\t\t<div class="pp_right"></div> \t\t\t\t\t\t</div> \t\t\t\t\t\t<div class="pp_content_container"> \t\t\t\t\t\t\t<div class="pp_left"> \t\t\t\t\t\t\t<div class="pp_right"> \t\t\t\t\t\t\t\t<div class="pp_content"> \t\t\t\t\t\t\t\t\t<div class="pp_loaderIcon"></div> \t\t\t\t\t\t\t\t\t<div class="pp_fade"> \t\t\t\t\t\t\t\t\t\t<a href="#" class="pp_expand" title="Expand the image">Expand</a> \t\t\t\t\t\t\t\t\t\t<div class="pp_hoverContainer"> \t\t\t\t\t\t\t\t\t\t\t<a class="pp_next" href="#">next</a> \t\t\t\t\t\t\t\t\t\t\t<a class="pp_previous" href="#">previous</a> \t\t\t\t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t\t\t\t<div id="pp_full_res"></div> \t\t\t\t\t\t\t\t\t\t<div class="pp_details"> \t\t\t\t\t\t\t\t\t\t\t<div class="pp_nav"> \t\t\t\t\t\t\t\t\t\t\t\t<a href="#" class="pp_arrow_previous">Previous</a> \t\t\t\t\t\t\t\t\t\t\t\t<p class="currentTextHolder">0/0</p> \t\t\t\t\t\t\t\t\t\t\t\t<a href="#" class="pp_arrow_next">Next</a> \t\t\t\t\t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t\t\t\t\t<p class="pp_description"></p> \t\t\t\t\t\t\t\t\t\t\t<div class="pp_social">{pp_social}</div> \t\t\t\t\t\t\t\t\t\t\t<a class="pp_close" href="#">Close</a> \t\t\t\t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t</div> \t\t\t\t\t\t</div> \t\t\t\t\t\t<div class="pp_bottom"> \t\t\t\t\t\t\t<div class="pp_left"></div> \t\t\t\t\t\t\t<div class="pp_middle"></div> \t\t\t\t\t\t\t<div class="pp_right"></div> \t\t\t\t\t\t</div> \t\t\t\t\t</div> \t\t\t\t\t<div class="pp_overlay"></div>',gallery_markup:'<div class="pp_gallery"> \t\t\t\t\t\t\t\t<a href="#" class="pp_arrow_previous">Previous</a> \t\t\t\t\t\t\t\t<div> \t\t\t\t\t\t\t\t\t<ul> \t\t\t\t\t\t\t\t\t\t{gallery} \t\t\t\t\t\t\t\t\t</ul> \t\t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t\t<a href="#" class="pp_arrow_next">Next</a> \t\t\t\t\t\t\t</div>',image_markup:'<img id="fullResImage" src="{path}" />',flash_markup:'<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="{width}" height="{height}"><param name="wmode" value="{wmode}" /><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="{path}" /><embed src="{path}" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="{width}" height="{height}" wmode="{wmode}"></embed></object>',quicktime_markup:'<object classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab" height="{height}" width="{width}"><param name="src" value="{path}"><param name="autoplay" value="{autoplay}"><param name="type" value="video/quicktime"><embed src="{path}" height="{height}" width="{width}" autoplay="{autoplay}" type="video/quicktime" pluginspage="http://www.apple.com/quicktime/download/"></embed></object>',iframe_markup:'<iframe src ="{path}" width="{width}" height="{height}" frameborder="no"></iframe>',inline_markup:'<div class="pp_inline">{content}</div>',custom_markup:"",social_tools:'<div class="twitter"><a href="http://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"><\/script></div><div class="facebook"><iframe src="//www.facebook.com/plugins/like.php?locale=en_US&href={location_href}&layout=button_count&show_faces=true&width=500&action=like&font&colorscheme=light&height=23" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:500px; height:23px;" allowTransparency="true"></iframe></div>'},e);var r,d,h,c,_,g,m,f=this,u=!1,v=w(window).height(),y=w(window).width();return doresize=!0,scroll_pos=t(),w(window).unbind("resize.prettyphoto").bind("resize.prettyphoto",function(){n(),v=w(window).height(),y=w(window).width(),"undefined"!=typeof $pp_overlay&&$pp_overlay.height(w(document).height()).width(y)}),e.keyboard_shortcuts&&w(document).unbind("keydown.prettyphoto").bind("keydown.prettyphoto",function(t){if("undefined"!=typeof $pp_pic_holder&&$pp_pic_holder.is(":visible"))switch(t.keyCode){case 37:w.prettyPhoto.changePage("previous"),t.preventDefault();break;case 39:w.prettyPhoto.changePage("next"),t.preventDefault();break;case 27:settings.modal||w.prettyPhoto.close(),t.preventDefault()}}),w.prettyPhoto.initialize=function(){return settings=e,"pp_default"==settings.theme&&(settings.horizontal_padding=16),theRel=w(this).attr(settings.hook),galleryRegExp=/\[(?:.*)\]/,isSet=!!galleryRegExp.exec(theRel),pp_images=isSet?jQuery.map(f,function(t,e){if(-1!=w(t).attr(settings.hook).indexOf(theRel))return w(t).attr("href")}):w.makeArray(w(this).attr("href")),pp_titles=isSet?jQuery.map(f,function(t,e){if(-1!=w(t).attr(settings.hook).indexOf(theRel))return w(t).find("img").attr("alt")?w(t).find("img").attr("alt"):""}):w.makeArray(w(this).find("img").attr("alt")),pp_descriptions=isSet?jQuery.map(f,function(t,e){if(-1!=w(t).attr(settings.hook).indexOf(theRel))return w(t).attr("title")?w(t).attr("title"):""}):w.makeArray(w(this).attr("title")),pp_images.length>settings.overlay_gallery_max&&(settings.overlay_gallery=!1),set_position=jQuery.inArray(w(this).attr("href"),pp_images),rel_index=isSet?set_position:w("a["+settings.hook+"^='"+theRel+"']").index(w(this)),l(),settings.allow_resize&&w(window).bind("scroll.prettyphoto",function(){n()}),w.prettyPhoto.open(),!1},w.prettyPhoto.open=function(t){return"undefined"==typeof settings&&(settings=e,pp_images=w.makeArray(t),pp_titles=arguments[1]?w.makeArray(arguments[1]):w.makeArray(""),pp_descriptions=arguments[2]?w.makeArray(arguments[2]):w.makeArray(""),isSet=1<pp_images.length,set_position=arguments[3]?arguments[3]:0,l(t.target)),settings.hideflash&&w("object,embed,iframe[src*=youtube],iframe[src*=vimeo]").css("visibility","hidden"),1<w(pp_images).size()?w(".pp_nav").show():w(".pp_nav").hide(),w(".pp_loaderIcon").show(),settings.deeplinking&&"undefined"!=typeof theRel&&(location.hash=theRel+"/"+rel_index+"/"),settings.social_tools&&(facebook_like_link=settings.social_tools.replace("{location_href}",encodeURIComponent(location.href)),$pp_pic_holder.find(".pp_social").html(facebook_like_link)),$ppt.is(":hidden")&&$ppt.css("opacity",0).show(),$pp_overlay.show().fadeTo(settings.animation_speed,settings.opacity),$pp_pic_holder.find(".currentTextHolder").text(set_position+1+settings.counter_separator_label+w(pp_images).size()),void 0!==pp_descriptions[set_position]&&""!=pp_descriptions[set_position]?$pp_pic_holder.find(".pp_description").show().html(unescape(pp_descriptions[set_position])):$pp_pic_holder.find(".pp_description").hide(),movie_width=parseFloat(k("width",pp_images[set_position]))?k("width",pp_images[set_position]):settings.default_width.toString(),movie_height=parseFloat(k("height",pp_images[set_position]))?k("height",pp_images[set_position]):settings.default_height.toString(),u=!1,-1!=movie_height.indexOf("%")&&(movie_height=parseFloat(w(window).height()*parseFloat(movie_height)/100-150),u=!0),-1!=movie_width.indexOf("%")&&(movie_width=parseFloat(w(window).width()*parseFloat(movie_width)/100-150),u=!0),$pp_pic_holder.fadeIn(function(){switch(settings.show_title&&""!=pp_titles[set_position]&&void 0!==pp_titles[set_position]?$ppt.html(unescape(pp_titles[set_position])):$ppt.html(" "),imgPreloader="",skipInjection=!1,s(pp_images[set_position])){case"image":imgPreloader=new Image,nextImage=new Image,isSet&&set_position<w(pp_images).size()-1&&(nextImage.src=pp_images[set_position+1]),prevImage=new Image,isSet&&pp_images[set_position-1]&&(prevImage.src=pp_images[set_position-1]),$pp_pic_holder.find("#pp_full_res")[0].innerHTML=settings.image_markup.replace(/{path}/g,pp_images[set_position]),imgPreloader.onload=function(){r=o(imgPreloader.width,imgPreloader.height),i()},imgPreloader.onerror=function(){alert("Image cannot be loaded. Make sure the path is correct and image exist."),w.prettyPhoto.close()},imgPreloader.src=pp_images[set_position];break;case"youtube":r=o(movie_width,movie_height),movie_id=k("v",pp_images[set_position]),""==movie_id&&(movie_id=pp_images[set_position].split("youtu.be/"),movie_id=movie_id[1],0<movie_id.indexOf("?")&&(movie_id=movie_id.substr(0,movie_id.indexOf("?"))),0<movie_id.indexOf("&")&&(movie_id=movie_id.substr(0,movie_id.indexOf("&")))),movie="http://www.youtube.com/embed/"+movie_id,k("rel",pp_images[set_position])?movie+="?rel="+k("rel",pp_images[set_position]):movie+="?rel=1",settings.autoplay&&(movie+="&autoplay=1"),toInject=settings.iframe_markup.replace(/{width}/g,r.width).replace(/{height}/g,r.height).replace(/{wmode}/g,settings.wmode).replace(/{path}/g,movie);break;case"vimeo":r=o(movie_width,movie_height),movie_id=pp_images[set_position];var t=movie_id.match(/http(s?):\/\/(www\.)?vimeo.com\/(\d+)/);movie="http://player.vimeo.com/video/"+t[3]+"?title=0&byline=0&portrait=0",settings.autoplay&&(movie+="&autoplay=1;"),vimeo_width=r.width+"/embed/?moog_width="+r.width,toInject=settings.iframe_markup.replace(/{width}/g,vimeo_width).replace(/{height}/g,r.height).replace(/{path}/g,movie);break;case"quicktime":(r=o(movie_width,movie_height)).height+=15,r.contentHeight+=15,r.containerHeight+=15,toInject=settings.quicktime_markup.replace(/{width}/g,r.width).replace(/{height}/g,r.height).replace(/{wmode}/g,settings.wmode).replace(/{path}/g,pp_images[set_position]).replace(/{autoplay}/g,settings.autoplay);break;case"flash":r=o(movie_width,movie_height),flash_vars=pp_images[set_position],flash_vars=flash_vars.substring(pp_images[set_position].indexOf("flashvars")+10,pp_images[set_position].length),filename=pp_images[set_position],filename=filename.substring(0,filename.indexOf("?")),toInject=settings.flash_markup.replace(/{width}/g,r.width).replace(/{height}/g,r.height).replace(/{wmode}/g,settings.wmode).replace(/{path}/g,filename+"?"+flash_vars);break;case"iframe":r=o(movie_width,movie_height),frame_url=pp_images[set_position],frame_url=frame_url.substr(0,frame_url.indexOf("iframe")-1),toInject=settings.iframe_markup.replace(/{width}/g,r.width).replace(/{height}/g,r.height).replace(/{path}/g,frame_url);break;case"ajax":doresize=!1,r=o(movie_width,movie_height),doresize=!0,skipInjection=!0,w.get(pp_images[set_position],function(t){toInject=settings.inline_markup.replace(/{content}/g,t),$pp_pic_holder.find("#pp_full_res")[0].innerHTML=toInject,i()});break;case"custom":r=o(movie_width,movie_height),toInject=settings.custom_markup;break;case"inline":myClone=w(pp_images[set_position]).clone().append('<br clear="all" />').css({width:settings.default_width}).wrapInner('<div id="pp_full_res"><div class="pp_inline"></div></div>').appendTo(w("body")).show(),doresize=!1,r=o(w(myClone).width(),w(myClone).height()),doresize=!0,w(myClone).remove(),toInject=settings.inline_markup.replace(/{content}/g,w(pp_images[set_position]).html())}imgPreloader||skipInjection||($pp_pic_holder.find("#pp_full_res")[0].innerHTML=toInject,i())}),!1},w.prettyPhoto.changePage=function(t){currentGalleryPage=0,"previous"==t?(set_position--,set_position<0&&(set_position=w(pp_images).size()-1)):"next"==t?(set_position++,set_position>w(pp_images).size()-1&&(set_position=0)):set_position=t,rel_index=set_position,doresize||(doresize=!0),settings.allow_expand&&w(".pp_contract").removeClass("pp_contract").addClass("pp_expand"),p(function(){w.prettyPhoto.open()})},w.prettyPhoto.changeGalleryPage=function(t){"next"==t?(currentGalleryPage++,currentGalleryPage>totalPage&&(currentGalleryPage=0)):"previous"==t?(currentGalleryPage--,currentGalleryPage<0&&(currentGalleryPage=totalPage)):currentGalleryPage=t,slide_speed="next"==t||"previous"==t?settings.animation_speed:0,slide_to=currentGalleryPage*itemsPerPage*itemWidth,$pp_gallery.find("ul").animate({left:-slide_to},slide_speed)},w.prettyPhoto.startSlideshow=function(){void 0===m?($pp_pic_holder.find(".pp_play").unbind("click").removeClass("pp_play").addClass("pp_pause").click(function(){return w.prettyPhoto.stopSlideshow(),!1}),m=setInterval(w.prettyPhoto.startSlideshow,settings.slideshow)):w.prettyPhoto.changePage("next")},w.prettyPhoto.stopSlideshow=function(){$pp_pic_holder.find(".pp_pause").unbind("click").removeClass("pp_pause").addClass("pp_play").click(function(){return w.prettyPhoto.startSlideshow(),!1}),clearInterval(m),m=void 0},w.prettyPhoto.close=function(){$pp_overlay.is(":animated")||(w.prettyPhoto.stopSlideshow(),$pp_pic_holder.stop().find("object,embed").css("visibility","hidden"),w("div.pp_pic_holder,div.ppt,.pp_fade").fadeOut(settings.animation_speed,function(){w(this).remove()}),$pp_overlay.fadeOut(settings.animation_speed,function(){settings.hideflash&&w("object,embed,iframe[src*=youtube],iframe[src*=vimeo]").css("visibility","visible"),w(this).remove(),w(window).unbind("scroll.prettyphoto"),-1!==location.href.indexOf("#prettyPhoto")&&(location.hash="prettyPhoto"),settings.callback(),doresize=!0,d=!1,delete settings}))},!pp_alreadyInitialized&&b()&&(pp_alreadyInitialized=!0,hashIndex=b(),hashRel=hashIndex,hashIndex=hashIndex.substring(hashIndex.indexOf("/")+1,hashIndex.length-1),hashRel=hashRel.substring(0,hashRel.indexOf("/")),setTimeout(function(){w("a["+e.hook+"^='"+hashRel+"']:eq("+hashIndex+")").trigger("click")},50)),this.unbind("click.prettyphoto").bind("click.prettyphoto",w.prettyPhoto.initialize)}}(jQuery);var pp_alreadyInitialized=!1;
$(document).ready(function(){"use strict";$("#intro-slider").owlCarousel({navigation:!0,slideSpeed:600,pagination:!1,singleItem:!0,transitionStyle:"fadeUp",autoPlay:4e3}),$("#m-blog").owlCarousel({itemsCustom:[[0,1],[450,1],[600,2],[700,2],[1e3,2],[1200,2],[1400,2],[1600,2]],navigation:!1}),$("#testimonials").owlCarousel({navigation:!0,pagination:!1,slideSpeed:300,paginationSpeed:400,singleItem:!0}),$("#m-clients").owlCarousel({itemsCustom:[[0,1],[450,2],[600,2],[700,2],[1e3,3],[1200,4],[1400,4],[1600,4]],navigation:!0,pagination:!1}),$("#myTab a").click(function(i){i.preventDefault(),$(this).tab("show")}),$("#verticalTab").easyResponsiveTabs({type:"vertical",width:"auto",fit:!0}),$("#flickr").jflickrfeed({limit:5,qstrings:{id:"52617155@N08"},itemTemplate:'<li><a href="{{image_b}}"><img src="{{image_s}}" alt="{{title}}" /></a></li>'}),$(".m-hide").click(function(){$(".m-header").slideToggle()}),$(".dropdown").click(function(){$(".v-dropdown").slideToggle()}),$("#m-team").flexslider({controlsContainer:".m-team",controlNav:!0,manualControls:".mt-nav li"}),$("a[class^='prettyPhoto']").prettyPhoto({theme:"pp_default"}),$("html").niceScroll(),$(".m-hide i").click(function(){$(".m-hide i").hasClass("fa-plus-circle")?$(this).removeClass("fa-plus-circle").addClass("fa-minus-circle"):$(this).removeClass("fa-minus-circle").addClass("fa-plus-circle")})}),jQuery(document).ready(function(i){i(".round-skills").appear(function(){options={img1:"img/c1.png",img2:"img/c3.png",speed:10,percent:10,limit:42,onInit:function(){console.log("init")},onProgress:function(i){},onComplete:function(i){console.log("complete",i)}},myplugin=i("#skill1").cprogress(options)},{accX:0,accY:-200}),i(".round-skills").appear(function(){options={img1:"img/c1.png",img2:"img/c3.png",speed:10,percent:10,limit:68,onInit:function(){console.log("init")},onProgress:function(i){},onComplete:function(i){console.log("complete",i)}},myplugin=i("#skill2").cprogress(options)},{accX:0,accY:-200}),i(".round-skills").appear(function(){options={img1:"img/c1.png",img2:"img/c3.png",speed:10,percent:10,limit:30,onInit:function(){console.log("init")},onProgress:function(i){},onComplete:function(i){console.log("complete",i)}},myplugin=i("#skill3").cprogress(options)},{accX:0,accY:-200}),i(".flat-skills").appear(function(){i("#f-skill1 span").attr("style","width:95%;"),i("#f-skill2 span").attr("style","width:39%;"),i("#f-skill3 span").attr("style","width:75%;"),i("#f-skill4 span").attr("style","width:23%;"),i("#f-skill5 span").attr("style","width:52%;")},{accX:0,accY:-200})}),739<$(window).width()&&($("[data-animated]").each(function(){$(this).addClass("animated-out")}),$(window).scroll(function(){var n=$(window).scrollTop(),e=$(window).height();$(".animated-out[data-animated]").each(function(){var i=$(this);if(n+e>=i.offset().top){var t=parseInt(i.attr("data-animated"));isNaN(t)||0===t?i.removeClass("animated-out").addClass("animated-in"):setTimeout(function(){i.removeClass("animated-out").addClass("animated-in")},t)}})}));
!function(y){"use strict";var f={};(y.respond=f).update=function(){};var s=[],n=function(){var t=!1;try{t=new y.XMLHttpRequest}catch(e){t=new y.ActiveXObject("Microsoft.XMLHTTP")}return function(){return t}}(),e=function(e,t){var a=n();a&&(a.open("GET",e,!0),a.onreadystatechange=function(){4!==a.readyState||200!==a.status&&304!==a.status||t(a.responseText)},4!==a.readyState&&a.send(null))};if(f.ajax=e,f.queue=s,f.regex={media:/@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,keyframes:/@(?:\-(?:o|moz|webkit)\-)?keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]*\}/gi,urls:/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,findStyles:/@media *([^\{]+)\{([\S\s]+?)$/,only:/(only\s+)?([a-zA-Z]+)\s?/,minw:/\([\s]*min\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/,maxw:/\([\s]*max\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/},f.mediaQueriesSupported=y.matchMedia&&null!==y.matchMedia("only all")&&y.matchMedia("only all").matches,!f.mediaQueriesSupported){var x,v,E,w=y.document,S=w.documentElement,T=[],$=[],z=[],i={},b=w.getElementsByTagName("head")[0]||S,o=w.getElementsByTagName("base")[0],C=b.getElementsByTagName("link"),R=function(){var e,t=w.createElement("div"),a=w.body,n=S.style.fontSize,r=a&&a.style.fontSize,s=!1;return t.style.cssText="position:absolute;font-size:1em;width:1em",a||((a=s=w.createElement("body")).style.background="none"),S.style.fontSize="100%",a.style.fontSize="100%",a.appendChild(t),s&&S.insertBefore(a,S.firstChild),e=t.offsetWidth,s?S.removeChild(a):a.removeChild(t),S.style.fontSize=n,r&&(a.style.fontSize=r),e=E=parseFloat(e)},O=function(e){var t="clientWidth",a=S[t],n="CSS1Compat"===w.compatMode&&a||w.body[t]||a,r={},s=C[C.length-1],i=(new Date).getTime();if(e&&x&&i-x<30)return y.clearTimeout(v),void(v=y.setTimeout(O,30));for(var o in x=i,T)if(T.hasOwnProperty(o)){var l=T[o],m=l.minw,d=l.maxw,u=null===m,h=null===d;m&&(m=parseFloat(m)*(-1<m.indexOf("em")?E||R():1)),d&&(d=parseFloat(d)*(-1<d.indexOf("em")?E||R():1)),l.hasquery&&(u&&h||!(u||m<=n)||!(h||n<=d))||(r[l.media]||(r[l.media]=[]),r[l.media].push($[l.rules]))}for(var f in z)z.hasOwnProperty(f)&&z[f]&&z[f].parentNode===b&&b.removeChild(z[f]);for(var c in z.length=0,r)if(r.hasOwnProperty(c)){var p=w.createElement("style"),g=r[c].join("\n");p.type="text/css",p.media=c,b.insertBefore(p,s.nextSibling),p.styleSheet?p.styleSheet.cssText=g:p.appendChild(w.createTextNode(g)),z.push(p)}},l=function(e,t,a){var n=e.replace(f.regex.keyframes,"").match(f.regex.media),r=n&&n.length||0,s=function(e){return e.replace(f.regex.urls,"$1"+t+"$2$3")},i=!r&&a;(t=t.substring(0,t.lastIndexOf("/"))).length&&(t+="/"),i&&(r=1);for(var o=0;o<r;o++){var l,m,d,u;i?(l=a,$.push(s(e))):(l=n[o].match(f.regex.findStyles)&&RegExp.$1,$.push(RegExp.$2&&s(RegExp.$2))),u=(d=l.split(",")).length;for(var h=0;h<u;h++)m=d[h],T.push({media:m.split("(")[0].match(f.regex.only)&&RegExp.$2||"all",rules:$.length-1,hasquery:-1<m.indexOf("("),minw:m.match(f.regex.minw)&&parseFloat(RegExp.$1)+(RegExp.$2||""),maxw:m.match(f.regex.maxw)&&parseFloat(RegExp.$1)+(RegExp.$2||"")})}O()},m=function(){if(s.length){var t=s.shift();e(t.href,function(e){l(e,t.href,t.media),i[t.href]=!0,y.setTimeout(function(){m()},0)})}},t=function(){for(var e=0;e<C.length;e++){var t=C[e],a=t.href,n=t.media,r=t.rel&&"stylesheet"===t.rel.toLowerCase();a&&r&&!i[a]&&(t.styleSheet&&t.styleSheet.rawCssText?(l(t.styleSheet.rawCssText,a,n),i[a]=!0):(/^([a-zA-Z:]*\/\/)/.test(a)||o)&&a.replace(RegExp.$1,"").split("/")[0]!==y.location.host||("//"===a.substring(0,2)&&(a=y.location.protocol+a),s.push({href:a,media:n})))}m()};t(),f.update=t,f.getEmValue=R,y.addEventListener?y.addEventListener("resize",a,!1):y.attachEvent&&y.attachEvent("onresize",a)}function a(){O(!0)}}(this);
!function(u){u.fn.extend({easyResponsiveTabs:function(o){var t=o=u.extend({type:"default",width:"auto",fit:!0,closed:!1,activate:function(){}},o),d=t.type,l=t.fit,p=t.width,b="vertical",v="accordion",f=window.location.hash,h=!(!window.history||!history.replaceState);u(this).bind("tabactivate",function(t,a){"function"==typeof o.activate&&o.activate.call(a,t)}),this.each(function(){var e,n=u(this),t=n.find("ul.resp-tabs-list"),r=n.attr("id");n.find("ul.resp-tabs-list li").addClass("resp-tab-item"),n.css({display:"block",width:p}),n.find(".resp-tabs-container > div").addClass("resp-tab-content"),function(){d==b&&n.addClass("resp-vtabs");1==l&&n.css({width:"100%",margin:"0px"});d==v&&(n.addClass("resp-easy-accordion"),n.find(".resp-tabs-list").css("display","none"))}(),n.find(".resp-tab-content").before("<h2 class='resp-accordion' role='tab'><span class='resp-arrow'></span></h2>");var s=0;n.find(".resp-accordion").each(function(){e=u(this);var t=n.find(".resp-tab-item:eq("+s+")"),a=n.find(".resp-accordion:eq("+s+")");a.append(t.html()),a.data(t.data()),e.attr("aria-controls","tab_item-"+s),s++});var a=0;n.find(".resp-tab-item").each(function(){$tabItem=u(this),$tabItem.attr("aria-controls","tab_item-"+a),$tabItem.attr("role","tab");var t=0;n.find(".resp-tab-content").each(function(){u(this).attr("aria-labelledby","tab_item-"+t),t++}),a++});var i=0;if(""!=f){var c=f.match(new RegExp(r+"([0-9]+)"));null!==c&&2===c.length&&(i=parseInt(c[1],10)-1,a<i&&(i=0))}u(n.find(".resp-tab-item")[i]).addClass("resp-tab-active"),!0===o.closed||"accordion"===o.closed&&!t.is(":visible")||"tabs"===o.closed&&t.is(":visible")?u(n.find(".resp-tab-content")[i]).addClass("resp-tab-content-active resp-accordion-closed"):(u(n.find(".resp-accordion")[i]).addClass("resp-tab-active"),u(n.find(".resp-tab-content")[i]).addClass("resp-tab-content-active").attr("style","display:block")),n.find("[role=tab]").each(function(){u(this).click(function(){var t=u(this),a=t.attr("aria-controls");if(t.hasClass("resp-accordion")&&t.hasClass("resp-tab-active"))return n.find(".resp-tab-content-active").slideUp("",function(){u(this).addClass("resp-accordion-closed")}),t.removeClass("resp-tab-active"),!1;if(!t.hasClass("resp-tab-active")&&t.hasClass("resp-accordion")?(n.find(".resp-tab-active").removeClass("resp-tab-active"),n.find(".resp-tab-content-active").slideUp().removeClass("resp-tab-content-active resp-accordion-closed"),n.find("[aria-controls="+a+"]").addClass("resp-tab-active"),n.find(".resp-tab-content[aria-labelledby = "+a+"]").slideDown().addClass("resp-tab-content-active")):(n.find(".resp-tab-active").removeClass("resp-tab-active"),n.find(".resp-tab-content-active").removeAttr("style").removeClass("resp-tab-content-active").removeClass("resp-accordion-closed"),n.find("[aria-controls="+a+"]").addClass("resp-tab-active"),n.find(".resp-tab-content[aria-labelledby = "+a+"]").addClass("resp-tab-content-active").attr("style","display:block")),t.trigger("tabactivate",t),h){var e=window.location.hash,s=r+(parseInt(a.substring(9),10)+1).toString();if(""!=e){var i=new RegExp(r+"[0-9]+");s=null!=e.match(i)?e.replace(i,s):e+"|"+s}else s="#"+s;history.replaceState(null,null,s)}})}),u(window).resize(function(){n.find(".resp-accordion-closed").removeAttr("style")})})}})}(jQuery);
!function(C){C.flexslider=function(p,e){var m=C(p),v=C.extend({},C.flexslider.defaults,e),d=v.namespace,u="ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,i=u?"touchend":"click",f="vertical"===v.direction,g=v.reverse,h=0<v.itemWidth,S="fade"===v.animation,x=""!==v.asNavFor,y={};C.data(p,"flexslider",m),y={init:function(){m.animating=!1,m.currentSlide=v.startAt,m.animatingTo=m.currentSlide,m.atEnd=0===m.currentSlide||m.currentSlide===m.last,m.containerSelector=v.selector.substr(0,v.selector.search(" ")),m.slides=C(v.selector,m),m.container=C(m.containerSelector,m),m.count=m.slides.length,m.syncExists=0<C(v.sync).length,"slide"===v.animation&&(v.animation="swing"),m.prop=f?"top":"marginLeft",m.args={},m.manualPause=!1,m.transitions=!v.video&&!S&&v.useCSS&&function(){var e=document.createElement("div"),t=["perspectiveProperty","WebkitPerspective","MozPerspective","OPerspective","msPerspective"];for(var n in t)if(void 0!==e.style[t[n]])return m.pfx=t[n].replace("Perspective","").toLowerCase(),m.prop="-"+m.pfx+"-transform",!0;return!1}(),""!==v.controlsContainer&&(m.controlsContainer=0<C(v.controlsContainer).length&&C(v.controlsContainer)),""!==v.manualControls&&(m.manualControls=0<C(v.manualControls).length&&C(v.manualControls)),v.randomize&&(m.slides.sort(function(){return Math.round(Math.random())-.5}),m.container.empty().append(m.slides)),m.doMath(),x&&y.asNav.setup(),m.setup("init"),v.controlNav&&y.controlNav.setup(),v.directionNav&&y.directionNav.setup(),v.keyboard&&(1===C(m.containerSelector).length||v.multipleKeyboard)&&C(document).bind("keyup",function(e){var t=e.keyCode;if(!m.animating&&(39===t||37===t)){var n=39===t?m.getTarget("next"):37===t&&m.getTarget("prev");m.flexAnimate(n,v.pauseOnAction)}}),v.mousewheel&&m.bind("mousewheel",function(e,t,n,a){e.preventDefault();var i=t<0?m.getTarget("next"):m.getTarget("prev");m.flexAnimate(i,v.pauseOnAction)}),v.pausePlay&&y.pausePlay.setup(),v.slideshow&&(v.pauseOnHover&&m.hover(function(){m.manualPlay||m.manualPause||m.pause()},function(){m.manualPause||m.manualPlay||m.play()}),0<v.initDelay?setTimeout(m.play,v.initDelay):m.play()),u&&v.touch&&y.touch(),(!S||S&&v.smoothHeight)&&C(window).bind("resize focus",y.resize),setTimeout(function(){v.start(m)},200)},asNav:{setup:function(){m.asNav=!0,m.animatingTo=Math.floor(m.currentSlide/m.move),m.currentItem=m.currentSlide,m.slides.removeClass(d+"active-slide").eq(m.currentItem).addClass(d+"active-slide"),m.slides.click(function(e){e.preventDefault();var t=C(this),n=t.index();C(v.asNavFor).data("flexslider").animating||t.hasClass("active")||(m.direction=m.currentItem<n?"next":"prev",m.flexAnimate(n,v.pauseOnAction,!1,!0,!0))})}},controlNav:{setup:function(){m.manualControls?y.controlNav.setupManual():y.controlNav.setupPaging()},setupPaging:function(){var e,t="thumbnails"===v.controlNav?"control-thumbs":"control-paging",n=1;if(m.controlNavScaffold=C('<ol class="'+d+"control-nav "+d+t+'"></ol>'),1<m.pagingCount)for(var a=0;a<m.pagingCount;a++)e="thumbnails"===v.controlNav?'<img src="'+m.slides.eq(a).attr("data-thumb")+'"/>':"<a>"+n+"</a>",m.controlNavScaffold.append("<li>"+e+"</li>"),n++;m.controlsContainer?C(m.controlsContainer).append(m.controlNavScaffold):m.append(m.controlNavScaffold),y.controlNav.set(),y.controlNav.active(),m.controlNavScaffold.delegate("a, img",i,function(e){e.preventDefault();var t=C(this),n=m.controlNav.index(t);t.hasClass(d+"active")||(m.direction=n>m.currentSlide?"next":"prev",m.flexAnimate(n,v.pauseOnAction))}),u&&m.controlNavScaffold.delegate("a","click touchstart",function(e){e.preventDefault()})},setupManual:function(){m.controlNav=m.manualControls,y.controlNav.active(),m.controlNav.live(i,function(e){e.preventDefault();var t=C(this),n=m.controlNav.index(t);t.hasClass(d+"active")||(n>m.currentSlide?m.direction="next":m.direction="prev",m.flexAnimate(n,v.pauseOnAction))}),u&&m.controlNav.live("click touchstart",function(e){e.preventDefault()})},set:function(){var e="thumbnails"===v.controlNav?"img":"a";m.controlNav=C("."+d+"control-nav li "+e,m.controlsContainer?m.controlsContainer:m)},active:function(){m.controlNav.removeClass(d+"active").eq(m.animatingTo).addClass(d+"active")},update:function(e,t){1<m.pagingCount&&"add"===e?m.controlNavScaffold.append(C("<li><a>"+m.count+"</a></li>")):1===m.pagingCount?m.controlNavScaffold.find("li").remove():m.controlNav.eq(t).closest("li").remove(),y.controlNav.set(),1<m.pagingCount&&m.pagingCount!==m.controlNav.length?m.update(t,e):y.controlNav.active()}},directionNav:{setup:function(){var e=C('<ul class="'+d+'direction-nav"><li><a class="'+d+'prev" href="#">'+v.prevText+'</a></li><li><a class="'+d+'next" href="#">'+v.nextText+"</a></li></ul>");m.controlsContainer?(C(m.controlsContainer).append(e),m.directionNav=C("."+d+"direction-nav li a",m.controlsContainer)):(m.append(e),m.directionNav=C("."+d+"direction-nav li a",m)),y.directionNav.update(),m.directionNav.bind(i,function(e){e.preventDefault();var t=C(this).hasClass(d+"next")?m.getTarget("next"):m.getTarget("prev");m.flexAnimate(t,v.pauseOnAction)}),u&&m.directionNav.bind("click touchstart",function(e){e.preventDefault()})},update:function(){var e=d+"disabled";1===m.pagingCount?m.directionNav.addClass(e):v.animationLoop?m.directionNav.removeClass(e):0===m.animatingTo?m.directionNav.removeClass(e).filter("."+d+"prev").addClass(e):m.animatingTo===m.last?m.directionNav.removeClass(e).filter("."+d+"next").addClass(e):m.directionNav.removeClass(e)}},pausePlay:{setup:function(){var e=C('<div class="'+d+'pauseplay"><a></a></div>');m.controlsContainer?(m.controlsContainer.append(e),m.pausePlay=C("."+d+"pauseplay a",m.controlsContainer)):(m.append(e),m.pausePlay=C("."+d+"pauseplay a",m)),y.pausePlay.update(v.slideshow?d+"pause":d+"play"),m.pausePlay.bind(i,function(e){e.preventDefault(),C(this).hasClass(d+"pause")?(m.manualPause=!0,m.manualPlay=!1,m.pause()):(m.manualPause=!1,m.manualPlay=!0,m.play())}),u&&m.pausePlay.bind("click touchstart",function(e){e.preventDefault()})},update:function(e){"play"===e?m.pausePlay.removeClass(d+"pause").addClass(d+"play").text(v.playText):m.pausePlay.removeClass(d+"play").addClass(d+"pause").text(v.pauseText)}},touch:function(){var a,i,o,s,r,l,c=!1;function d(e){r=f?a-e.touches[0].pageY:a-e.touches[0].pageX,(!(c=f?Math.abs(r)<Math.abs(e.touches[0].pageX-i):Math.abs(r)<Math.abs(e.touches[0].pageY-i))||500<Number(new Date)-l)&&(e.preventDefault(),!S&&m.transitions&&(v.animationLoop||(r/=0===m.currentSlide&&r<0||m.currentSlide===m.last&&0<r?Math.abs(r)/s+2:1),m.setProps(o+r,"setTouch")))}function u(e){if(p.removeEventListener("touchmove",d,!1),m.animatingTo===m.currentSlide&&!c&&null!==r){var t=g?-r:r,n=0<t?m.getTarget("next"):m.getTarget("prev");m.canAdvance(n)&&(Number(new Date)-l<550&&50<Math.abs(t)||Math.abs(t)>s/2)?m.flexAnimate(n,v.pauseOnAction):S||m.flexAnimate(m.currentSlide,v.pauseOnAction,!0)}p.removeEventListener("touchend",u,!1),o=r=i=a=null}p.addEventListener("touchstart",function(e){m.animating?e.preventDefault():1===e.touches.length&&(m.pause(),s=f?m.h:m.w,l=Number(new Date),o=h&&g&&m.animatingTo===m.last?0:h&&g?m.limit-(m.itemW+v.itemMargin)*m.move*m.animatingTo:h&&m.currentSlide===m.last?m.limit:h?(m.itemW+v.itemMargin)*m.move*m.currentSlide:g?(m.last-m.currentSlide+m.cloneOffset)*s:(m.currentSlide+m.cloneOffset)*s,a=f?e.touches[0].pageY:e.touches[0].pageX,i=f?e.touches[0].pageX:e.touches[0].pageY,p.addEventListener("touchmove",d,!1),p.addEventListener("touchend",u,!1))},!1)},resize:function(){!m.animating&&m.is(":visible")&&(h||m.doMath(),S?y.smoothHeight():h?(m.slides.width(m.computedW),m.update(m.pagingCount),m.setProps()):f?(m.viewport.height(m.h),m.setProps(m.h,"setTotal")):(v.smoothHeight&&y.smoothHeight(),m.newSlides.width(m.computedW),m.setProps(m.computedW,"setTotal")))},smoothHeight:function(e){if(!f||S){var t=S?m:m.viewport;e?t.animate({height:m.slides.eq(m.animatingTo).height()},e):t.height(m.slides.eq(m.animatingTo).height())}},sync:function(e){var t=C(v.sync).data("flexslider"),n=m.animatingTo;switch(e){case"animate":t.flexAnimate(n,v.pauseOnAction,!1,!0);break;case"play":t.playing||t.asNav||t.play();break;case"pause":t.pause()}}},m.flexAnimate=function(e,t,n,a,i){if(x&&1===m.pagingCount&&(m.direction=m.currentItem<e?"next":"prev"),!m.animating&&(m.canAdvance(e,i)||n)&&m.is(":visible")){if(x&&a){var o=C(v.asNavFor).data("flexslider");if(m.atEnd=0===e||e===m.count-1,o.flexAnimate(e,!0,!1,!0,i),m.direction=m.currentItem<e?"next":"prev",o.direction=m.direction,Math.ceil((e+1)/m.visible)-1===m.currentSlide||0===e)return m.currentItem=e,m.slides.removeClass(d+"active-slide").eq(e).addClass(d+"active-slide"),!1;m.currentItem=e,m.slides.removeClass(d+"active-slide").eq(e).addClass(d+"active-slide"),e=Math.floor(e/m.visible)}if(m.animating=!0,m.animatingTo=e,v.before(m),t&&m.pause(),m.syncExists&&!i&&y.sync("animate"),v.controlNav&&y.controlNav.active(),h||m.slides.removeClass(d+"active-slide").eq(e).addClass(d+"active-slide"),m.atEnd=0===e||e===m.last,v.directionNav&&y.directionNav.update(),e===m.last&&(v.end(m),v.animationLoop||m.pause()),S)u?(m.slides.eq(m.currentSlide).css({opacity:0,zIndex:1}),m.slides.eq(e).css({opacity:1,zIndex:2}),m.slides.unbind("webkitTransitionEnd transitionend"),m.slides.eq(m.currentSlide).bind("webkitTransitionEnd transitionend",function(){v.after(m)}),m.animating=!1,m.currentSlide=m.animatingTo):(m.slides.eq(m.currentSlide).fadeOut(v.animationSpeed,v.easing),m.slides.eq(e).fadeIn(v.animationSpeed,v.easing,m.wrapup));else{var s,r,l,c=f?m.slides.filter(":first").height():m.computedW;h?(s=v.itemWidth>m.w?2*v.itemMargin:v.itemMargin,r=(l=(m.itemW+s)*m.move*m.animatingTo)>m.limit&&1!==m.visible?m.limit:l):r=0===m.currentSlide&&e===m.count-1&&v.animationLoop&&"next"!==m.direction?g?(m.count+m.cloneOffset)*c:0:m.currentSlide===m.last&&0===e&&v.animationLoop&&"prev"!==m.direction?g?0:(m.count+1)*c:g?(m.count-1-e+m.cloneOffset)*c:(e+m.cloneOffset)*c,m.setProps(r,"",v.animationSpeed),m.transitions?(v.animationLoop&&m.atEnd||(m.animating=!1,m.currentSlide=m.animatingTo),m.container.unbind("webkitTransitionEnd transitionend"),m.container.bind("webkitTransitionEnd transitionend",function(){m.wrapup(c)})):m.container.animate(m.args,v.animationSpeed,v.easing,function(){m.wrapup(c)})}v.smoothHeight&&y.smoothHeight(v.animationSpeed)}},m.wrapup=function(e){S||h||(0===m.currentSlide&&m.animatingTo===m.last&&v.animationLoop?m.setProps(e,"jumpEnd"):m.currentSlide===m.last&&0===m.animatingTo&&v.animationLoop&&m.setProps(e,"jumpStart")),m.animating=!1,m.currentSlide=m.animatingTo,v.after(m)},m.animateSlides=function(){m.animating||m.flexAnimate(m.getTarget("next"))},m.pause=function(){clearInterval(m.animatedSlides),m.playing=!1,v.pausePlay&&y.pausePlay.update("play"),m.syncExists&&y.sync("pause")},m.play=function(){m.animatedSlides=setInterval(m.animateSlides,v.slideshowSpeed),m.playing=!0,v.pausePlay&&y.pausePlay.update("pause"),m.syncExists&&y.sync("play")},m.canAdvance=function(e,t){var n=x?m.pagingCount-1:m.last;return!!t||(!(!x||m.currentItem!==m.count-1||0!==e||"prev"!==m.direction)||(!x||0!==m.currentItem||e!==m.pagingCount-1||"next"===m.direction)&&(!(e===m.currentSlide&&!x)&&(!!v.animationLoop||(!m.atEnd||0!==m.currentSlide||e!==n||"next"===m.direction)&&(!m.atEnd||m.currentSlide!==n||0!==e||"next"!==m.direction))))},m.getTarget=function(e){return"next"===(m.direction=e)?m.currentSlide===m.last?0:m.currentSlide+1:0===m.currentSlide?m.last:m.currentSlide-1},m.setProps=function(e,t,n){var a,i=(a=e||(m.itemW+v.itemMargin)*m.move*m.animatingTo,-1*function(){if(h)return"setTouch"===t?e:g&&m.animatingTo===m.last?0:g?m.limit-(m.itemW+v.itemMargin)*m.move*m.animatingTo:m.animatingTo===m.last?m.limit:a;switch(t){case"setTotal":return g?(m.count-1-m.currentSlide+m.cloneOffset)*e:(m.currentSlide+m.cloneOffset)*e;case"setTouch":return e;case"jumpEnd":return g?e:m.count*e;case"jumpStart":return g?m.count*e:e;default:return e}}()+"px");m.transitions&&(i=f?"translate3d(0,"+i+",0)":"translate3d("+i+",0,0)",n=void 0!==n?n/1e3+"s":"0s",m.container.css("-"+m.pfx+"-transition-duration",n)),m.args[m.prop]=i,(m.transitions||void 0===n)&&m.container.css(m.args)},m.setup=function(e){var t,n;S?(m.slides.css({width:"100%",float:"left",marginRight:"-100%",position:"relative"}),"init"===e&&(u?m.slides.css({opacity:0,display:"block",webkitTransition:"opacity "+v.animationSpeed/1e3+"s ease",zIndex:1}).eq(m.currentSlide).css({opacity:1,zIndex:2}):m.slides.eq(m.currentSlide).fadeIn(v.animationSpeed,v.easing)),v.smoothHeight&&y.smoothHeight()):("init"===e&&(m.viewport=C('<div class="'+d+'viewport"></div>').css({overflow:"hidden",position:"relative"}).appendTo(m).append(m.container),m.cloneCount=0,m.cloneOffset=0,g&&(n=C.makeArray(m.slides).reverse(),m.slides=C(n),m.container.empty().append(m.slides))),v.animationLoop&&!h&&(m.cloneCount=2,m.cloneOffset=1,"init"!==e&&m.container.find(".clone").remove(),m.container.append(m.slides.first().clone().addClass("clone")).prepend(m.slides.last().clone().addClass("clone"))),m.newSlides=C(v.selector,m),t=g?m.count-1-m.currentSlide+m.cloneOffset:m.currentSlide+m.cloneOffset,f&&!h?(m.container.height(200*(m.count+m.cloneCount)+"%").css("position","absolute").width("100%"),setTimeout(function(){m.newSlides.css({display:"block"}),m.doMath(),m.viewport.height(m.h),m.setProps(t*m.h,"init")},"init"===e?100:0)):(m.container.width(200*(m.count+m.cloneCount)+"%"),m.setProps(t*m.computedW,"init"),setTimeout(function(){m.doMath(),m.newSlides.css({width:m.computedW,float:"left",display:"block"}),v.smoothHeight&&y.smoothHeight()},"init"===e?100:0)));h||m.slides.removeClass(d+"active-slide").eq(m.currentSlide).addClass(d+"active-slide")},m.doMath=function(){var e=m.slides.first(),t=v.itemMargin,n=v.minItems,a=v.maxItems;m.w=m.width(),m.h=e.height(),m.boxPadding=e.outerWidth()-e.width(),h?(m.itemT=v.itemWidth+t,m.minW=n?n*m.itemT:m.w,m.maxW=a?a*m.itemT:m.w,m.itemW=m.minW>m.w?(m.w-t*n)/n:m.maxW<m.w?(m.w-t*a)/a:v.itemWidth>m.w?m.w:v.itemWidth,m.visible=Math.floor(m.w/(m.itemW+t)),m.move=0<v.move&&v.move<m.visible?v.move:m.visible,m.pagingCount=Math.ceil((m.count-m.visible)/m.move+1),m.last=m.pagingCount-1,m.limit=1===m.pagingCount?0:v.itemWidth>m.w?(m.itemW+2*t)*m.count-m.w-t:(m.itemW+t)*m.count-m.w-t):(m.itemW=m.w,m.pagingCount=m.count,m.last=m.count-1),m.computedW=m.itemW-m.boxPadding},m.update=function(e,t){m.doMath(),h||(e<m.currentSlide?m.currentSlide+=1:e<=m.currentSlide&&0!==e&&(m.currentSlide-=1),m.animatingTo=m.currentSlide),v.controlNav&&!m.manualControls&&("add"===t&&!h||m.pagingCount>m.controlNav.length?y.controlNav.update("add"):("remove"===t&&!h||m.pagingCount<m.controlNav.length)&&(h&&m.currentSlide>m.last&&(m.currentSlide-=1,m.animatingTo-=1),y.controlNav.update("remove",m.last))),v.directionNav&&y.directionNav.update()},m.addSlide=function(e,t){var n=C(e);m.count+=1,m.last=m.count-1,f&&g?void 0!==t?m.slides.eq(m.count-t).after(n):m.container.prepend(n):void 0!==t?m.slides.eq(t).before(n):m.container.append(n),m.update(t,"add"),m.slides=C(v.selector+":not(.clone)",m),m.setup(),v.added(m)},m.removeSlide=function(e){var t=isNaN(e)?m.slides.index(C(e)):e;m.count-=1,m.last=m.count-1,isNaN(e)?C(e,m.slides).remove():f&&g?m.slides.eq(m.last).remove():m.slides.eq(e).remove(),m.doMath(),m.update(t,"remove"),m.slides=C(v.selector+":not(.clone)",m),m.setup(),v.removed(m)},y.init()},C.flexslider.defaults={namespace:"flex-",selector:".slides > li",animation:"fade",easing:"swing",direction:"horizontal",reverse:!1,animationLoop:!0,smoothHeight:!1,startAt:0,slideshow:!0,slideshowSpeed:7e3,animationSpeed:600,initDelay:0,randomize:!1,pauseOnAction:!0,pauseOnHover:!1,useCSS:!0,touch:!0,video:!1,controlNav:!0,directionNav:!0,prevText:"Previous",nextText:"Next",keyboard:!0,multipleKeyboard:!1,mousewheel:!1,pausePlay:!1,pauseText:"Pause",playText:"Play",controlsContainer:"",manualControls:"",sync:"",asNavFor:"",itemWidth:0,itemMargin:0,minItems:0,maxItems:0,move:0,start:function(){},before:function(){},after:function(){},end:function(){},added:function(){},removed:function(){}},C.fn.flexslider=function(a){if(void 0===a&&(a={}),"object"==typeof a)return this.each(function(){var e=C(this),t=a.selector?a.selector:".slides > li",n=e.find(t);1===n.length?(n.fadeIn(400),a.start&&a.start(e)):null==e.data("flexslider")&&new C.flexslider(this,a)});var e=C(this).data("flexslider");switch(a){case"play":e.play();break;case"pause":e.pause();break;case"next":e.flexAnimate(e.getTarget("next"),!0);break;case"prev":case"previous":e.flexAnimate(e.getTarget("prev"),!0);break;default:"number"==typeof a&&e.flexAnimate(a,!0)}}}(jQuery);
"function"!=typeof Object.create&&(Object.create=function(t){function e(){}return e.prototype=t,new e}),function(l,p,m){var o={init:function(t,e){var o=this;o.$elem=l(e),o.options=l.extend({},l.fn.owlCarousel.options,o.$elem.data(),t),o.userOptions=t,o.loadContent()},loadContent:function(){var t,i=this;"function"==typeof i.options.beforeInit&&i.options.beforeInit.apply(this,[i.$elem]),"string"==typeof i.options.jsonPath?(t=i.options.jsonPath,l.getJSON(t,function(t){var e,o="";if("function"==typeof i.options.jsonSuccess)i.options.jsonSuccess.apply(this,[t]);else{for(e in t.owl)t.owl.hasOwnProperty(e)&&(o+=t.owl[e].item);i.$elem.html(o)}i.logIn()})):i.logIn()},logIn:function(){var t=this;t.$elem.data("owl-originalStyles",t.$elem.attr("style")).data("owl-originalClasses",t.$elem.attr("class")),t.$elem.css({opacity:0}),t.orignalItems=t.options.items,t.checkBrowser(),t.wrapperWidth=0,t.checkVisible=null,t.setVars()},setVars:function(){var t=this;if(0===t.$elem.children().length)return!1;t.baseClass(),t.eventTypes(),t.$userItems=t.$elem.children(),t.itemsAmount=t.$userItems.length,t.wrapItems(),t.$owlItems=t.$elem.find(".owl-item"),t.$owlWrapper=t.$elem.find(".owl-wrapper"),t.playDirection="next",t.prevItem=0,t.prevArr=[0],t.currentItem=0,t.customEvents(),t.onStartup()},onStartup:function(){var t=this;t.updateItems(),t.calculateAll(),t.buildControls(),t.updateControls(),t.response(),t.moveEvents(),t.stopOnHover(),t.owlStatus(),!1!==t.options.transitionStyle&&t.transitionTypes(t.options.transitionStyle),!0===t.options.autoPlay&&(t.options.autoPlay=5e3),t.play(),t.$elem.find(".owl-wrapper").css("display","block"),t.$elem.is(":visible")?t.$elem.css("opacity",1):t.watchVisibility(),t.onstartup=!1,t.eachMoveUpdate(),"function"==typeof t.options.afterInit&&t.options.afterInit.apply(this,[t.$elem])},eachMoveUpdate:function(){var t=this;!0===t.options.lazyLoad&&t.lazyLoad(),!0===t.options.autoHeight&&t.autoHeight(),t.onVisibleItems(),"function"==typeof t.options.afterAction&&t.options.afterAction.apply(this,[t.$elem])},updateVars:function(){var t=this;"function"==typeof t.options.beforeUpdate&&t.options.beforeUpdate.apply(this,[t.$elem]),t.watchVisibility(),t.updateItems(),t.calculateAll(),t.updatePosition(),t.updateControls(),t.eachMoveUpdate(),"function"==typeof t.options.afterUpdate&&t.options.afterUpdate.apply(this,[t.$elem])},reload:function(){var t=this;p.setTimeout(function(){t.updateVars()},0)},watchVisibility:function(){var t=this;if(!1!==t.$elem.is(":visible"))return!1;t.$elem.css({opacity:0}),p.clearInterval(t.autoPlayInterval),p.clearInterval(t.checkVisible),t.checkVisible=p.setInterval(function(){t.$elem.is(":visible")&&(t.reload(),t.$elem.animate({opacity:1},200),p.clearInterval(t.checkVisible))},500)},wrapItems:function(){var t=this;t.$userItems.wrapAll('<div class="owl-wrapper">').wrap('<div class="owl-item"></div>'),t.$elem.find(".owl-wrapper").wrap('<div class="owl-wrapper-outer">'),t.wrapperOuter=t.$elem.find(".owl-wrapper-outer"),t.$elem.css("display","block")},baseClass:function(){var t=this,e=t.$elem.hasClass(t.options.baseClass),o=t.$elem.hasClass(t.options.theme);e||t.$elem.addClass(t.options.baseClass),o||t.$elem.addClass(t.options.theme)},updateItems:function(){var t,e,o=this;if(!1===o.options.responsive)return!1;if(!0===o.options.singleItem)return o.options.items=o.orignalItems=1,o.options.itemsCustom=!1,o.options.itemsDesktop=!1,o.options.itemsDesktopSmall=!1,o.options.itemsTablet=!1,o.options.itemsTabletSmall=!1,o.options.itemsMobile=!1;if((t=l(o.options.responsiveBaseWidth).width())>(o.options.itemsDesktop[0]||o.orignalItems)&&(o.options.items=o.orignalItems),!1!==o.options.itemsCustom)for(o.options.itemsCustom.sort(function(t,e){return t[0]-e[0]}),e=0;e<o.options.itemsCustom.length;e+=1)o.options.itemsCustom[e][0]<=t&&(o.options.items=o.options.itemsCustom[e][1]);else t<=o.options.itemsDesktop[0]&&!1!==o.options.itemsDesktop&&(o.options.items=o.options.itemsDesktop[1]),t<=o.options.itemsDesktopSmall[0]&&!1!==o.options.itemsDesktopSmall&&(o.options.items=o.options.itemsDesktopSmall[1]),t<=o.options.itemsTablet[0]&&!1!==o.options.itemsTablet&&(o.options.items=o.options.itemsTablet[1]),t<=o.options.itemsTabletSmall[0]&&!1!==o.options.itemsTabletSmall&&(o.options.items=o.options.itemsTabletSmall[1]),t<=o.options.itemsMobile[0]&&!1!==o.options.itemsMobile&&(o.options.items=o.options.itemsMobile[1]);o.options.items>o.itemsAmount&&!0===o.options.itemsScaleUp&&(o.options.items=o.itemsAmount)},response:function(){var t,e,o=this;if(!0!==o.options.responsive)return!1;e=l(p).width(),o.resizer=function(){l(p).width()!==e&&(!1!==o.options.autoPlay&&p.clearInterval(o.autoPlayInterval),p.clearTimeout(t),t=p.setTimeout(function(){e=l(p).width(),o.updateVars()},o.options.responsiveRefreshRate))},l(p).resize(o.resizer)},updatePosition:function(){var t=this;t.jumpTo(t.currentItem),!1!==t.options.autoPlay&&t.checkAp()},appendItemsSizes:function(){var o=this,i=0,s=o.itemsAmount-o.options.items;o.$owlItems.each(function(t){var e=l(this);e.css({width:o.itemWidth}).data("owl-item",Number(t)),t%o.options.items!=0&&t!==s||s<t||(i+=1),e.data("owl-roundPages",i)})},appendWrapperSizes:function(){var t=this,e=t.$owlItems.length*t.itemWidth;t.$owlWrapper.css({width:2*e,left:0}),t.appendItemsSizes()},calculateAll:function(){var t=this;t.calculateWidth(),t.appendWrapperSizes(),t.loops(),t.max()},calculateWidth:function(){var t=this;t.itemWidth=Math.round(t.$elem.width()/t.options.items)},max:function(){var t=this,e=-1*(t.itemsAmount*t.itemWidth-t.options.items*t.itemWidth);return t.options.items>t.itemsAmount?(e=t.maximumItem=0,t.maximumPixels=0):(t.maximumItem=t.itemsAmount-t.options.items,t.maximumPixels=e),e},min:function(){return 0},loops:function(){var t,e,o=this,i=0,s=0;for(o.positionsInArray=[0],o.pagesInArray=[],t=0;t<o.itemsAmount;t+=1)s+=o.itemWidth,o.positionsInArray.push(-s),!0===o.options.scrollPerPage&&(e=l(o.$owlItems[t]).data("owl-roundPages"))!==i&&(o.pagesInArray[i]=o.positionsInArray[t],i=e)},buildControls:function(){var t=this;!0!==t.options.navigation&&!0!==t.options.pagination||(t.owlControls=l('<div class="owl-controls"/>').toggleClass("clickable",!t.browser.isTouch).appendTo(t.$elem)),!0===t.options.pagination&&t.buildPagination(),!0===t.options.navigation&&t.buildButtons()},buildButtons:function(){var e=this,t=l('<div class="owl-buttons"/>');e.owlControls.append(t),e.buttonPrev=l("<div/>",{class:"owl-prev",html:e.options.navigationText[0]||""}),e.buttonNext=l("<div/>",{class:"owl-next",html:e.options.navigationText[1]||""}),t.append(e.buttonPrev).append(e.buttonNext),t.on("touchstart.owlControls mousedown.owlControls",'div[class^="owl"]',function(t){t.preventDefault()}),t.on("touchend.owlControls mouseup.owlControls",'div[class^="owl"]',function(t){t.preventDefault(),l(this).hasClass("owl-next")?e.next():e.prev()})},buildPagination:function(){var e=this;e.paginationWrapper=l('<div class="owl-pagination"/>'),e.owlControls.append(e.paginationWrapper),e.paginationWrapper.on("touchend.owlControls mouseup.owlControls",".owl-page",function(t){t.preventDefault(),Number(l(this).data("owl-page"))!==e.currentItem&&e.goTo(Number(l(this).data("owl-page")),!0)})},updatePagination:function(){var t,e,o,i,s,n,a=this;if(!1===a.options.pagination)return!1;for(a.paginationWrapper.html(""),t=0,e=a.itemsAmount-a.itemsAmount%a.options.items,i=0;i<a.itemsAmount;i+=1)i%a.options.items==0&&(t+=1,e===i&&(o=a.itemsAmount-a.options.items),s=l("<div/>",{class:"owl-page"}),n=l("<span></span>",{text:!0===a.options.paginationNumbers?t:"",class:!0===a.options.paginationNumbers?"owl-numbers":""}),s.append(n),s.data("owl-page",e===i?o:i),s.data("owl-roundPages",t),a.paginationWrapper.append(s));a.checkPagination()},checkPagination:function(){var t=this;if(!1===t.options.pagination)return!1;t.paginationWrapper.find(".owl-page").each(function(){l(this).data("owl-roundPages")===l(t.$owlItems[t.currentItem]).data("owl-roundPages")&&(t.paginationWrapper.find(".owl-page").removeClass("active"),l(this).addClass("active"))})},checkNavigation:function(){var t=this;if(!1===t.options.navigation)return!1;!1===t.options.rewindNav&&(0===t.currentItem&&0===t.maximumItem?(t.buttonPrev.addClass("disabled"),t.buttonNext.addClass("disabled")):0===t.currentItem&&0!==t.maximumItem?(t.buttonPrev.addClass("disabled"),t.buttonNext.removeClass("disabled")):t.currentItem===t.maximumItem?(t.buttonPrev.removeClass("disabled"),t.buttonNext.addClass("disabled")):0!==t.currentItem&&t.currentItem!==t.maximumItem&&(t.buttonPrev.removeClass("disabled"),t.buttonNext.removeClass("disabled")))},updateControls:function(){var t=this;t.updatePagination(),t.checkNavigation(),t.owlControls&&(t.options.items>=t.itemsAmount?t.owlControls.hide():t.owlControls.show())},destroyControls:function(){this.owlControls&&this.owlControls.remove()},next:function(t){var e=this;if(e.isTransition)return!1;if(e.currentItem+=!0===e.options.scrollPerPage?e.options.items:1,e.currentItem>e.maximumItem+(!0===e.options.scrollPerPage?e.options.items-1:0)){if(!0!==e.options.rewindNav)return e.currentItem=e.maximumItem,!1;e.currentItem=0,t="rewind"}e.goTo(e.currentItem,t)},prev:function(t){var e=this;if(e.isTransition)return!1;if(!0===e.options.scrollPerPage&&0<e.currentItem&&e.currentItem<e.options.items?e.currentItem=0:e.currentItem-=!0===e.options.scrollPerPage?e.options.items:1,e.currentItem<0){if(!0!==e.options.rewindNav)return e.currentItem=0,!1;e.currentItem=e.maximumItem,t="rewind"}e.goTo(e.currentItem,t)},goTo:function(t,e,o){var i,s=this;return!s.isTransition&&("function"==typeof s.options.beforeMove&&s.options.beforeMove.apply(this,[s.$elem]),t>=s.maximumItem?t=s.maximumItem:t<=0&&(t=0),s.currentItem=s.owl.currentItem=t,!1!==s.options.transitionStyle&&"drag"!==o&&1===s.options.items&&!0===s.browser.support3d?(s.swapSpeed(0),!0===s.browser.support3d?s.transition3d(s.positionsInArray[t]):s.css2slide(s.positionsInArray[t],1),s.afterGo(),s.singleItemTransition(),!1):(i=s.positionsInArray[t],!0===s.browser.support3d?(!(s.isCss3Finish=!1)===e?(s.swapSpeed("paginationSpeed"),p.setTimeout(function(){s.isCss3Finish=!0},s.options.paginationSpeed)):"rewind"===e?(s.swapSpeed(s.options.rewindSpeed),p.setTimeout(function(){s.isCss3Finish=!0},s.options.rewindSpeed)):(s.swapSpeed("slideSpeed"),p.setTimeout(function(){s.isCss3Finish=!0},s.options.slideSpeed)),s.transition3d(i)):!0===e?s.css2slide(i,s.options.paginationSpeed):"rewind"===e?s.css2slide(i,s.options.rewindSpeed):s.css2slide(i,s.options.slideSpeed),void s.afterGo()))},jumpTo:function(t){var e=this;"function"==typeof e.options.beforeMove&&e.options.beforeMove.apply(this,[e.$elem]),t>=e.maximumItem||-1===t?t=e.maximumItem:t<=0&&(t=0),e.swapSpeed(0),!0===e.browser.support3d?e.transition3d(e.positionsInArray[t]):e.css2slide(e.positionsInArray[t],1),e.currentItem=e.owl.currentItem=t,e.afterGo()},afterGo:function(){var t=this;t.prevArr.push(t.currentItem),t.prevItem=t.owl.prevItem=t.prevArr[t.prevArr.length-2],t.prevArr.shift(0),t.prevItem!==t.currentItem&&(t.checkPagination(),t.checkNavigation(),t.eachMoveUpdate(),!1!==t.options.autoPlay&&t.checkAp()),"function"==typeof t.options.afterMove&&t.prevItem!==t.currentItem&&t.options.afterMove.apply(this,[t.$elem])},stop:function(){this.apStatus="stop",p.clearInterval(this.autoPlayInterval)},checkAp:function(){"stop"!==this.apStatus&&this.play()},play:function(){var t=this;if(!(t.apStatus="play")===t.options.autoPlay)return!1;p.clearInterval(t.autoPlayInterval),t.autoPlayInterval=p.setInterval(function(){t.next(!0)},t.options.autoPlay)},swapSpeed:function(t){var e=this;"slideSpeed"===t?e.$owlWrapper.css(e.addCssSpeed(e.options.slideSpeed)):"paginationSpeed"===t?e.$owlWrapper.css(e.addCssSpeed(e.options.paginationSpeed)):"string"!=typeof t&&e.$owlWrapper.css(e.addCssSpeed(t))},addCssSpeed:function(t){return{"-webkit-transition":"all "+t+"ms ease","-moz-transition":"all "+t+"ms ease","-o-transition":"all "+t+"ms ease",transition:"all "+t+"ms ease"}},removeTransition:function(){return{"-webkit-transition":"","-moz-transition":"","-o-transition":"",transition:""}},doTranslate:function(t){return{"-webkit-transform":"translate3d("+t+"px, 0px, 0px)","-moz-transform":"translate3d("+t+"px, 0px, 0px)","-o-transform":"translate3d("+t+"px, 0px, 0px)","-ms-transform":"translate3d("+t+"px, 0px, 0px)",transform:"translate3d("+t+"px, 0px,0px)"}},transition3d:function(t){this.$owlWrapper.css(this.doTranslate(t))},css2move:function(t){this.$owlWrapper.css({left:t})},css2slide:function(t,e){var o=this;o.isCssFinish=!1,o.$owlWrapper.stop(!0,!0).animate({left:t},{duration:e||o.options.slideSpeed,complete:function(){o.isCssFinish=!0}})},checkBrowser:function(){var t,e,o,i,s="translate3d(0px, 0px, 0px)",n=m.createElement("div");n.style.cssText="  -moz-transform:"+s+"; -ms-transform:"+s+"; -o-transform:"+s+"; -webkit-transform:"+s+"; transform:"+s,t=/translate3d\(0px, 0px, 0px\)/g,o=null!==(e=n.style.cssText.match(t))&&1===e.length,i="ontouchstart"in p||p.navigator.msMaxTouchPoints,this.browser={support3d:o,isTouch:i}},moveEvents:function(){!1===this.options.mouseDrag&&!1===this.options.touchDrag||(this.gestures(),this.disabledEvents())},eventTypes:function(){var t=this,e=["s","e","x"];t.ev_types={},!0===t.options.mouseDrag&&!0===t.options.touchDrag?e=["touchstart.owl mousedown.owl","touchmove.owl mousemove.owl","touchend.owl touchcancel.owl mouseup.owl"]:!1===t.options.mouseDrag&&!0===t.options.touchDrag?e=["touchstart.owl","touchmove.owl","touchend.owl touchcancel.owl"]:!0===t.options.mouseDrag&&!1===t.options.touchDrag&&(e=["mousedown.owl","mousemove.owl","mouseup.owl"]),t.ev_types.start=e[0],t.ev_types.move=e[1],t.ev_types.end=e[2]},disabledEvents:function(){this.$elem.on("dragstart.owl",function(t){t.preventDefault()}),this.$elem.on("mousedown.disableTextSelect",function(t){return l(t.target).is("input, textarea, select, option")})},gestures:function(){var n=this,a={offsetX:0,offsetY:0,baseElWidth:0,relativePos:0,position:null,minSwipe:null,maxSwipe:null,sliding:null,dargging:null,targetElement:null};function s(t){if(void 0!==t.touches)return{x:t.touches[0].pageX,y:t.touches[0].pageY};if(void 0===t.touches){if(void 0!==t.pageX)return{x:t.pageX,y:t.pageY};if(void 0===t.pageX)return{x:t.clientX,y:t.clientY}}}function r(t){"on"===t?(l(m).on(n.ev_types.move,e),l(m).on(n.ev_types.end,o)):"off"===t&&(l(m).off(n.ev_types.move),l(m).off(n.ev_types.end))}function e(t){var e,o,i=t.originalEvent||t||p.event;n.newPosX=s(i).x-a.offsetX,n.newPosY=s(i).y-a.offsetY,n.newRelativeX=n.newPosX-a.relativePos,"function"==typeof n.options.startDragging&&!0!==a.dragging&&0!==n.newRelativeX&&(a.dragging=!0,n.options.startDragging.apply(n,[n.$elem])),(8<n.newRelativeX||n.newRelativeX<-8)&&!0===n.browser.isTouch&&(void 0!==i.preventDefault?i.preventDefault():i.returnValue=!1,a.sliding=!0),(10<n.newPosY||n.newPosY<-10)&&!1===a.sliding&&l(m).off("touchmove.owl"),e=function(){return n.newRelativeX/5},o=function(){return n.maximumPixels+n.newRelativeX/5},n.newPosX=Math.max(Math.min(n.newPosX,e()),o()),!0===n.browser.support3d?n.transition3d(n.newPosX):n.css2move(n.newPosX)}function o(t){var e,o,i,s=t.originalEvent||t||p.event;s.target=s.target||s.srcElement,!(a.dragging=!1)!==n.browser.isTouch&&n.$owlWrapper.removeClass("grabbing"),n.newRelativeX<0?n.dragDirection=n.owl.dragDirection="left":n.dragDirection=n.owl.dragDirection="right",0!==n.newRelativeX&&(e=n.getNewPosition(),n.goTo(e,!1,"drag"),a.targetElement===s.target&&!0!==n.browser.isTouch&&(l(s.target).on("click.disable",function(t){t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),l(t.target).off("click.disable")}),i=(o=l._data(s.target,"events").click).pop(),o.splice(0,0,i))),r("off")}n.isCssFinish=!0,n.$elem.on(n.ev_types.start,".owl-wrapper",function(t){var e,o=t.originalEvent||t||p.event;if(3===o.which)return!1;if(!(n.itemsAmount<=n.options.items)){if(!1===n.isCssFinish&&!n.options.dragBeforeAnimFinish)return!1;if(!1===n.isCss3Finish&&!n.options.dragBeforeAnimFinish)return!1;!1!==n.options.autoPlay&&p.clearInterval(n.autoPlayInterval),!0===n.browser.isTouch||n.$owlWrapper.hasClass("grabbing")||n.$owlWrapper.addClass("grabbing"),n.newPosX=0,n.newRelativeX=0,l(this).css(n.removeTransition()),e=l(this).position(),a.relativePos=e.left,a.offsetX=s(o).x-e.left,a.offsetY=s(o).y-e.top,r("on"),a.sliding=!1,a.targetElement=o.target||o.srcElement}})},getNewPosition:function(){var t=this,e=t.closestItem();return e>t.maximumItem?(t.currentItem=t.maximumItem,e=t.maximumItem):0<=t.newPosX&&(e=0,t.currentItem=0),e},closestItem:function(){var o=this,i=!0===o.options.scrollPerPage?o.pagesInArray:o.positionsInArray,s=o.newPosX,n=null;return l.each(i,function(t,e){s-o.itemWidth/20>i[t+1]&&s-o.itemWidth/20<e&&"left"===o.moveDirection()?(n=e,!0===o.options.scrollPerPage?o.currentItem=l.inArray(n,o.positionsInArray):o.currentItem=t):s+o.itemWidth/20<e&&s+o.itemWidth/20>(i[t+1]||i[t]-o.itemWidth)&&"right"===o.moveDirection()&&(!0===o.options.scrollPerPage?(n=i[t+1]||i[i.length-1],o.currentItem=l.inArray(n,o.positionsInArray)):(n=i[t+1],o.currentItem=t+1))}),o.currentItem},moveDirection:function(){var t;return this.newRelativeX<0?(t="right",this.playDirection="next"):(t="left",this.playDirection="prev"),t},customEvents:function(){var o=this;o.$elem.on("owl.next",function(){o.next()}),o.$elem.on("owl.prev",function(){o.prev()}),o.$elem.on("owl.play",function(t,e){o.options.autoPlay=e,o.play(),o.hoverStatus="play"}),o.$elem.on("owl.stop",function(){o.stop(),o.hoverStatus="stop"}),o.$elem.on("owl.goTo",function(t,e){o.goTo(e)}),o.$elem.on("owl.jumpTo",function(t,e){o.jumpTo(e)})},stopOnHover:function(){var t=this;!0===t.options.stopOnHover&&!0!==t.browser.isTouch&&!1!==t.options.autoPlay&&(t.$elem.on("mouseover",function(){t.stop()}),t.$elem.on("mouseout",function(){"stop"!==t.hoverStatus&&t.play()}))},lazyLoad:function(){var t,e,o,i,s=this;if(!1===s.options.lazyLoad)return!1;for(t=0;t<s.itemsAmount;t+=1)"loaded"!==(e=l(s.$owlItems[t])).data("owl-loaded")&&(o=e.data("owl-item"),"string"==typeof(i=e.find(".lazyOwl")).data("src")?(void 0===e.data("owl-loaded")&&(i.hide(),e.addClass("loading").data("owl-loaded","checked")),(!0!==s.options.lazyFollow||o>=s.currentItem)&&o<s.currentItem+s.options.items&&i.length&&s.lazyPreload(e,i)):e.data("owl-loaded","loaded"))},lazyPreload:function(t,e){var o,i=this,s=0;function n(){t.data("owl-loaded","loaded").removeClass("loading"),e.removeAttr("data-src"),"fade"===i.options.lazyEffect?e.fadeIn(400):e.show(),"function"==typeof i.options.afterLazyLoad&&i.options.afterLazyLoad.apply(this,[i.$elem])}"DIV"===e.prop("tagName")?(e.css("background-image","url("+e.data("src")+")"),o=!0):e[0].src=e.data("src"),function t(){s+=1,i.completeImg(e.get(0))||!0===o?n():s<=100?p.setTimeout(t,100):n()}()},autoHeight:function(){var e,o=this,i=l(o.$owlItems[o.currentItem]).find("img");function s(){var t=l(o.$owlItems[o.currentItem]).height();o.wrapperOuter.css("height",t+"px"),o.wrapperOuter.hasClass("autoHeight")||p.setTimeout(function(){o.wrapperOuter.addClass("autoHeight")},0)}void 0!==i.get(0)?(e=0,function t(){e+=1,o.completeImg(i.get(0))?s():e<=100?p.setTimeout(t,100):o.wrapperOuter.css("height","")}()):s()},completeImg:function(t){return!!t.complete&&("undefined"===typeof t.naturalWidth||0!==t.naturalWidth)},onVisibleItems:function(){var t,e=this;for(!0===e.options.addClassActive&&e.$owlItems.removeClass("active"),e.visibleItems=[],t=e.currentItem;t<e.currentItem+e.options.items;t+=1)e.visibleItems.push(t),!0===e.options.addClassActive&&l(e.$owlItems[t]).addClass("active");e.owl.visibleItems=e.visibleItems},transitionTypes:function(t){this.outClass="owl-"+t+"-out",this.inClass="owl-"+t+"-in"},singleItemTransition:function(){var t,e=this,o=e.outClass,i=e.inClass,s=e.$owlItems.eq(e.currentItem),n=e.$owlItems.eq(e.prevItem),a=Math.abs(e.positionsInArray[e.currentItem])+e.positionsInArray[e.prevItem],r=Math.abs(e.positionsInArray[e.currentItem])+e.itemWidth/2,l="webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend";e.isTransition=!0,e.$owlWrapper.addClass("owl-origin").css({"-webkit-transform-origin":r+"px","-moz-perspective-origin":r+"px","perspective-origin":r+"px"}),n.css((t=a,{position:"relative",left:t+"px"})).addClass(o).on(l,function(){e.endPrev=!0,n.off(l),e.clearTransStyle(n,o)}),s.addClass(i).on(l,function(){e.endCurrent=!0,s.off(l),e.clearTransStyle(s,i)})},clearTransStyle:function(t,e){var o=this;t.css({position:"",left:""}).removeClass(e),o.endPrev&&o.endCurrent&&(o.$owlWrapper.removeClass("owl-origin"),o.endPrev=!1,o.endCurrent=!1,o.isTransition=!1)},owlStatus:function(){var t=this;t.owl={userOptions:t.userOptions,baseElement:t.$elem,userItems:t.$userItems,owlItems:t.$owlItems,currentItem:t.currentItem,prevItem:t.prevItem,visibleItems:t.visibleItems,isTouch:t.browser.isTouch,browser:t.browser,dragDirection:t.dragDirection}},clearEvents:function(){this.$elem.off(".owl owl mousedown.disableTextSelect"),l(m).off(".owl owl"),l(p).off("resize",this.resizer)},unWrap:function(){var t=this;0!==t.$elem.children().length&&(t.$owlWrapper.unwrap(),t.$userItems.unwrap().unwrap(),t.owlControls&&t.owlControls.remove()),t.clearEvents(),t.$elem.attr("style",t.$elem.data("owl-originalStyles")||"").attr("class",t.$elem.data("owl-originalClasses"))},destroy:function(){this.stop(),p.clearInterval(this.checkVisible),this.unWrap(),this.$elem.removeData()},reinit:function(t){var e=l.extend({},this.userOptions,t);this.unWrap(),this.init(e,this.$elem)},addItem:function(t,e){var o,i=this;return!!t&&(0===i.$elem.children().length?(i.$elem.append(t),i.setVars(),!1):(i.unWrap(),(o=void 0===e||-1===e?-1:e)>=i.$userItems.length||-1===o?i.$userItems.eq(-1).after(t):i.$userItems.eq(o).before(t),void i.setVars()))},removeItem:function(t){var e;if(0===this.$elem.children().length)return!1;e=void 0===t||-1===t?-1:t,this.unWrap(),this.$userItems.eq(e).remove(),this.setVars()}};l.fn.owlCarousel=function(e){return this.each(function(){if(!0===l(this).data("owl-init"))return!1;l(this).data("owl-init",!0);var t=Object.create(o);t.init(e,this),l.data(this,"owlCarousel",t)})},l.fn.owlCarousel.options={items:5,itemsCustom:!1,itemsDesktop:[1199,4],itemsDesktopSmall:[979,3],itemsTablet:[768,2],itemsTabletSmall:!1,itemsMobile:[479,1],singleItem:!1,itemsScaleUp:!1,slideSpeed:200,paginationSpeed:800,rewindSpeed:1e3,autoPlay:!1,stopOnHover:!1,navigation:!1,navigationText:["prev","next"],rewindNav:!0,scrollPerPage:!1,pagination:!0,paginationNumbers:!1,responsive:!0,responsiveRefreshRate:200,responsiveBaseWidth:p,baseClass:"owl-carousel",theme:"owl-theme",lazyLoad:!1,lazyFollow:!0,lazyEffect:"fade",autoHeight:!1,jsonPath:!1,jsonSuccess:!1,dragBeforeAnimFinish:!0,mouseDrag:!0,touchDrag:!0,addClassActive:!1,transitionStyle:!1,beforeUpdate:!1,afterUpdate:!1,beforeInit:!1,afterInit:!1,beforeMove:!1,afterMove:!1,afterAction:!1,startDragging:!1,afterLazyLoad:!1}}(jQuery,window,document);
eval(function(e,t,n,r,i,s){if(i=function(e){return(e<62?"":i(parseInt(e/62)))+(35<(e%=62)?String.fromCharCode(e+29):e.toString(36))},!"".replace(/^/,String)){for(;n--;)s[i(n)]=r[n]||i(n);r=[function(e){return s[e]}],i=function(){return"\\w+"},n=1}for(;n--;)r[n]&&(e=e.replace(new RegExp("\\b"+i(n)+"\\b","g"),r[n]));return e}('7(A 3c.3q!=="9"){3c.3q=9(e){9 t(){}t.5S=e;p 5R t}}(9(e,t,n){h r={1N:9(t,n){h r=c;r.$k=e(n);r.6=e.4M({},e.37.2B.6,r.$k.v(),t);r.2A=t;r.4L()},4L:9(){9 r(e){h n,r="";7(A t.6.33==="9"){t.6.33.R(c,[e])}l{1A(n 38 e.d){7(e.d.5M(n)){r+=e.d[n].1K}}t.$k.2y(r)}t.3t()}h t=c,n;7(A t.6.2H==="9"){t.6.2H.R(c,[t.$k])}7(A t.6.2O==="2Y"){n=t.6.2O;e.5K(n,r)}l{t.3t()}},3t:9(){h e=c;e.$k.v("d-4I",e.$k.2x("2w")).v("d-4F",e.$k.2x("H"));e.$k.z({2u:0});e.2t=e.6.q;e.4E();e.5v=0;e.1X=14;e.23()},23:9(){h e=c;7(e.$k.25().N===0){p b}e.1M();e.4C();e.$S=e.$k.25();e.E=e.$S.N;e.4B();e.$G=e.$k.17(".d-1K");e.$K=e.$k.17(".d-1p");e.3u="U";e.13=0;e.26=[0];e.m=0;e.4A();e.4z()},4z:9(){h e=c;e.2V();e.2W();e.4t();e.30();e.4r();e.4q();e.2p();e.4o();7(e.6.2o!==b){e.4n(e.6.2o)}7(e.6.O===j){e.6.O=4Q}e.19();e.$k.17(".d-1p").z("4i","4h");7(!e.$k.2m(":3n")){e.3o()}l{e.$k.z("2u",1)}e.5O=b;e.2l();7(A e.6.3s==="9"){e.6.3s.R(c,[e.$k])}},2l:9(){h e=c;7(e.6.1Z===j){e.1Z()}7(e.6.1B===j){e.1B()}e.4g();7(A e.6.3w==="9"){e.6.3w.R(c,[e.$k])}},3x:9(){h e=c;7(A e.6.3B==="9"){e.6.3B.R(c,[e.$k])}e.3o();e.2V();e.2W();e.4f();e.30();e.2l();7(A e.6.3D==="9"){e.6.3D.R(c,[e.$k])}},3F:9(){h e=c;t.1c(9(){e.3x()},0)},3o:9(){h e=c;7(e.$k.2m(":3n")===b){e.$k.z({2u:0});t.18(e.1C);t.18(e.1X)}l{p b}e.1X=t.4d(9(){7(e.$k.2m(":3n")){e.3F();e.$k.4b({2u:1},2M);t.18(e.1X)}},5x)},4B:9(){h e=c;e.$S.5n(\'<L H="d-1p">\').4a(\'<L H="d-1K"></L>\');e.$k.17(".d-1p").4a(\'<L H="d-1p-49">\');e.1H=e.$k.17(".d-1p-49");e.$k.z("4i","4h")},1M:9(){h e=c,t=e.$k.1I(e.6.1M),n=e.$k.1I(e.6.2i);7(!t){e.$k.I(e.6.1M)}7(!n){e.$k.I(e.6.2i)}},2V:9(){h t=c,n,r;7(t.6.2Z===b){p b}7(t.6.48===j){t.6.q=t.2t=1;t.6.1h=b;t.6.1s=b;t.6.1O=b;t.6.22=b;t.6.1Q=b;t.6.1R=b;p b}n=e(t.6.47).1f();7(n>(t.6.1s[0]||t.2t)){t.6.q=t.2t}7(t.6.1h!==b){t.6.1h.5g(9(e,t){p e[0]-t[0]});1A(r=0;r<t.6.1h.N;r+=1){7(t.6.1h[r][0]<=n){t.6.q=t.6.1h[r][1]}}}l{7(n<=t.6.1s[0]&&t.6.1s!==b){t.6.q=t.6.1s[1]}7(n<=t.6.1O[0]&&t.6.1O!==b){t.6.q=t.6.1O[1]}7(n<=t.6.22[0]&&t.6.22!==b){t.6.q=t.6.22[1]}7(n<=t.6.1Q[0]&&t.6.1Q!==b){t.6.q=t.6.1Q[1]}7(n<=t.6.1R[0]&&t.6.1R!==b){t.6.q=t.6.1R[1]}}7(t.6.q>t.E&&t.6.46===j){t.6.q=t.E}},4r:9(){h n=c,r,i;7(n.6.2Z!==j){p b}i=e(t).1f();n.3d=9(){7(e(t).1f()!==i){7(n.6.O!==b){t.18(n.1C)}t.5d(r);r=t.1c(9(){i=e(t).1f();n.3x()},n.6.45)}};e(t).44(n.3d)},4f:9(){h e=c;e.2g(e.m);7(e.6.O!==b){e.3j()}},43:9(){h t=c,n=0,r=t.E-t.6.q;t.$G.2f(9(i){h s=e(c);s.z({1f:t.M}).v("d-1K",3p(i));7(i%t.6.q===0||i===r){7(!(i>r)){n+=1}}s.v("d-24",n)})},42:9(){h e=c,t=e.$G.N*e.M;e.$K.z({1f:t*2,T:0});e.43()},2W:9(){h e=c;e.40();e.42();e.3Z();e.3v()},40:9(){h e=c;e.M=1F.4O(e.$k.1f()/e.6.q)},3v:9(){h e=c,t=(e.E*e.M-e.6.q*e.M)*-1;7(e.6.q>e.E){e.D=0;t=0;e.3z=0}l{e.D=e.E-e.6.q;e.3z=t}p t},3Y:9(){p 0},3Z:9(){h t=c,n=0,r=0,i,s,o;t.J=[0];t.3E=[];1A(i=0;i<t.E;i+=1){r+=t.M;t.J.2D(-r);7(t.6.12===j){s=e(t.$G[i]);o=s.v("d-24");7(o!==n){t.3E[n]=t.J[i];n=o}}}},4t:9(){h t=c;7(t.6.2a===j||t.6.1v===j){t.B=e(\'<L H="d-5A"/>\').5m("5l",!t.F.15).5c(t.$k)}7(t.6.1v===j){t.3T()}7(t.6.2a===j){t.3S()}},3S:9(){h t=c,n=e(\'<L H="d-4U"/>\');t.B.1o(n);t.1u=e("<L/>",{"H":"d-1n",2y:t.6.2U[0]||""});t.1q=e("<L/>",{"H":"d-U",2y:t.6.2U[1]||""});n.1o(t.1u).1o(t.1q);n.w("2X.B 21.B",\'L[H^="d"]\',9(e){e.1l()});n.w("2n.B 28.B",\'L[H^="d"]\',9(n){n.1l();7(e(c).1I("d-U")){t.U()}l{t.1n()}})},3T:9(){h t=c;t.1k=e(\'<L H="d-1v"/>\');t.B.1o(t.1k);t.1k.w("2n.B 28.B",".d-1j",9(n){n.1l();7(3p(e(c).v("d-1j"))!==t.m){t.1g(3p(e(c).v("d-1j")),j)}})},3P:9(){h t=c,n,r,i,s,o,u;7(t.6.1v===b){p b}t.1k.2y("");n=0;r=t.E-t.E%t.6.q;1A(s=0;s<t.E;s+=1){7(s%t.6.q===0){n+=1;7(r===s){i=t.E-t.6.q}o=e("<L/>",{"H":"d-1j"});u=e("<3N></3N>",{4R:t.6.39===j?n:"","H":t.6.39===j?"d-59":""});o.1o(u);o.v("d-1j",r===s?i:s);o.v("d-24",n);t.1k.1o(o)}}t.35()},35:9(){h t=c;7(t.6.1v===b){p b}t.1k.17(".d-1j").2f(9(){7(e(c).v("d-24")===e(t.$G[t.m]).v("d-24")){t.1k.17(".d-1j").Z("2d");e(c).I("2d")}})},3e:9(){h e=c;7(e.6.2a===b){p b}7(e.6.2e===b){7(e.m===0&&e.D===0){e.1u.I("1b");e.1q.I("1b")}l 7(e.m===0&&e.D!==0){e.1u.I("1b");e.1q.Z("1b")}l 7(e.m===e.D){e.1u.Z("1b");e.1q.I("1b")}l 7(e.m!==0&&e.m!==e.D){e.1u.Z("1b");e.1q.Z("1b")}}},30:9(){h e=c;e.3P();e.3e();7(e.B){7(e.6.q>=e.E){e.B.3K()}l{e.B.3J()}}},55:9(){h e=c;7(e.B){e.B.3k()}},U:9(e){h t=c;7(t.1E){p b}t.m+=t.6.12===j?t.6.q:1;7(t.m>t.D+(t.6.12===j?t.6.q-1:0)){7(t.6.2e===j){t.m=0;e="2k"}l{t.m=t.D;p b}}t.1g(t.m,e)},1n:9(e){h t=c;7(t.1E){p b}7(t.6.12===j&&t.m>0&&t.m<t.6.q){t.m=0}l{t.m-=t.6.12===j?t.6.q:1}7(t.m<0){7(t.6.2e===j){t.m=t.D;e="2k"}l{t.m=0;p b}}t.1g(t.m,e)},1g:9(e,n,r){h i=c,s;7(i.1E){p b}7(A i.6.1Y==="9"){i.6.1Y.R(c,[i.$k])}7(e>=i.D){e=i.D}l 7(e<=0){e=0}i.m=i.d.m=e;7(i.6.2o!==b&&r!=="4e"&&i.6.q===1&&i.F.1x===j){i.1t(0);7(i.F.1x===j){i.1L(i.J[e])}l{i.1r(i.J[e],1)}i.2r();i.4l();p b}s=i.J[e];7(i.F.1x===j){i.1T=b;7(n===j){i.1t("1w");t.1c(9(){i.1T=j},i.6.1w)}l 7(n==="2k"){i.1t(i.6.2v);t.1c(9(){i.1T=j},i.6.2v)}l{i.1t("1m");t.1c(9(){i.1T=j},i.6.1m)}i.1L(s)}l{7(n===j){i.1r(s,i.6.1w)}l 7(n==="2k"){i.1r(s,i.6.2v)}l{i.1r(s,i.6.1m)}}i.2r()},2g:9(e){h t=c;7(A t.6.1Y==="9"){t.6.1Y.R(c,[t.$k])}7(e>=t.D||e===-1){e=t.D}l 7(e<=0){e=0}t.1t(0);7(t.F.1x===j){t.1L(t.J[e])}l{t.1r(t.J[e],1)}t.m=t.d.m=e;t.2r()},2r:9(){h e=c;e.26.2D(e.m);e.13=e.d.13=e.26[e.26.N-2];e.26.5f(0);7(e.13!==e.m){e.35();e.3e();e.2l();7(e.6.O!==b){e.3j()}}7(A e.6.3y==="9"&&e.13!==e.m){e.6.3y.R(c,[e.$k])}},X:9(){h e=c;e.3A="X";t.18(e.1C)},3j:9(){h e=c;7(e.3A!=="X"){e.19()}},19:9(){h e=c;e.3A="19";7(e.6.O===b){p b}t.18(e.1C);e.1C=t.4d(9(){e.U(j)},e.6.O)},1t:9(e){h t=c;7(e==="1m"){t.$K.z(t.2z(t.6.1m))}l 7(e==="1w"){t.$K.z(t.2z(t.6.1w))}l 7(A e!=="2Y"){t.$K.z(t.2z(e))}},2z:9(e){p{"-1G-1a":"2C "+e+"1z 2s","-1W-1a":"2C "+e+"1z 2s","-o-1a":"2C "+e+"1z 2s",1a:"2C "+e+"1z 2s"}},3H:9(){p{"-1G-1a":"","-1W-1a":"","-o-1a":"",1a:""}},3I:9(e){p{"-1G-P":"1i("+e+"V, C, C)","-1W-P":"1i("+e+"V, C, C)","-o-P":"1i("+e+"V, C, C)","-1z-P":"1i("+e+"V, C, C)",P:"1i("+e+"V, C,C)"}},1L:9(e){h t=c;t.$K.z(t.3I(e))},3L:9(e){h t=c;t.$K.z({T:e})},1r:9(e,t){h n=c;n.29=b;n.$K.X(j,j).4b({T:e},{54:t||n.6.1m,3M:9(){n.29=j}})},4E:9(){h e=c,r="1i(C, C, C)",i=n.56("L"),s,o,u,a;i.2w.3O="  -1W-P:"+r+"; -1z-P:"+r+"; -o-P:"+r+"; -1G-P:"+r+"; P:"+r;s=/1i\\(C, C, C\\)/g;o=i.2w.3O.5i(s);u=o!==14&&o.N===1;a="5z"38 t||t.5Q.4P;e.F={1x:u,15:a}},4q:9(){h e=c;7(e.6.27!==b||e.6.1U!==b){e.3Q();e.3R()}},4C:9(){h e=c,t=["s","e","x"];e.16={};7(e.6.27===j&&e.6.1U===j){t=["2X.d 21.d","2N.d 3U.d","2n.d 3V.d 28.d"]}l 7(e.6.27===b&&e.6.1U===j){t=["2X.d","2N.d","2n.d 3V.d"]}l 7(e.6.27===j&&e.6.1U===b){t=["21.d","3U.d","28.d"]}e.16.3W=t[0];e.16.2K=t[1];e.16.2J=t[2]},3R:9(){h t=c;t.$k.w("5y.d",9(e){e.1l()});t.$k.w("21.3X",9(t){p e(t.1d).2m("5C, 5E, 5F, 5N")})},3Q:9(){9 s(e){7(e.2b!==W){p{x:e.2b[0].2c,y:e.2b[0].41}}7(e.2b===W){7(e.2c!==W){p{x:e.2c,y:e.41}}7(e.2c===W){p{x:e.52,y:e.53}}}}9 o(t){7(t==="w"){e(n).w(r.16.2K,a);e(n).w(r.16.2J,f)}l 7(t==="Q"){e(n).Q(r.16.2K);e(n).Q(r.16.2J)}}9 u(n){h u=n.3h||n||t.3g,a;7(u.5a===3){p b}7(r.E<=r.6.q){p}7(r.29===b&&!r.6.3f){p b}7(r.1T===b&&!r.6.3f){p b}7(r.6.O!==b){t.18(r.1C)}7(r.F.15!==j&&!r.$K.1I("3b")){r.$K.I("3b")}r.11=0;r.Y=0;e(c).z(r.3H());a=e(c).2h();i.2S=a.T;i.2R=s(u).x-a.T;i.2P=s(u).y-a.5o;o("w");i.2j=b;i.2L=u.1d||u.4c}9 a(o){h u=o.3h||o||t.3g,a,f;r.11=s(u).x-i.2R;r.2I=s(u).y-i.2P;r.Y=r.11-i.2S;7(A r.6.2E==="9"&&i.3C!==j&&r.Y!==0){i.3C=j;r.6.2E.R(r,[r.$k])}7((r.Y>8||r.Y<-8)&&r.F.15===j){7(u.1l!==W){u.1l()}l{u.5L=b}i.2j=j}7((r.2I>10||r.2I<-10)&&i.2j===b){e(n).Q("2N.d")}a=9(){p r.Y/5};f=9(){p r.3z+r.Y/5};r.11=1F.3v(1F.3Y(r.11,a()),f());7(r.F.1x===j){r.1L(r.11)}l{r.3L(r.11)}}9 f(n){h s=n.3h||n||t.3g,u,a,f;s.1d=s.1d||s.4c;i.3C=b;7(r.F.15!==j){r.$K.Z("3b")}7(r.Y<0){r.1y=r.d.1y="T"}l{r.1y=r.d.1y="3i"}7(r.Y!==0){u=r.4j();r.1g(u,b,"4e");7(i.2L===s.1d&&r.F.15!==j){e(s.1d).w("3a.4k",9(t){t.4S();t.4T();t.1l();e(t.1d).Q("3a.4k")});a=e.4N(s.1d,"4V").3a;f=a.4W();a.4X(0,0,f)}}o("Q")}h r=c,i={2R:0,2P:0,4Y:0,2S:0,2h:14,4Z:14,50:14,2j:14,51:14,2L:14};r.29=j;r.$k.w(r.16.3W,".d-1p",u)},4j:9(){h e=c,t=e.4m();7(t>e.D){e.m=e.D;t=e.D}l 7(e.11>=0){t=0;e.m=0}p t},4m:9(){h t=c,n=t.6.12===j?t.3E:t.J,r=t.11,i=14;e.2f(n,9(s,o){7(r-t.M/20>n[s+1]&&r-t.M/20<o&&t.34()==="T"){i=o;7(t.6.12===j){t.m=e.4p(i,t.J)}l{t.m=s}}l 7(r+t.M/20<o&&r+t.M/20>(n[s+1]||n[s]-t.M)&&t.34()==="3i"){7(t.6.12===j){i=n[s+1]||n[n.N-1];t.m=e.4p(i,t.J)}l{i=n[s+1];t.m=s+1}}});p t.m},34:9(){h e=c,t;7(e.Y<0){t="3i";e.3u="U"}l{t="T";e.3u="1n"}p t},4A:9(){h e=c;e.$k.w("d.U",9(){e.U()});e.$k.w("d.1n",9(){e.1n()});e.$k.w("d.19",9(t,n){e.6.O=n;e.19();e.32="19"});e.$k.w("d.X",9(){e.X();e.32="X"});e.$k.w("d.1g",9(t,n){e.1g(n)});e.$k.w("d.2g",9(t,n){e.2g(n)})},2p:9(){h e=c;7(e.6.2p===j&&e.F.15!==j&&e.6.O!==b){e.$k.w("57",9(){e.X()});e.$k.w("58",9(){7(e.32!=="X"){e.19()}})}},1Z:9(){h t=c,n,r,i,s,o;7(t.6.1Z===b){p b}1A(n=0;n<t.E;n+=1){r=e(t.$G[n]);7(r.v("d-1e")==="1e"){4s}i=r.v("d-1K");s=r.17(".5b");7(A s.v("1J")!=="2Y"){r.v("d-1e","1e");4s}7(r.v("d-1e")===W){s.3K();r.I("4u").v("d-1e","5e")}7(t.6.4v===j){o=i>=t.m}l{o=j}7(o&&i<t.m+t.6.q&&s.N){t.4w(r,s)}}},4w:9(e,n){9 o(){e.v("d-1e","1e").Z("4u");n.5h("v-1J");7(r.6.4x==="4y"){n.5j(5k)}l{n.3J()}7(A r.6.2T==="9"){r.6.2T.R(c,[r.$k])}}9 u(){i+=1;7(r.2Q(n.3l(0))||s===j){o()}l 7(i<=2q){t.1c(u,2q)}l{o()}}h r=c,i=0,s;7(n.5p("5q")==="5r"){n.z("5s-5t","5u("+n.v("1J")+")");s=j}l{n[0].1J=n.v("1J")}u()},1B:9(){9 s(){h r=e(n.$G[n.m]).2G();n.1H.z("2G",r+"V");7(!n.1H.1I("1B")){t.1c(9(){n.1H.I("1B")},0)}}9 o(){i+=1;7(n.2Q(r.3l(0))){s()}l 7(i<=2q){t.1c(o,2q)}l{n.1H.z("2G","")}}h n=c,r=e(n.$G[n.m]).17("5w"),i;7(r.3l(0)!==W){i=0;o()}l{s()}},2Q:9(e){h t;7(!e.3M){p b}t=A e.4D;7(t!=="W"&&e.4D===0){p b}p j},4g:9(){h t=c,n;7(t.6.2F===j){t.$G.Z("2d")}t.1D=[];1A(n=t.m;n<t.m+t.6.q;n+=1){t.1D.2D(n);7(t.6.2F===j){e(t.$G[n]).I("2d")}}t.d.1D=t.1D},4n:9(e){h t=c;t.4G="d-"+e+"-5B";t.4H="d-"+e+"-38"},4l:9(){9 a(e){p{2h:"5D",T:e+"V"}}h e=c,t=e.4G,n=e.4H,r=e.$G.1S(e.m),i=e.$G.1S(e.13),s=1F.4J(e.J[e.m])+e.J[e.13],o=1F.4J(e.J[e.m])+e.M/2,u="5G 5H 5I 5J";e.1E=j;e.$K.I("d-1P").z({"-1G-P-1P":o+"V","-1W-4K-1P":o+"V","4K-1P":o+"V"});i.z(a(s,10)).I(t).w(u,9(){e.3m=j;i.Q(u);e.31(i,t)});r.I(n).w(u,9(){e.36=j;r.Q(u);e.31(r,n)})},31:9(e,t){h n=c;e.z({2h:"",T:""}).Z(t);7(n.3m&&n.36){n.$K.Z("d-1P");n.3m=b;n.36=b;n.1E=b}},4o:9(){h e=c;e.d={2A:e.2A,5P:e.$k,S:e.$S,G:e.$G,m:e.m,13:e.13,1D:e.1D,15:e.F.15,F:e.F,1y:e.1y}},3G:9(){h r=c;r.$k.Q(".d d 21.3X");e(n).Q(".d d");e(t).Q("44",r.3d)},1V:9(){h e=c;7(e.$k.25().N!==0){e.$K.3r();e.$S.3r().3r();7(e.B){e.B.3k()}}e.3G();e.$k.2x("2w",e.$k.v("d-4I")||"").2x("H",e.$k.v("d-4F"))},5T:9(){h e=c;e.X();t.18(e.1X);e.1V();e.$k.5U()},5V:9(t){h n=c,r=e.4M({},n.2A,t);n.1V();n.1N(r,n.$k)},5W:9(e,t){h n=c,r;7(!e){p b}7(n.$k.25().N===0){n.$k.1o(e);n.23();p b}n.1V();7(t===W||t===-1){r=-1}l{r=t}7(r>=n.$S.N||r===-1){n.$S.1S(-1).5X(e)}l{n.$S.1S(r).5Y(e)}n.23()},5Z:9(e){h t=c,n;7(t.$k.25().N===0){p b}7(e===W||e===-1){n=-1}l{n=e}t.1V();t.$S.1S(n).3k();t.23()}};e.37.2B=9(t){p c.2f(9(){7(e(c).v("d-1N")===j){p b}e(c).v("d-1N",j);h n=3c.3q(r);n.1N(t,c);e.v(c,"2B",n)})};e.37.2B.6={q:5,1h:b,1s:[60,4],1O:[61,3],22:[62,2],1Q:b,1R:[63,1],48:b,46:b,1m:2M,1w:64,2v:65,O:b,2p:b,2a:b,2U:["1n","U"],2e:j,12:b,1v:j,39:b,2Z:j,45:2M,47:t,1M:"d-66",2i:"d-2i",1Z:b,4v:j,4x:"4y",1B:b,2O:b,33:b,3f:j,27:j,1U:j,2F:b,2o:b,3B:b,3D:b,2H:b,3s:b,1Y:b,3y:b,3w:b,2E:b,2T:b}})(67,68,69)',0,382,"||||||options|if||function||false|this|owl||||var||true|elem|else|currentItem|||return|items|||||data|on|||css|typeof|owlControls|0px|maximumItem|itemsAmount|browser|owlItems|class|addClass|positionsInArray|owlWrapper|div|itemWidth|length|autoPlay|transform|off|apply|userItems|left|next|px|undefined|stop|newRelativeX|removeClass||newPosX|scrollPerPage|prevItem|null|isTouch|ev_types|find|clearInterval|play|transition|disabled|setTimeout|target|loaded|width|goTo|itemsCustom|translate3d|page|paginationWrapper|preventDefault|slideSpeed|prev|append|wrapper|buttonNext|css2slide|itemsDesktop|swapSpeed|buttonPrev|pagination|paginationSpeed|support3d|dragDirection|ms|for|autoHeight|autoPlayInterval|visibleItems|isTransition|Math|webkit|wrapperOuter|hasClass|src|item|transition3d|baseClass|init|itemsDesktopSmall|origin|itemsTabletSmall|itemsMobile|eq|isCss3Finish|touchDrag|unWrap|moz|checkVisible|beforeMove|lazyLoad||mousedown|itemsTablet|setVars|roundPages|children|prevArr|mouseDrag|mouseup|isCssFinish|navigation|touches|pageX|active|rewindNav|each|jumpTo|position|theme|sliding|rewind|eachMoveUpdate|is|touchend|transitionStyle|stopOnHover|100|afterGo|ease|orignalItems|opacity|rewindSpeed|style|attr|html|addCssSpeed|userOptions|owlCarousel|all|push|startDragging|addClassActive|height|beforeInit|newPosY|end|move|targetElement|200|touchmove|jsonPath|offsetY|completeImg|offsetX|relativePos|afterLazyLoad|navigationText|updateItems|calculateAll|touchstart|string|responsive|updateControls|clearTransStyle|hoverStatus|jsonSuccess|moveDirection|checkPagination|endCurrent|fn|in|paginationNumbers|click|grabbing|Object|resizer|checkNavigation|dragBeforeAnimFinish|event|originalEvent|right|checkAp|remove|get|endPrev|visible|watchVisibility|Number|create|unwrap|afterInit|logIn|playDirection|max|afterAction|updateVars|afterMove|maximumPixels|apStatus|beforeUpdate|dragging|afterUpdate|pagesInArray|reload|clearEvents|removeTransition|doTranslate|show|hide|css2move|complete|span|cssText|updatePagination|gestures|disabledEvents|buildButtons|buildPagination|mousemove|touchcancel|start|disableTextSelect|min|loops|calculateWidth|pageY|appendWrapperSizes|appendItemsSizes|resize|responsiveRefreshRate|itemsScaleUp|responsiveBaseWidth|singleItem|outer|wrap|animate|srcElement|setInterval|drag|updatePosition|onVisibleItems|block|display|getNewPosition|disable|singleItemTransition|closestItem|transitionTypes|owlStatus|inArray|moveEvents|response|continue|buildControls|loading|lazyFollow|lazyPreload|lazyEffect|fade|onStartup|customEvents|wrapItems|eventTypes|naturalWidth|checkBrowser|originalClasses|outClass|inClass|originalStyles|abs|perspective|loadContent|extend|_data|round|msMaxTouchPoints|5e3|text|stopImmediatePropagation|stopPropagation|buttons|events|pop|splice|baseElWidth|minSwipe|maxSwipe|dargging|clientX|clientY|duration|destroyControls|createElement|mouseover|mouseout|numbers|which|lazyOwl|appendTo|clearTimeout|checked|shift|sort|removeAttr|match|fadeIn|400|clickable|toggleClass|wrapAll|top|prop|tagName|DIV|background|image|url|wrapperWidth|img|500|dragstart|ontouchstart|controls|out|input|relative|textarea|select|webkitAnimationEnd|oAnimationEnd|MSAnimationEnd|animationend|getJSON|returnValue|hasOwnProperty|option|onstartup|baseElement|navigator|new|prototype|destroy|removeData|reinit|addItem|after|before|removeItem|1199|979|768|479|800|1e3|carousel|jQuery|window|document".split("|"),0,{}));
!function(t){"use strict";t('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function(){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var e=t(this.hash);if((e=e.length?e:t("[name="+this.hash.slice(1)+"]")).length)return t("html, body").animate({scrollTop:e.offset().top},1e3,"easeInOutExpo"),!1}}),t(".js-scroll-trigger").click(function(){t(".navbar-collapse").collapse("hide")}),t("body").scrollspy({target:"#sideNav"})}(jQuery);
"use strict";jQuery(document).ready(function(n){n.noConflict(),jQuery(".stellarnav").stellarNav({theme:"transparentAJ"}),n(nav.find("> ul > li")).children("ul").stop(!0,!0).slideUp(0);n(window).on("resize",function(){!function(){n(window).height();992<n(window).width()&&n(nav.find("> ul > li")).children("ul").stop(!0,!0).slideUp(0)}()}).resize()});
!function(h){h.fn.stellarNav=function(n,d,f){nav=h(this),d=h(window).width();var r=h.extend({theme:"plain",breakpoint:992,menuLabel:"Menu",sticky:!1,position:"static",openingSpeed:250,closingDelay:250,showArrows:!0,phoneBtn:"",locationBtn:"",closeBtn:!0,scrollbarFix:!1},n);return this.each(function(){if("light"!=r.theme&&"dark"!=r.theme&&"transparentAJ"!=r.theme||nav.addClass(r.theme),r.breakpoint&&(f=r.breakpoint),r.menuLabel&&(menuLabel=r.menuLabel),r.phoneBtn&&r.locationBtn)var n="third";else if(r.phoneBtn||r.locationBtn)n="half";else n="full";if("right"==r.position||"left"==r.position?nav.prepend('<a href="#" class="menu-toggle"><i class="fa fa-bars"></i> '+menuLabel+"</a>"):nav.prepend('<a href="#" class="menu-toggle '+n+'"><i class="fa fa-bars"></i> '+menuLabel+"</a>"),r.phoneBtn&&"right"!=r.position&&"left"!=r.position){var i='<a href="tel:'+r.phoneBtn+'" class="call-btn-mobile '+n+'"><i class="fa fa-phone"></i> <span>Call Us</span></a>';nav.find("a.menu-toggle").after(i)}if(r.locationBtn&&"right"!=r.position&&"left"!=r.position){i='<a href="'+r.locationBtn+'" class="location-btn-mobile '+n+'" target="_blank"><i class="fa fa-map-marker"></i> <span>Location</span></a>';nav.find("a.menu-toggle").after(i)}if(r.sticky&&(navPos=nav.offset().top,f<=d&&h(window).bind("scroll",function(){h(window).scrollTop()>navPos?nav.addClass("fixed"):nav.removeClass("fixed")})),"top"==r.position&&nav.addClass("top"),"left"==r.position||"right"==r.position){var e='<a href="#" class="close-menu '+n+'"><i class="fa fa-close"></i> <span>Close</span></a>',s='<a href="tel:'+r.phoneBtn+'" class="call-btn-mobile '+n+'"><i class="fa fa-phone"></i></a>',a='<a href="'+r.locationBtn+'" class="location-btn-mobile '+n+'" target="_blank"><i class="fa fa-map-marker"></i></a>';nav.find("ul:first").prepend(e),r.locationBtn&&nav.find("ul:first").prepend(a),r.phoneBtn&&nav.find("ul:first").prepend(s)}"right"==r.position&&nav.addClass("right"),"left"==r.position&&nav.addClass("left"),r.showArrows||nav.addClass("hide-arrows"),r.closeBtn&&"right"!=r.position&&"left"!=r.position&&nav.find("ul:first").append('<li><a href="#" class="close-menu"><i class="fa fa-close"></i> Close Menu</a></li>'),r.scrollbarFix&&h("body").addClass("stellarnav-noscroll-x"),h(".menu-toggle").on("click",function(n){n.preventDefault(),"left"==r.position||"right"==r.position?(nav.find("ul:first").stop(!0,!0).fadeToggle(r.openingSpeed),nav.toggleClass("active"),nav.hasClass("active")&&nav.hasClass("mobile")&&h(document).on("click",function(n){nav.hasClass("mobile")&&(h(n.target).closest(nav).length||(nav.find("ul:first").stop(!0,!0).fadeOut(r.openingSpeed),nav.removeClass("active")))})):(nav.find("ul:first").stop(!0,!0).slideToggle(r.openingSpeed),nav.toggleClass("active"))}),h(".close-menu").click(function(){nav.removeClass("active"),"left"==r.position||"right"==r.position?nav.find("ul:first").stop(!0,!0).fadeToggle(r.openingSpeed):nav.find("ul:first").stop(!0,!0).slideUp(r.openingSpeed).toggleClass("active")}),nav.find("li a").each(function(){0<h(this).next().length&&h(this).parent("li").addClass("has-sub").append('<a class="dd-toggle" href="#"><i class="fa fa-plus"></i></a>')}),nav.find("li .dd-toggle").on("click",function(n){n.preventDefault(),h(this).parent("li").children("ul").stop(!0,!0).slideToggle(r.openingSpeed),h(this).parent("li").toggleClass("open")});var t=function(){nav.find("li").unbind("mouseenter"),nav.find("li").unbind("mouseleave")};parentItems=nav.find("> ul > li");var l=function(){h(parentItems).each(function(){h(this).hasClass("mega")?(h(this).on("mouseenter",function(){h(this).find("ul").first().stop(!0,!0).slideDown(r.openingSpeed)}),h(this).on("mouseleave",function(){h(this).find("ul").first().stop(!0,!0).slideUp(r.openingSpeed)})):(h(this).on("mouseenter",function(){h(this).children("ul").stop(!0,!0).slideDown(r.openingSpeed)}),h(this).on("mouseleave",function(){h(this).children("ul").stop(!0,!0).delay(r.closingDelay).slideUp(r.openingSpeed)}),h(this).find("li.has-sub").on("mouseenter",function(){h(this).children("ul").stop(!0,!0).slideDown(r.openingSpeed)}),h(this).find("li.has-sub").on("mouseleave",function(){h(this).children("ul").stop(!0,!0).delay(r.closingDelay).slideUp(r.openingSpeed)}))})};function o(){window.innerWidth<=f?(t(),nav.addClass("mobile"),nav.removeClass("desktop"),!nav.hasClass("active")&&nav.find("ul:first").is(":visible")&&nav.find("ul:first").hide(),nav.find("li.mega").each(function(){h(this).find("ul").first().removeAttr("style"),h(this).find("ul").first().children().removeAttr("style")})):(nav.addClass("desktop"),nav.removeClass("mobile"),nav.hasClass("active")&&nav.removeClass("active"),!nav.hasClass("active")&&nav.find("ul:first").is(":hidden")&&nav.find("ul:first").show(),h("li.open").removeClass("open").find("ul:visible").hide(),t(),l(),navWidth=0,navIniPos=0,h(parentItems).each(function(){navWidth+=h(this)[0].getBoundingClientRect().width,navWidth=Math.round(navWidth),h(this).hasClass("mega")&&(h(this).find("ul").first().css({left:navIniPos}),numCols=h(this).attr("data-columns"),2==numCols?h(this).find("li.has-sub").width("50%"):3==numCols?h(this).find("ul").first().children().width("33.33%"):4==numCols?h(this).find("ul").first().children().width("25%"):5==numCols?h(this).find("ul").first().children().width("20%"):6==numCols?h(this).find("ul").first().children().width("16.66%"):7==numCols?h(this).find("ul").first().children().width("14.28%"):8==numCols?h(this).find("ul").first().children().width("12.5%"):h(this).find("ul").first().children().width("25%"))}),parentItems.hasClass("mega")&&nav.find("li.mega ul").css({"max-width":navWidth}))}o(),h(window).on("resize",function(){o()})})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
